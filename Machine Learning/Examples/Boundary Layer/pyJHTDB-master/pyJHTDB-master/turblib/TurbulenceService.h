// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* TurbulenceService.h
   Generated by wsdl2h 2.8.91 from http://turbulence.pha.jhu.edu/service/turbulence.asmx?WSDL and typemap.dat
   2020-08-28 01:11:05 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on TurbulenceService.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2019, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://turbulence.pha.jhu.edu/                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

turb1 = "http://turbulence.pha.jhu.edu/"

*/

#define SOAP_NAMESPACE_OF_turb1	"http://turbulence.pha.jhu.edu/"
//gsoap turb1 schema namespace:	http://turbulence.pha.jhu.edu/
//gsoap turb1 schema elementForm:	qualified
//gsoap turb1 schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in type "xs:base64Binary".
struct xsd__base64Binary
{
    unsigned char *__ptr;
    int __size;
    char *id, *type, *options; // NOTE: non-NULL for DIME/MIME/MTOM XOP attachments only
};



/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://turbulence.pha.jhu.edu/                                           *
 *                                                                            *
\******************************************************************************/

/// @brief "http://turbulence.pha.jhu.edu/":SpatialInterpolation is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "turb1__SpatialInterpolation__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum turb1__SpatialInterpolation
{
	turb1__SpatialInterpolation__None,	///< xs:string value="None"
	turb1__SpatialInterpolation__None_USCOREFd4,	///< xs:string value="None_Fd4"
	turb1__SpatialInterpolation__None_USCOREFd6,	///< xs:string value="None_Fd6"
	turb1__SpatialInterpolation__None_USCOREFd8,	///< xs:string value="None_Fd8"
	turb1__SpatialInterpolation__Fd4Lag4,	///< xs:string value="Fd4Lag4"
	turb1__SpatialInterpolation__Lag4,	///< xs:string value="Lag4"
	turb1__SpatialInterpolation__Lag6,	///< xs:string value="Lag6"
	turb1__SpatialInterpolation__Lag8,	///< xs:string value="Lag8"
	turb1__SpatialInterpolation__M1Q4,	///< xs:string value="M1Q4"
	turb1__SpatialInterpolation__M2Q4,	///< xs:string value="M2Q4"
	turb1__SpatialInterpolation__M3Q4,	///< xs:string value="M3Q4"
	turb1__SpatialInterpolation__M4Q4,	///< xs:string value="M4Q4"
	turb1__SpatialInterpolation__M1Q6,	///< xs:string value="M1Q6"
	turb1__SpatialInterpolation__M2Q6,	///< xs:string value="M2Q6"
	turb1__SpatialInterpolation__M3Q6,	///< xs:string value="M3Q6"
	turb1__SpatialInterpolation__M4Q6,	///< xs:string value="M4Q6"
	turb1__SpatialInterpolation__M1Q8,	///< xs:string value="M1Q8"
	turb1__SpatialInterpolation__M2Q8,	///< xs:string value="M2Q8"
	turb1__SpatialInterpolation__M3Q8,	///< xs:string value="M3Q8"
	turb1__SpatialInterpolation__M4Q8,	///< xs:string value="M4Q8"
	turb1__SpatialInterpolation__M1Q10,	///< xs:string value="M1Q10"
	turb1__SpatialInterpolation__M2Q10,	///< xs:string value="M2Q10"
	turb1__SpatialInterpolation__M3Q10,	///< xs:string value="M3Q10"
	turb1__SpatialInterpolation__M4Q10,	///< xs:string value="M4Q10"
	turb1__SpatialInterpolation__M1Q12,	///< xs:string value="M1Q12"
	turb1__SpatialInterpolation__M2Q12,	///< xs:string value="M2Q12"
	turb1__SpatialInterpolation__M3Q12,	///< xs:string value="M3Q12"
	turb1__SpatialInterpolation__M4Q12,	///< xs:string value="M4Q12"
	turb1__SpatialInterpolation__M1Q14,	///< xs:string value="M1Q14"
	turb1__SpatialInterpolation__M2Q14,	///< xs:string value="M2Q14"
	turb1__SpatialInterpolation__M3Q14,	///< xs:string value="M3Q14"
	turb1__SpatialInterpolation__M4Q14,	///< xs:string value="M4Q14"
};

/// @brief "http://turbulence.pha.jhu.edu/":TemporalInterpolation is a simpleType restriction of type xs:string.
///
/// @note The enum values are prefixed with "turb1__TemporalInterpolation__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum turb1__TemporalInterpolation
{
	turb1__TemporalInterpolation__None,	///< xs:string value="None"
	turb1__TemporalInterpolation__PCHIP,	///< xs:string value="PCHIP"
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://turbulence.pha.jhu.edu/                                           *
 *                                                                            *
\******************************************************************************/

/// @brief "http://turbulence.pha.jhu.edu/":ArrayOfPoint3 is a complexType.
///
/// @note struct turb1__ArrayOfPoint3 operations:
/// - turb1__ArrayOfPoint3* soap_new_turb1__ArrayOfPoint3(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_turb1__ArrayOfPoint3(struct soap*, turb1__ArrayOfPoint3*) default initialize members
/// - int soap_read_turb1__ArrayOfPoint3(struct soap*, turb1__ArrayOfPoint3*) deserialize from a source
/// - int soap_write_turb1__ArrayOfPoint3(struct soap*, turb1__ArrayOfPoint3*) serialize to a sink
/// - turb1__ArrayOfPoint3* soap_dup_turb1__ArrayOfPoint3(struct soap*, turb1__ArrayOfPoint3* dst, turb1__ArrayOfPoint3 *src) returns deep copy of turb1__ArrayOfPoint3 src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_turb1__ArrayOfPoint3(turb1__ArrayOfPoint3*) deep deletes turb1__ArrayOfPoint3 data members, use only on dst after soap_dup_turb1__ArrayOfPoint3(NULL, turb1__ArrayOfPoint3 *dst, turb1__ArrayOfPoint3 *src) (use soapcpp2 -Ed)
struct turb1__ArrayOfPoint3
{
/// Size of array of struct turb1__Point3* is 0..unbounded.
  $ int                                  __sizePoint3                   0;
/// Array struct turb1__Point3* of size 0..unbounded.
    struct turb1__Point3*                Point3                         0;	///< Multiple elements.
};

/// @brief "http://turbulence.pha.jhu.edu/":Point3 is a complexType.
///
/// @note struct turb1__Point3 operations:
/// - turb1__Point3* soap_new_turb1__Point3(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_turb1__Point3(struct soap*, turb1__Point3*) default initialize members
/// - int soap_read_turb1__Point3(struct soap*, turb1__Point3*) deserialize from a source
/// - int soap_write_turb1__Point3(struct soap*, turb1__Point3*) serialize to a sink
/// - turb1__Point3* soap_dup_turb1__Point3(struct soap*, turb1__Point3* dst, turb1__Point3 *src) returns deep copy of turb1__Point3 src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_turb1__Point3(turb1__Point3*) deep deletes turb1__Point3 data members, use only on dst after soap_dup_turb1__Point3(NULL, turb1__Point3 *dst, turb1__Point3 *src) (use soapcpp2 -Ed)
struct turb1__Point3
{
/// Element "x" of type xs:float.
    float                                x                              1;	///< Required element.
/// Element "y" of type xs:float.
    float                                y                              1;	///< Required element.
/// Element "z" of type xs:float.
    float                                z                              1;	///< Required element.
};

/// @brief "http://turbulence.pha.jhu.edu/":ArrayOfVector3 is a complexType.
///
/// @note struct turb1__ArrayOfVector3 operations:
/// - turb1__ArrayOfVector3* soap_new_turb1__ArrayOfVector3(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_turb1__ArrayOfVector3(struct soap*, turb1__ArrayOfVector3*) default initialize members
/// - int soap_read_turb1__ArrayOfVector3(struct soap*, turb1__ArrayOfVector3*) deserialize from a source
/// - int soap_write_turb1__ArrayOfVector3(struct soap*, turb1__ArrayOfVector3*) serialize to a sink
/// - turb1__ArrayOfVector3* soap_dup_turb1__ArrayOfVector3(struct soap*, turb1__ArrayOfVector3* dst, turb1__ArrayOfVector3 *src) returns deep copy of turb1__ArrayOfVector3 src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_turb1__ArrayOfVector3(turb1__ArrayOfVector3*) deep deletes turb1__ArrayOfVector3 data members, use only on dst after soap_dup_turb1__ArrayOfVector3(NULL, turb1__ArrayOfVector3 *dst, turb1__ArrayOfVector3 *src) (use soapcpp2 -Ed)
struct turb1__ArrayOfVector3
{
/// Size of array of struct turb1__Vector3* is 0..unbounded.
  $ int                                  __sizeVector3                  0;
/// Array struct turb1__Vector3* of size 0..unbounded.
    struct turb1__Vector3*               Vector3                        0;	///< Multiple elements.
};

/// @brief "http://turbulence.pha.jhu.edu/":Vector3 is a complexType.
///
/// @note struct turb1__Vector3 operations:
/// - turb1__Vector3* soap_new_turb1__Vector3(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_turb1__Vector3(struct soap*, turb1__Vector3*) default initialize members
/// - int soap_read_turb1__Vector3(struct soap*, turb1__Vector3*) deserialize from a source
/// - int soap_write_turb1__Vector3(struct soap*, turb1__Vector3*) serialize to a sink
/// - turb1__Vector3* soap_dup_turb1__Vector3(struct soap*, turb1__Vector3* dst, turb1__Vector3 *src) returns deep copy of turb1__Vector3 src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_turb1__Vector3(turb1__Vector3*) deep deletes turb1__Vector3 data members, use only on dst after soap_dup_turb1__Vector3(NULL, turb1__Vector3 *dst, turb1__Vector3 *src) (use soapcpp2 -Ed)
struct turb1__Vector3
{
/// Element "x" of type xs:float.
    float                                x                              1;	///< Required element.
/// Element "y" of type xs:float.
    float                                y                              1;	///< Required element.
/// Element "z" of type xs:float.
    float                                z                              1;	///< Required element.
};

/// @brief "http://turbulence.pha.jhu.edu/":ArrayOfPressure is a complexType.
///
/// @note struct turb1__ArrayOfPressure operations:
/// - turb1__ArrayOfPressure* soap_new_turb1__ArrayOfPressure(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_turb1__ArrayOfPressure(struct soap*, turb1__ArrayOfPressure*) default initialize members
/// - int soap_read_turb1__ArrayOfPressure(struct soap*, turb1__ArrayOfPressure*) deserialize from a source
/// - int soap_write_turb1__ArrayOfPressure(struct soap*, turb1__ArrayOfPressure*) serialize to a sink
/// - turb1__ArrayOfPressure* soap_dup_turb1__ArrayOfPressure(struct soap*, turb1__ArrayOfPressure* dst, turb1__ArrayOfPressure *src) returns deep copy of turb1__ArrayOfPressure src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_turb1__ArrayOfPressure(turb1__ArrayOfPressure*) deep deletes turb1__ArrayOfPressure data members, use only on dst after soap_dup_turb1__ArrayOfPressure(NULL, turb1__ArrayOfPressure *dst, turb1__ArrayOfPressure *src) (use soapcpp2 -Ed)
struct turb1__ArrayOfPressure
{
/// Size of array of struct turb1__Pressure* is 0..unbounded.
  $ int                                  __sizePressure                 0;
/// Array struct turb1__Pressure* of size 0..unbounded.
    struct turb1__Pressure*              Pressure                       0;	///< Multiple elements.
};

/// @brief "http://turbulence.pha.jhu.edu/":Pressure is a complexType.
///
/// @note struct turb1__Pressure operations:
/// - turb1__Pressure* soap_new_turb1__Pressure(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_turb1__Pressure(struct soap*, turb1__Pressure*) default initialize members
/// - int soap_read_turb1__Pressure(struct soap*, turb1__Pressure*) deserialize from a source
/// - int soap_write_turb1__Pressure(struct soap*, turb1__Pressure*) serialize to a sink
/// - turb1__Pressure* soap_dup_turb1__Pressure(struct soap*, turb1__Pressure* dst, turb1__Pressure *src) returns deep copy of turb1__Pressure src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_turb1__Pressure(turb1__Pressure*) deep deletes turb1__Pressure data members, use only on dst after soap_dup_turb1__Pressure(NULL, turb1__Pressure *dst, turb1__Pressure *src) (use soapcpp2 -Ed)
struct turb1__Pressure
{
/// Element "p" of type xs:float.
    float                                p                              1;	///< Required element.
};

/// @brief "http://turbulence.pha.jhu.edu/":ArrayOfVector3P is a complexType.
///
/// @note struct turb1__ArrayOfVector3P operations:
/// - turb1__ArrayOfVector3P* soap_new_turb1__ArrayOfVector3P(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_turb1__ArrayOfVector3P(struct soap*, turb1__ArrayOfVector3P*) default initialize members
/// - int soap_read_turb1__ArrayOfVector3P(struct soap*, turb1__ArrayOfVector3P*) deserialize from a source
/// - int soap_write_turb1__ArrayOfVector3P(struct soap*, turb1__ArrayOfVector3P*) serialize to a sink
/// - turb1__ArrayOfVector3P* soap_dup_turb1__ArrayOfVector3P(struct soap*, turb1__ArrayOfVector3P* dst, turb1__ArrayOfVector3P *src) returns deep copy of turb1__ArrayOfVector3P src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_turb1__ArrayOfVector3P(turb1__ArrayOfVector3P*) deep deletes turb1__ArrayOfVector3P data members, use only on dst after soap_dup_turb1__ArrayOfVector3P(NULL, turb1__ArrayOfVector3P *dst, turb1__ArrayOfVector3P *src) (use soapcpp2 -Ed)
struct turb1__ArrayOfVector3P
{
/// Size of array of struct turb1__Vector3P* is 0..unbounded.
  $ int                                  __sizeVector3P                 0;
/// Array struct turb1__Vector3P* of size 0..unbounded.
    struct turb1__Vector3P*              Vector3P                       0;	///< Multiple elements.
};

/// @brief "http://turbulence.pha.jhu.edu/":Vector3P is a complexType.
///
/// @note struct turb1__Vector3P operations:
/// - turb1__Vector3P* soap_new_turb1__Vector3P(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_turb1__Vector3P(struct soap*, turb1__Vector3P*) default initialize members
/// - int soap_read_turb1__Vector3P(struct soap*, turb1__Vector3P*) deserialize from a source
/// - int soap_write_turb1__Vector3P(struct soap*, turb1__Vector3P*) serialize to a sink
/// - turb1__Vector3P* soap_dup_turb1__Vector3P(struct soap*, turb1__Vector3P* dst, turb1__Vector3P *src) returns deep copy of turb1__Vector3P src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_turb1__Vector3P(turb1__Vector3P*) deep deletes turb1__Vector3P data members, use only on dst after soap_dup_turb1__Vector3P(NULL, turb1__Vector3P *dst, turb1__Vector3P *src) (use soapcpp2 -Ed)
struct turb1__Vector3P
{
/// Element "x" of type xs:float.
    float                                x                              1;	///< Required element.
/// Element "y" of type xs:float.
    float                                y                              1;	///< Required element.
/// Element "z" of type xs:float.
    float                                z                              1;	///< Required element.
/// Element "p" of type xs:float.
    float                                p                              1;	///< Required element.
};

/// @brief "http://turbulence.pha.jhu.edu/":ArrayOfVelocityGradient is a complexType.
///
/// @note struct turb1__ArrayOfVelocityGradient operations:
/// - turb1__ArrayOfVelocityGradient* soap_new_turb1__ArrayOfVelocityGradient(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_turb1__ArrayOfVelocityGradient(struct soap*, turb1__ArrayOfVelocityGradient*) default initialize members
/// - int soap_read_turb1__ArrayOfVelocityGradient(struct soap*, turb1__ArrayOfVelocityGradient*) deserialize from a source
/// - int soap_write_turb1__ArrayOfVelocityGradient(struct soap*, turb1__ArrayOfVelocityGradient*) serialize to a sink
/// - turb1__ArrayOfVelocityGradient* soap_dup_turb1__ArrayOfVelocityGradient(struct soap*, turb1__ArrayOfVelocityGradient* dst, turb1__ArrayOfVelocityGradient *src) returns deep copy of turb1__ArrayOfVelocityGradient src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_turb1__ArrayOfVelocityGradient(turb1__ArrayOfVelocityGradient*) deep deletes turb1__ArrayOfVelocityGradient data members, use only on dst after soap_dup_turb1__ArrayOfVelocityGradient(NULL, turb1__ArrayOfVelocityGradient *dst, turb1__ArrayOfVelocityGradient *src) (use soapcpp2 -Ed)
struct turb1__ArrayOfVelocityGradient
{
/// Size of array of struct turb1__VelocityGradient* is 0..unbounded.
  $ int                                  __sizeVelocityGradient         0;
/// Array struct turb1__VelocityGradient* of size 0..unbounded.
    struct turb1__VelocityGradient*      VelocityGradient               0;	///< Multiple elements.
};

/// @brief "http://turbulence.pha.jhu.edu/":VelocityGradient is a complexType.
///
/// @note struct turb1__VelocityGradient operations:
/// - turb1__VelocityGradient* soap_new_turb1__VelocityGradient(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_turb1__VelocityGradient(struct soap*, turb1__VelocityGradient*) default initialize members
/// - int soap_read_turb1__VelocityGradient(struct soap*, turb1__VelocityGradient*) deserialize from a source
/// - int soap_write_turb1__VelocityGradient(struct soap*, turb1__VelocityGradient*) serialize to a sink
/// - turb1__VelocityGradient* soap_dup_turb1__VelocityGradient(struct soap*, turb1__VelocityGradient* dst, turb1__VelocityGradient *src) returns deep copy of turb1__VelocityGradient src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_turb1__VelocityGradient(turb1__VelocityGradient*) deep deletes turb1__VelocityGradient data members, use only on dst after soap_dup_turb1__VelocityGradient(NULL, turb1__VelocityGradient *dst, turb1__VelocityGradient *src) (use soapcpp2 -Ed)
struct turb1__VelocityGradient
{
/// Element "duxdx" of type xs:float.
    float                                duxdx                          1;	///< Required element.
/// Element "duxdy" of type xs:float.
    float                                duxdy                          1;	///< Required element.
/// Element "duxdz" of type xs:float.
    float                                duxdz                          1;	///< Required element.
/// Element "duydx" of type xs:float.
    float                                duydx                          1;	///< Required element.
/// Element "duydy" of type xs:float.
    float                                duydy                          1;	///< Required element.
/// Element "duydz" of type xs:float.
    float                                duydz                          1;	///< Required element.
/// Element "duzdx" of type xs:float.
    float                                duzdx                          1;	///< Required element.
/// Element "duzdy" of type xs:float.
    float                                duzdy                          1;	///< Required element.
/// Element "duzdz" of type xs:float.
    float                                duzdz                          1;	///< Required element.
};

/// @brief "http://turbulence.pha.jhu.edu/":ArrayOfVelocityHessian is a complexType.
///
/// @note struct turb1__ArrayOfVelocityHessian operations:
/// - turb1__ArrayOfVelocityHessian* soap_new_turb1__ArrayOfVelocityHessian(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_turb1__ArrayOfVelocityHessian(struct soap*, turb1__ArrayOfVelocityHessian*) default initialize members
/// - int soap_read_turb1__ArrayOfVelocityHessian(struct soap*, turb1__ArrayOfVelocityHessian*) deserialize from a source
/// - int soap_write_turb1__ArrayOfVelocityHessian(struct soap*, turb1__ArrayOfVelocityHessian*) serialize to a sink
/// - turb1__ArrayOfVelocityHessian* soap_dup_turb1__ArrayOfVelocityHessian(struct soap*, turb1__ArrayOfVelocityHessian* dst, turb1__ArrayOfVelocityHessian *src) returns deep copy of turb1__ArrayOfVelocityHessian src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_turb1__ArrayOfVelocityHessian(turb1__ArrayOfVelocityHessian*) deep deletes turb1__ArrayOfVelocityHessian data members, use only on dst after soap_dup_turb1__ArrayOfVelocityHessian(NULL, turb1__ArrayOfVelocityHessian *dst, turb1__ArrayOfVelocityHessian *src) (use soapcpp2 -Ed)
struct turb1__ArrayOfVelocityHessian
{
/// Size of array of struct turb1__VelocityHessian* is 0..unbounded.
  $ int                                  __sizeVelocityHessian          0;
/// Array struct turb1__VelocityHessian* of size 0..unbounded.
    struct turb1__VelocityHessian*       VelocityHessian                0;	///< Multiple elements.
};

/// @brief "http://turbulence.pha.jhu.edu/":VelocityHessian is a complexType.
///
/// @note struct turb1__VelocityHessian operations:
/// - turb1__VelocityHessian* soap_new_turb1__VelocityHessian(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_turb1__VelocityHessian(struct soap*, turb1__VelocityHessian*) default initialize members
/// - int soap_read_turb1__VelocityHessian(struct soap*, turb1__VelocityHessian*) deserialize from a source
/// - int soap_write_turb1__VelocityHessian(struct soap*, turb1__VelocityHessian*) serialize to a sink
/// - turb1__VelocityHessian* soap_dup_turb1__VelocityHessian(struct soap*, turb1__VelocityHessian* dst, turb1__VelocityHessian *src) returns deep copy of turb1__VelocityHessian src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_turb1__VelocityHessian(turb1__VelocityHessian*) deep deletes turb1__VelocityHessian data members, use only on dst after soap_dup_turb1__VelocityHessian(NULL, turb1__VelocityHessian *dst, turb1__VelocityHessian *src) (use soapcpp2 -Ed)
struct turb1__VelocityHessian
{
/// Element "d2uxdxdx" of type xs:float.
    float                                d2uxdxdx                       1;	///< Required element.
/// Element "d2uxdxdy" of type xs:float.
    float                                d2uxdxdy                       1;	///< Required element.
/// Element "d2uxdxdz" of type xs:float.
    float                                d2uxdxdz                       1;	///< Required element.
/// Element "d2uxdydy" of type xs:float.
    float                                d2uxdydy                       1;	///< Required element.
/// Element "d2uxdydz" of type xs:float.
    float                                d2uxdydz                       1;	///< Required element.
/// Element "d2uxdzdz" of type xs:float.
    float                                d2uxdzdz                       1;	///< Required element.
/// Element "d2uydxdx" of type xs:float.
    float                                d2uydxdx                       1;	///< Required element.
/// Element "d2uydxdy" of type xs:float.
    float                                d2uydxdy                       1;	///< Required element.
/// Element "d2uydxdz" of type xs:float.
    float                                d2uydxdz                       1;	///< Required element.
/// Element "d2uydydy" of type xs:float.
    float                                d2uydydy                       1;	///< Required element.
/// Element "d2uydydz" of type xs:float.
    float                                d2uydydz                       1;	///< Required element.
/// Element "d2uydzdz" of type xs:float.
    float                                d2uydzdz                       1;	///< Required element.
/// Element "d2uzdxdx" of type xs:float.
    float                                d2uzdxdx                       1;	///< Required element.
/// Element "d2uzdxdy" of type xs:float.
    float                                d2uzdxdy                       1;	///< Required element.
/// Element "d2uzdxdz" of type xs:float.
    float                                d2uzdxdz                       1;	///< Required element.
/// Element "d2uzdydy" of type xs:float.
    float                                d2uzdydy                       1;	///< Required element.
/// Element "d2uzdydz" of type xs:float.
    float                                d2uzdydz                       1;	///< Required element.
/// Element "d2uzdzdz" of type xs:float.
    float                                d2uzdzdz                       1;	///< Required element.
};

/// @brief "http://turbulence.pha.jhu.edu/":ArrayOfPressureHessian is a complexType.
///
/// @note struct turb1__ArrayOfPressureHessian operations:
/// - turb1__ArrayOfPressureHessian* soap_new_turb1__ArrayOfPressureHessian(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_turb1__ArrayOfPressureHessian(struct soap*, turb1__ArrayOfPressureHessian*) default initialize members
/// - int soap_read_turb1__ArrayOfPressureHessian(struct soap*, turb1__ArrayOfPressureHessian*) deserialize from a source
/// - int soap_write_turb1__ArrayOfPressureHessian(struct soap*, turb1__ArrayOfPressureHessian*) serialize to a sink
/// - turb1__ArrayOfPressureHessian* soap_dup_turb1__ArrayOfPressureHessian(struct soap*, turb1__ArrayOfPressureHessian* dst, turb1__ArrayOfPressureHessian *src) returns deep copy of turb1__ArrayOfPressureHessian src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_turb1__ArrayOfPressureHessian(turb1__ArrayOfPressureHessian*) deep deletes turb1__ArrayOfPressureHessian data members, use only on dst after soap_dup_turb1__ArrayOfPressureHessian(NULL, turb1__ArrayOfPressureHessian *dst, turb1__ArrayOfPressureHessian *src) (use soapcpp2 -Ed)
struct turb1__ArrayOfPressureHessian
{
/// Size of array of struct turb1__PressureHessian* is 0..unbounded.
  $ int                                  __sizePressureHessian          0;
/// Array struct turb1__PressureHessian* of size 0..unbounded.
    struct turb1__PressureHessian*       PressureHessian                0;	///< Multiple elements.
};

/// @brief "http://turbulence.pha.jhu.edu/":PressureHessian is a complexType.
///
/// @note struct turb1__PressureHessian operations:
/// - turb1__PressureHessian* soap_new_turb1__PressureHessian(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_turb1__PressureHessian(struct soap*, turb1__PressureHessian*) default initialize members
/// - int soap_read_turb1__PressureHessian(struct soap*, turb1__PressureHessian*) deserialize from a source
/// - int soap_write_turb1__PressureHessian(struct soap*, turb1__PressureHessian*) serialize to a sink
/// - turb1__PressureHessian* soap_dup_turb1__PressureHessian(struct soap*, turb1__PressureHessian* dst, turb1__PressureHessian *src) returns deep copy of turb1__PressureHessian src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_turb1__PressureHessian(turb1__PressureHessian*) deep deletes turb1__PressureHessian data members, use only on dst after soap_dup_turb1__PressureHessian(NULL, turb1__PressureHessian *dst, turb1__PressureHessian *src) (use soapcpp2 -Ed)
struct turb1__PressureHessian
{
/// Element "d2pdxdx" of type xs:float.
    float                                d2pdxdx                        1;	///< Required element.
/// Element "d2pdxdy" of type xs:float.
    float                                d2pdxdy                        1;	///< Required element.
/// Element "d2pdxdz" of type xs:float.
    float                                d2pdxdz                        1;	///< Required element.
/// Element "d2pdydy" of type xs:float.
    float                                d2pdydy                        1;	///< Required element.
/// Element "d2pdydz" of type xs:float.
    float                                d2pdydz                        1;	///< Required element.
/// Element "d2pdzdz" of type xs:float.
    float                                d2pdzdz                        1;	///< Required element.
};

/// @brief "http://turbulence.pha.jhu.edu/":ArrayOfThresholdInfo is a complexType.
///
/// @note struct turb1__ArrayOfThresholdInfo operations:
/// - turb1__ArrayOfThresholdInfo* soap_new_turb1__ArrayOfThresholdInfo(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_turb1__ArrayOfThresholdInfo(struct soap*, turb1__ArrayOfThresholdInfo*) default initialize members
/// - int soap_read_turb1__ArrayOfThresholdInfo(struct soap*, turb1__ArrayOfThresholdInfo*) deserialize from a source
/// - int soap_write_turb1__ArrayOfThresholdInfo(struct soap*, turb1__ArrayOfThresholdInfo*) serialize to a sink
/// - turb1__ArrayOfThresholdInfo* soap_dup_turb1__ArrayOfThresholdInfo(struct soap*, turb1__ArrayOfThresholdInfo* dst, turb1__ArrayOfThresholdInfo *src) returns deep copy of turb1__ArrayOfThresholdInfo src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_turb1__ArrayOfThresholdInfo(turb1__ArrayOfThresholdInfo*) deep deletes turb1__ArrayOfThresholdInfo data members, use only on dst after soap_dup_turb1__ArrayOfThresholdInfo(NULL, turb1__ArrayOfThresholdInfo *dst, turb1__ArrayOfThresholdInfo *src) (use soapcpp2 -Ed)
struct turb1__ArrayOfThresholdInfo
{
/// Size of array of struct turb1__ThresholdInfo* is 0..unbounded.
  $ int                                  __sizeThresholdInfo            0;
/// Array struct turb1__ThresholdInfo* of size 0..unbounded.
    struct turb1__ThresholdInfo*         ThresholdInfo                  0;	///< Multiple elements.
};

/// @brief "http://turbulence.pha.jhu.edu/":ThresholdInfo is a complexType.
///
/// @note struct turb1__ThresholdInfo operations:
/// - turb1__ThresholdInfo* soap_new_turb1__ThresholdInfo(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_turb1__ThresholdInfo(struct soap*, turb1__ThresholdInfo*) default initialize members
/// - int soap_read_turb1__ThresholdInfo(struct soap*, turb1__ThresholdInfo*) deserialize from a source
/// - int soap_write_turb1__ThresholdInfo(struct soap*, turb1__ThresholdInfo*) serialize to a sink
/// - turb1__ThresholdInfo* soap_dup_turb1__ThresholdInfo(struct soap*, turb1__ThresholdInfo* dst, turb1__ThresholdInfo *src) returns deep copy of turb1__ThresholdInfo src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_turb1__ThresholdInfo(turb1__ThresholdInfo*) deep deletes turb1__ThresholdInfo data members, use only on dst after soap_dup_turb1__ThresholdInfo(NULL, turb1__ThresholdInfo *dst, turb1__ThresholdInfo *src) (use soapcpp2 -Ed)
struct turb1__ThresholdInfo
{
/// Element "x" of type xs:int.
    int                                  x                              1;	///< Required element.
/// Element "y" of type xs:int.
    int                                  y                              1;	///< Required element.
/// Element "z" of type xs:int.
    int                                  z                              1;	///< Required element.
/// Element "value" of type xs:float.
    float                                value                          1;	///< Required element.
};

/// @brief "http://turbulence.pha.jhu.edu/":ArrayOfSGSTensor is a complexType.
///
/// @note struct turb1__ArrayOfSGSTensor operations:
/// - turb1__ArrayOfSGSTensor* soap_new_turb1__ArrayOfSGSTensor(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_turb1__ArrayOfSGSTensor(struct soap*, turb1__ArrayOfSGSTensor*) default initialize members
/// - int soap_read_turb1__ArrayOfSGSTensor(struct soap*, turb1__ArrayOfSGSTensor*) deserialize from a source
/// - int soap_write_turb1__ArrayOfSGSTensor(struct soap*, turb1__ArrayOfSGSTensor*) serialize to a sink
/// - turb1__ArrayOfSGSTensor* soap_dup_turb1__ArrayOfSGSTensor(struct soap*, turb1__ArrayOfSGSTensor* dst, turb1__ArrayOfSGSTensor *src) returns deep copy of turb1__ArrayOfSGSTensor src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_turb1__ArrayOfSGSTensor(turb1__ArrayOfSGSTensor*) deep deletes turb1__ArrayOfSGSTensor data members, use only on dst after soap_dup_turb1__ArrayOfSGSTensor(NULL, turb1__ArrayOfSGSTensor *dst, turb1__ArrayOfSGSTensor *src) (use soapcpp2 -Ed)
struct turb1__ArrayOfSGSTensor
{
/// Size of array of struct turb1__SGSTensor* is 0..unbounded.
  $ int                                  __sizeSGSTensor                0;
/// Array struct turb1__SGSTensor* of size 0..unbounded.
    struct turb1__SGSTensor*             SGSTensor                      0;	///< Multiple elements.
};

/// @brief "http://turbulence.pha.jhu.edu/":SGSTensor is a complexType.
///
/// @note struct turb1__SGSTensor operations:
/// - turb1__SGSTensor* soap_new_turb1__SGSTensor(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_turb1__SGSTensor(struct soap*, turb1__SGSTensor*) default initialize members
/// - int soap_read_turb1__SGSTensor(struct soap*, turb1__SGSTensor*) deserialize from a source
/// - int soap_write_turb1__SGSTensor(struct soap*, turb1__SGSTensor*) serialize to a sink
/// - turb1__SGSTensor* soap_dup_turb1__SGSTensor(struct soap*, turb1__SGSTensor* dst, turb1__SGSTensor *src) returns deep copy of turb1__SGSTensor src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_turb1__SGSTensor(turb1__SGSTensor*) deep deletes turb1__SGSTensor data members, use only on dst after soap_dup_turb1__SGSTensor(NULL, turb1__SGSTensor *dst, turb1__SGSTensor *src) (use soapcpp2 -Ed)
struct turb1__SGSTensor
{
/// Element "xx" of type xs:float.
    float                                xx                             1;	///< Required element.
/// Element "yy" of type xs:float.
    float                                yy                             1;	///< Required element.
/// Element "zz" of type xs:float.
    float                                zz                             1;	///< Required element.
/// Element "xy" of type xs:float.
    float                                xy                             1;	///< Required element.
/// Element "xz" of type xs:float.
    float                                xz                             1;	///< Required element.
/// Element "yz" of type xs:float.
    float                                yz                             1;	///< Required element.
};

/// @brief "http://turbulence.pha.jhu.edu/":ArrayOfFloat is a complexType.
///
/// @note struct turb1__ArrayOfFloat operations:
/// - turb1__ArrayOfFloat* soap_new_turb1__ArrayOfFloat(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_turb1__ArrayOfFloat(struct soap*, turb1__ArrayOfFloat*) default initialize members
/// - int soap_read_turb1__ArrayOfFloat(struct soap*, turb1__ArrayOfFloat*) deserialize from a source
/// - int soap_write_turb1__ArrayOfFloat(struct soap*, turb1__ArrayOfFloat*) serialize to a sink
/// - turb1__ArrayOfFloat* soap_dup_turb1__ArrayOfFloat(struct soap*, turb1__ArrayOfFloat* dst, turb1__ArrayOfFloat *src) returns deep copy of turb1__ArrayOfFloat src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_turb1__ArrayOfFloat(turb1__ArrayOfFloat*) deep deletes turb1__ArrayOfFloat data members, use only on dst after soap_dup_turb1__ArrayOfFloat(NULL, turb1__ArrayOfFloat *dst, turb1__ArrayOfFloat *src) (use soapcpp2 -Ed)
struct turb1__ArrayOfFloat
{
/// Size of array of float* is 0..unbounded.
  $ int                                  __sizefloat_                   0;
/// Array float* of size 0..unbounded.
    float*                               float_                         0;	///< Multiple elements.
};

/// @brief "http://turbulence.pha.jhu.edu/":ArrayOfArrayOfFloat is a complexType.
///
/// @note struct turb1__ArrayOfArrayOfFloat operations:
/// - turb1__ArrayOfArrayOfFloat* soap_new_turb1__ArrayOfArrayOfFloat(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_turb1__ArrayOfArrayOfFloat(struct soap*, turb1__ArrayOfArrayOfFloat*) default initialize members
/// - int soap_read_turb1__ArrayOfArrayOfFloat(struct soap*, turb1__ArrayOfArrayOfFloat*) deserialize from a source
/// - int soap_write_turb1__ArrayOfArrayOfFloat(struct soap*, turb1__ArrayOfArrayOfFloat*) serialize to a sink
/// - turb1__ArrayOfArrayOfFloat* soap_dup_turb1__ArrayOfArrayOfFloat(struct soap*, turb1__ArrayOfArrayOfFloat* dst, turb1__ArrayOfArrayOfFloat *src) returns deep copy of turb1__ArrayOfArrayOfFloat src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_turb1__ArrayOfArrayOfFloat(turb1__ArrayOfArrayOfFloat*) deep deletes turb1__ArrayOfArrayOfFloat data members, use only on dst after soap_dup_turb1__ArrayOfArrayOfFloat(NULL, turb1__ArrayOfArrayOfFloat *dst, turb1__ArrayOfArrayOfFloat *src) (use soapcpp2 -Ed)
struct turb1__ArrayOfArrayOfFloat
{
/// Size of array of struct turb1__ArrayOfFloat* is 0..unbounded.
  $ int                                  __sizeArrayOfFloat             0;
/// Array struct turb1__ArrayOfFloat* of size 0..unbounded.
    struct turb1__ArrayOfFloat*          ArrayOfFloat                   0;	///< Multiple elements.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":NullOp
/// @brief "http://turbulence.pha.jhu.edu/":NullOp is a complexType.
///
/// @note struct _turb1__NullOp operations:
/// - _turb1__NullOp* soap_new__turb1__NullOp(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__NullOp(struct soap*, _turb1__NullOp*) default initialize members
/// - int soap_read__turb1__NullOp(struct soap*, _turb1__NullOp*) deserialize from a source
/// - int soap_write__turb1__NullOp(struct soap*, _turb1__NullOp*) serialize to a sink
/// - _turb1__NullOp* soap_dup__turb1__NullOp(struct soap*, _turb1__NullOp* dst, _turb1__NullOp *src) returns deep copy of _turb1__NullOp src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__NullOp(_turb1__NullOp*) deep deletes _turb1__NullOp data members, use only on dst after soap_dup__turb1__NullOp(NULL, _turb1__NullOp *dst, _turb1__NullOp *src) (use soapcpp2 -Ed)
struct _turb1__NullOp
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":NullOpResponse
/// @brief "http://turbulence.pha.jhu.edu/":NullOpResponse is a complexType.
///
/// @note struct _turb1__NullOpResponse operations:
/// - _turb1__NullOpResponse* soap_new__turb1__NullOpResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__NullOpResponse(struct soap*, _turb1__NullOpResponse*) default initialize members
/// - int soap_read__turb1__NullOpResponse(struct soap*, _turb1__NullOpResponse*) deserialize from a source
/// - int soap_write__turb1__NullOpResponse(struct soap*, _turb1__NullOpResponse*) serialize to a sink
/// - _turb1__NullOpResponse* soap_dup__turb1__NullOpResponse(struct soap*, _turb1__NullOpResponse* dst, _turb1__NullOpResponse *src) returns deep copy of _turb1__NullOpResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__NullOpResponse(_turb1__NullOpResponse*) deep deletes _turb1__NullOpResponse data members, use only on dst after soap_dup__turb1__NullOpResponse(NULL, _turb1__NullOpResponse *dst, _turb1__NullOpResponse *src) (use soapcpp2 -Ed)
struct _turb1__NullOpResponse
{
/// Element "NullOpResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVector3.
    struct turb1__ArrayOfVector3*        NullOpResult                   0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVelocity
/// @brief "http://turbulence.pha.jhu.edu/":GetVelocity is a complexType.
///
/// @note struct _turb1__GetVelocity operations:
/// - _turb1__GetVelocity* soap_new__turb1__GetVelocity(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVelocity(struct soap*, _turb1__GetVelocity*) default initialize members
/// - int soap_read__turb1__GetVelocity(struct soap*, _turb1__GetVelocity*) deserialize from a source
/// - int soap_write__turb1__GetVelocity(struct soap*, _turb1__GetVelocity*) serialize to a sink
/// - _turb1__GetVelocity* soap_dup__turb1__GetVelocity(struct soap*, _turb1__GetVelocity* dst, _turb1__GetVelocity *src) returns deep copy of _turb1__GetVelocity src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVelocity(_turb1__GetVelocity*) deep deletes _turb1__GetVelocity data members, use only on dst after soap_dup__turb1__GetVelocity(NULL, _turb1__GetVelocity *dst, _turb1__GetVelocity *src) (use soapcpp2 -Ed)
struct _turb1__GetVelocity
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVelocityResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetVelocityResponse is a complexType.
///
/// @note struct _turb1__GetVelocityResponse operations:
/// - _turb1__GetVelocityResponse* soap_new__turb1__GetVelocityResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVelocityResponse(struct soap*, _turb1__GetVelocityResponse*) default initialize members
/// - int soap_read__turb1__GetVelocityResponse(struct soap*, _turb1__GetVelocityResponse*) deserialize from a source
/// - int soap_write__turb1__GetVelocityResponse(struct soap*, _turb1__GetVelocityResponse*) serialize to a sink
/// - _turb1__GetVelocityResponse* soap_dup__turb1__GetVelocityResponse(struct soap*, _turb1__GetVelocityResponse* dst, _turb1__GetVelocityResponse *src) returns deep copy of _turb1__GetVelocityResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVelocityResponse(_turb1__GetVelocityResponse*) deep deletes _turb1__GetVelocityResponse data members, use only on dst after soap_dup__turb1__GetVelocityResponse(NULL, _turb1__GetVelocityResponse *dst, _turb1__GetVelocityResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetVelocityResponse
{
/// Element "GetVelocityResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVector3.
    struct turb1__ArrayOfVector3*        GetVelocityResult              0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetMagneticField
/// @brief "http://turbulence.pha.jhu.edu/":GetMagneticField is a complexType.
///
/// @note struct _turb1__GetMagneticField operations:
/// - _turb1__GetMagneticField* soap_new__turb1__GetMagneticField(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetMagneticField(struct soap*, _turb1__GetMagneticField*) default initialize members
/// - int soap_read__turb1__GetMagneticField(struct soap*, _turb1__GetMagneticField*) deserialize from a source
/// - int soap_write__turb1__GetMagneticField(struct soap*, _turb1__GetMagneticField*) serialize to a sink
/// - _turb1__GetMagneticField* soap_dup__turb1__GetMagneticField(struct soap*, _turb1__GetMagneticField* dst, _turb1__GetMagneticField *src) returns deep copy of _turb1__GetMagneticField src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetMagneticField(_turb1__GetMagneticField*) deep deletes _turb1__GetMagneticField data members, use only on dst after soap_dup__turb1__GetMagneticField(NULL, _turb1__GetMagneticField *dst, _turb1__GetMagneticField *src) (use soapcpp2 -Ed)
struct _turb1__GetMagneticField
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetMagneticFieldResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetMagneticFieldResponse is a complexType.
///
/// @note struct _turb1__GetMagneticFieldResponse operations:
/// - _turb1__GetMagneticFieldResponse* soap_new__turb1__GetMagneticFieldResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetMagneticFieldResponse(struct soap*, _turb1__GetMagneticFieldResponse*) default initialize members
/// - int soap_read__turb1__GetMagneticFieldResponse(struct soap*, _turb1__GetMagneticFieldResponse*) deserialize from a source
/// - int soap_write__turb1__GetMagneticFieldResponse(struct soap*, _turb1__GetMagneticFieldResponse*) serialize to a sink
/// - _turb1__GetMagneticFieldResponse* soap_dup__turb1__GetMagneticFieldResponse(struct soap*, _turb1__GetMagneticFieldResponse* dst, _turb1__GetMagneticFieldResponse *src) returns deep copy of _turb1__GetMagneticFieldResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetMagneticFieldResponse(_turb1__GetMagneticFieldResponse*) deep deletes _turb1__GetMagneticFieldResponse data members, use only on dst after soap_dup__turb1__GetMagneticFieldResponse(NULL, _turb1__GetMagneticFieldResponse *dst, _turb1__GetMagneticFieldResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetMagneticFieldResponse
{
/// Element "GetMagneticFieldResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVector3.
    struct turb1__ArrayOfVector3*        GetMagneticFieldResult         0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVectorPotential
/// @brief "http://turbulence.pha.jhu.edu/":GetVectorPotential is a complexType.
///
/// @note struct _turb1__GetVectorPotential operations:
/// - _turb1__GetVectorPotential* soap_new__turb1__GetVectorPotential(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVectorPotential(struct soap*, _turb1__GetVectorPotential*) default initialize members
/// - int soap_read__turb1__GetVectorPotential(struct soap*, _turb1__GetVectorPotential*) deserialize from a source
/// - int soap_write__turb1__GetVectorPotential(struct soap*, _turb1__GetVectorPotential*) serialize to a sink
/// - _turb1__GetVectorPotential* soap_dup__turb1__GetVectorPotential(struct soap*, _turb1__GetVectorPotential* dst, _turb1__GetVectorPotential *src) returns deep copy of _turb1__GetVectorPotential src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVectorPotential(_turb1__GetVectorPotential*) deep deletes _turb1__GetVectorPotential data members, use only on dst after soap_dup__turb1__GetVectorPotential(NULL, _turb1__GetVectorPotential *dst, _turb1__GetVectorPotential *src) (use soapcpp2 -Ed)
struct _turb1__GetVectorPotential
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVectorPotentialResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetVectorPotentialResponse is a complexType.
///
/// @note struct _turb1__GetVectorPotentialResponse operations:
/// - _turb1__GetVectorPotentialResponse* soap_new__turb1__GetVectorPotentialResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVectorPotentialResponse(struct soap*, _turb1__GetVectorPotentialResponse*) default initialize members
/// - int soap_read__turb1__GetVectorPotentialResponse(struct soap*, _turb1__GetVectorPotentialResponse*) deserialize from a source
/// - int soap_write__turb1__GetVectorPotentialResponse(struct soap*, _turb1__GetVectorPotentialResponse*) serialize to a sink
/// - _turb1__GetVectorPotentialResponse* soap_dup__turb1__GetVectorPotentialResponse(struct soap*, _turb1__GetVectorPotentialResponse* dst, _turb1__GetVectorPotentialResponse *src) returns deep copy of _turb1__GetVectorPotentialResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVectorPotentialResponse(_turb1__GetVectorPotentialResponse*) deep deletes _turb1__GetVectorPotentialResponse data members, use only on dst after soap_dup__turb1__GetVectorPotentialResponse(NULL, _turb1__GetVectorPotentialResponse *dst, _turb1__GetVectorPotentialResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetVectorPotentialResponse
{
/// Element "GetVectorPotentialResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVector3.
    struct turb1__ArrayOfVector3*        GetVectorPotentialResult       0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetPressure
/// @brief "http://turbulence.pha.jhu.edu/":GetPressure is a complexType.
///
/// @note struct _turb1__GetPressure operations:
/// - _turb1__GetPressure* soap_new__turb1__GetPressure(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetPressure(struct soap*, _turb1__GetPressure*) default initialize members
/// - int soap_read__turb1__GetPressure(struct soap*, _turb1__GetPressure*) deserialize from a source
/// - int soap_write__turb1__GetPressure(struct soap*, _turb1__GetPressure*) serialize to a sink
/// - _turb1__GetPressure* soap_dup__turb1__GetPressure(struct soap*, _turb1__GetPressure* dst, _turb1__GetPressure *src) returns deep copy of _turb1__GetPressure src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetPressure(_turb1__GetPressure*) deep deletes _turb1__GetPressure data members, use only on dst after soap_dup__turb1__GetPressure(NULL, _turb1__GetPressure *dst, _turb1__GetPressure *src) (use soapcpp2 -Ed)
struct _turb1__GetPressure
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetPressureResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetPressureResponse is a complexType.
///
/// @note struct _turb1__GetPressureResponse operations:
/// - _turb1__GetPressureResponse* soap_new__turb1__GetPressureResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetPressureResponse(struct soap*, _turb1__GetPressureResponse*) default initialize members
/// - int soap_read__turb1__GetPressureResponse(struct soap*, _turb1__GetPressureResponse*) deserialize from a source
/// - int soap_write__turb1__GetPressureResponse(struct soap*, _turb1__GetPressureResponse*) serialize to a sink
/// - _turb1__GetPressureResponse* soap_dup__turb1__GetPressureResponse(struct soap*, _turb1__GetPressureResponse* dst, _turb1__GetPressureResponse *src) returns deep copy of _turb1__GetPressureResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetPressureResponse(_turb1__GetPressureResponse*) deep deletes _turb1__GetPressureResponse data members, use only on dst after soap_dup__turb1__GetPressureResponse(NULL, _turb1__GetPressureResponse *dst, _turb1__GetPressureResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetPressureResponse
{
/// Element "GetPressureResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfPressure.
    struct turb1__ArrayOfPressure*       GetPressureResult              0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetDensity
/// @brief "http://turbulence.pha.jhu.edu/":GetDensity is a complexType.
///
/// @note struct _turb1__GetDensity operations:
/// - _turb1__GetDensity* soap_new__turb1__GetDensity(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetDensity(struct soap*, _turb1__GetDensity*) default initialize members
/// - int soap_read__turb1__GetDensity(struct soap*, _turb1__GetDensity*) deserialize from a source
/// - int soap_write__turb1__GetDensity(struct soap*, _turb1__GetDensity*) serialize to a sink
/// - _turb1__GetDensity* soap_dup__turb1__GetDensity(struct soap*, _turb1__GetDensity* dst, _turb1__GetDensity *src) returns deep copy of _turb1__GetDensity src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetDensity(_turb1__GetDensity*) deep deletes _turb1__GetDensity data members, use only on dst after soap_dup__turb1__GetDensity(NULL, _turb1__GetDensity *dst, _turb1__GetDensity *src) (use soapcpp2 -Ed)
struct _turb1__GetDensity
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetDensityResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetDensityResponse is a complexType.
///
/// @note struct _turb1__GetDensityResponse operations:
/// - _turb1__GetDensityResponse* soap_new__turb1__GetDensityResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetDensityResponse(struct soap*, _turb1__GetDensityResponse*) default initialize members
/// - int soap_read__turb1__GetDensityResponse(struct soap*, _turb1__GetDensityResponse*) deserialize from a source
/// - int soap_write__turb1__GetDensityResponse(struct soap*, _turb1__GetDensityResponse*) serialize to a sink
/// - _turb1__GetDensityResponse* soap_dup__turb1__GetDensityResponse(struct soap*, _turb1__GetDensityResponse* dst, _turb1__GetDensityResponse *src) returns deep copy of _turb1__GetDensityResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetDensityResponse(_turb1__GetDensityResponse*) deep deletes _turb1__GetDensityResponse data members, use only on dst after soap_dup__turb1__GetDensityResponse(NULL, _turb1__GetDensityResponse *dst, _turb1__GetDensityResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetDensityResponse
{
/// Element "GetDensityResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfPressure.
    struct turb1__ArrayOfPressure*       GetDensityResult               0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetTemperature
/// @brief "http://turbulence.pha.jhu.edu/":GetTemperature is a complexType.
///
/// @note struct _turb1__GetTemperature operations:
/// - _turb1__GetTemperature* soap_new__turb1__GetTemperature(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetTemperature(struct soap*, _turb1__GetTemperature*) default initialize members
/// - int soap_read__turb1__GetTemperature(struct soap*, _turb1__GetTemperature*) deserialize from a source
/// - int soap_write__turb1__GetTemperature(struct soap*, _turb1__GetTemperature*) serialize to a sink
/// - _turb1__GetTemperature* soap_dup__turb1__GetTemperature(struct soap*, _turb1__GetTemperature* dst, _turb1__GetTemperature *src) returns deep copy of _turb1__GetTemperature src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetTemperature(_turb1__GetTemperature*) deep deletes _turb1__GetTemperature data members, use only on dst after soap_dup__turb1__GetTemperature(NULL, _turb1__GetTemperature *dst, _turb1__GetTemperature *src) (use soapcpp2 -Ed)
struct _turb1__GetTemperature
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetTemperatureResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetTemperatureResponse is a complexType.
///
/// @note struct _turb1__GetTemperatureResponse operations:
/// - _turb1__GetTemperatureResponse* soap_new__turb1__GetTemperatureResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetTemperatureResponse(struct soap*, _turb1__GetTemperatureResponse*) default initialize members
/// - int soap_read__turb1__GetTemperatureResponse(struct soap*, _turb1__GetTemperatureResponse*) deserialize from a source
/// - int soap_write__turb1__GetTemperatureResponse(struct soap*, _turb1__GetTemperatureResponse*) serialize to a sink
/// - _turb1__GetTemperatureResponse* soap_dup__turb1__GetTemperatureResponse(struct soap*, _turb1__GetTemperatureResponse* dst, _turb1__GetTemperatureResponse *src) returns deep copy of _turb1__GetTemperatureResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetTemperatureResponse(_turb1__GetTemperatureResponse*) deep deletes _turb1__GetTemperatureResponse data members, use only on dst after soap_dup__turb1__GetTemperatureResponse(NULL, _turb1__GetTemperatureResponse *dst, _turb1__GetTemperatureResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetTemperatureResponse
{
/// Element "GetTemperatureResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfPressure.
    struct turb1__ArrayOfPressure*       GetTemperatureResult           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVelocityAndPressure
/// @brief "http://turbulence.pha.jhu.edu/":GetVelocityAndPressure is a complexType.
///
/// @note struct _turb1__GetVelocityAndPressure operations:
/// - _turb1__GetVelocityAndPressure* soap_new__turb1__GetVelocityAndPressure(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVelocityAndPressure(struct soap*, _turb1__GetVelocityAndPressure*) default initialize members
/// - int soap_read__turb1__GetVelocityAndPressure(struct soap*, _turb1__GetVelocityAndPressure*) deserialize from a source
/// - int soap_write__turb1__GetVelocityAndPressure(struct soap*, _turb1__GetVelocityAndPressure*) serialize to a sink
/// - _turb1__GetVelocityAndPressure* soap_dup__turb1__GetVelocityAndPressure(struct soap*, _turb1__GetVelocityAndPressure* dst, _turb1__GetVelocityAndPressure *src) returns deep copy of _turb1__GetVelocityAndPressure src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVelocityAndPressure(_turb1__GetVelocityAndPressure*) deep deletes _turb1__GetVelocityAndPressure data members, use only on dst after soap_dup__turb1__GetVelocityAndPressure(NULL, _turb1__GetVelocityAndPressure *dst, _turb1__GetVelocityAndPressure *src) (use soapcpp2 -Ed)
struct _turb1__GetVelocityAndPressure
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVelocityAndPressureResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetVelocityAndPressureResponse is a complexType.
///
/// @note struct _turb1__GetVelocityAndPressureResponse operations:
/// - _turb1__GetVelocityAndPressureResponse* soap_new__turb1__GetVelocityAndPressureResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVelocityAndPressureResponse(struct soap*, _turb1__GetVelocityAndPressureResponse*) default initialize members
/// - int soap_read__turb1__GetVelocityAndPressureResponse(struct soap*, _turb1__GetVelocityAndPressureResponse*) deserialize from a source
/// - int soap_write__turb1__GetVelocityAndPressureResponse(struct soap*, _turb1__GetVelocityAndPressureResponse*) serialize to a sink
/// - _turb1__GetVelocityAndPressureResponse* soap_dup__turb1__GetVelocityAndPressureResponse(struct soap*, _turb1__GetVelocityAndPressureResponse* dst, _turb1__GetVelocityAndPressureResponse *src) returns deep copy of _turb1__GetVelocityAndPressureResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVelocityAndPressureResponse(_turb1__GetVelocityAndPressureResponse*) deep deletes _turb1__GetVelocityAndPressureResponse data members, use only on dst after soap_dup__turb1__GetVelocityAndPressureResponse(NULL, _turb1__GetVelocityAndPressureResponse *dst, _turb1__GetVelocityAndPressureResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetVelocityAndPressureResponse
{
/// Element "GetVelocityAndPressureResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVector3P.
    struct turb1__ArrayOfVector3P*       GetVelocityAndPressureResult   0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVelocityAndTemperature
/// @brief "http://turbulence.pha.jhu.edu/":GetVelocityAndTemperature is a complexType.
///
/// @note struct _turb1__GetVelocityAndTemperature operations:
/// - _turb1__GetVelocityAndTemperature* soap_new__turb1__GetVelocityAndTemperature(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVelocityAndTemperature(struct soap*, _turb1__GetVelocityAndTemperature*) default initialize members
/// - int soap_read__turb1__GetVelocityAndTemperature(struct soap*, _turb1__GetVelocityAndTemperature*) deserialize from a source
/// - int soap_write__turb1__GetVelocityAndTemperature(struct soap*, _turb1__GetVelocityAndTemperature*) serialize to a sink
/// - _turb1__GetVelocityAndTemperature* soap_dup__turb1__GetVelocityAndTemperature(struct soap*, _turb1__GetVelocityAndTemperature* dst, _turb1__GetVelocityAndTemperature *src) returns deep copy of _turb1__GetVelocityAndTemperature src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVelocityAndTemperature(_turb1__GetVelocityAndTemperature*) deep deletes _turb1__GetVelocityAndTemperature data members, use only on dst after soap_dup__turb1__GetVelocityAndTemperature(NULL, _turb1__GetVelocityAndTemperature *dst, _turb1__GetVelocityAndTemperature *src) (use soapcpp2 -Ed)
struct _turb1__GetVelocityAndTemperature
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVelocityAndTemperatureResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetVelocityAndTemperatureResponse is a complexType.
///
/// @note struct _turb1__GetVelocityAndTemperatureResponse operations:
/// - _turb1__GetVelocityAndTemperatureResponse* soap_new__turb1__GetVelocityAndTemperatureResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVelocityAndTemperatureResponse(struct soap*, _turb1__GetVelocityAndTemperatureResponse*) default initialize members
/// - int soap_read__turb1__GetVelocityAndTemperatureResponse(struct soap*, _turb1__GetVelocityAndTemperatureResponse*) deserialize from a source
/// - int soap_write__turb1__GetVelocityAndTemperatureResponse(struct soap*, _turb1__GetVelocityAndTemperatureResponse*) serialize to a sink
/// - _turb1__GetVelocityAndTemperatureResponse* soap_dup__turb1__GetVelocityAndTemperatureResponse(struct soap*, _turb1__GetVelocityAndTemperatureResponse* dst, _turb1__GetVelocityAndTemperatureResponse *src) returns deep copy of _turb1__GetVelocityAndTemperatureResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVelocityAndTemperatureResponse(_turb1__GetVelocityAndTemperatureResponse*) deep deletes _turb1__GetVelocityAndTemperatureResponse data members, use only on dst after soap_dup__turb1__GetVelocityAndTemperatureResponse(NULL, _turb1__GetVelocityAndTemperatureResponse *dst, _turb1__GetVelocityAndTemperatureResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetVelocityAndTemperatureResponse
{
/// Element "GetVelocityAndTemperatureResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVector3P.
    struct turb1__ArrayOfVector3P*       GetVelocityAndTemperatureResult 0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVelocityGradient
/// @brief "http://turbulence.pha.jhu.edu/":GetVelocityGradient is a complexType.
///
/// @note struct _turb1__GetVelocityGradient operations:
/// - _turb1__GetVelocityGradient* soap_new__turb1__GetVelocityGradient(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVelocityGradient(struct soap*, _turb1__GetVelocityGradient*) default initialize members
/// - int soap_read__turb1__GetVelocityGradient(struct soap*, _turb1__GetVelocityGradient*) deserialize from a source
/// - int soap_write__turb1__GetVelocityGradient(struct soap*, _turb1__GetVelocityGradient*) serialize to a sink
/// - _turb1__GetVelocityGradient* soap_dup__turb1__GetVelocityGradient(struct soap*, _turb1__GetVelocityGradient* dst, _turb1__GetVelocityGradient *src) returns deep copy of _turb1__GetVelocityGradient src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVelocityGradient(_turb1__GetVelocityGradient*) deep deletes _turb1__GetVelocityGradient data members, use only on dst after soap_dup__turb1__GetVelocityGradient(NULL, _turb1__GetVelocityGradient *dst, _turb1__GetVelocityGradient *src) (use soapcpp2 -Ed)
struct _turb1__GetVelocityGradient
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVelocityGradientResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetVelocityGradientResponse is a complexType.
///
/// @note struct _turb1__GetVelocityGradientResponse operations:
/// - _turb1__GetVelocityGradientResponse* soap_new__turb1__GetVelocityGradientResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVelocityGradientResponse(struct soap*, _turb1__GetVelocityGradientResponse*) default initialize members
/// - int soap_read__turb1__GetVelocityGradientResponse(struct soap*, _turb1__GetVelocityGradientResponse*) deserialize from a source
/// - int soap_write__turb1__GetVelocityGradientResponse(struct soap*, _turb1__GetVelocityGradientResponse*) serialize to a sink
/// - _turb1__GetVelocityGradientResponse* soap_dup__turb1__GetVelocityGradientResponse(struct soap*, _turb1__GetVelocityGradientResponse* dst, _turb1__GetVelocityGradientResponse *src) returns deep copy of _turb1__GetVelocityGradientResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVelocityGradientResponse(_turb1__GetVelocityGradientResponse*) deep deletes _turb1__GetVelocityGradientResponse data members, use only on dst after soap_dup__turb1__GetVelocityGradientResponse(NULL, _turb1__GetVelocityGradientResponse *dst, _turb1__GetVelocityGradientResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetVelocityGradientResponse
{
/// Element "GetVelocityGradientResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVelocityGradient.
    struct turb1__ArrayOfVelocityGradient*  GetVelocityGradientResult      0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetMagneticFieldGradient
/// @brief "http://turbulence.pha.jhu.edu/":GetMagneticFieldGradient is a complexType.
///
/// @note struct _turb1__GetMagneticFieldGradient operations:
/// - _turb1__GetMagneticFieldGradient* soap_new__turb1__GetMagneticFieldGradient(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetMagneticFieldGradient(struct soap*, _turb1__GetMagneticFieldGradient*) default initialize members
/// - int soap_read__turb1__GetMagneticFieldGradient(struct soap*, _turb1__GetMagneticFieldGradient*) deserialize from a source
/// - int soap_write__turb1__GetMagneticFieldGradient(struct soap*, _turb1__GetMagneticFieldGradient*) serialize to a sink
/// - _turb1__GetMagneticFieldGradient* soap_dup__turb1__GetMagneticFieldGradient(struct soap*, _turb1__GetMagneticFieldGradient* dst, _turb1__GetMagneticFieldGradient *src) returns deep copy of _turb1__GetMagneticFieldGradient src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetMagneticFieldGradient(_turb1__GetMagneticFieldGradient*) deep deletes _turb1__GetMagneticFieldGradient data members, use only on dst after soap_dup__turb1__GetMagneticFieldGradient(NULL, _turb1__GetMagneticFieldGradient *dst, _turb1__GetMagneticFieldGradient *src) (use soapcpp2 -Ed)
struct _turb1__GetMagneticFieldGradient
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetMagneticFieldGradientResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetMagneticFieldGradientResponse is a complexType.
///
/// @note struct _turb1__GetMagneticFieldGradientResponse operations:
/// - _turb1__GetMagneticFieldGradientResponse* soap_new__turb1__GetMagneticFieldGradientResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetMagneticFieldGradientResponse(struct soap*, _turb1__GetMagneticFieldGradientResponse*) default initialize members
/// - int soap_read__turb1__GetMagneticFieldGradientResponse(struct soap*, _turb1__GetMagneticFieldGradientResponse*) deserialize from a source
/// - int soap_write__turb1__GetMagneticFieldGradientResponse(struct soap*, _turb1__GetMagneticFieldGradientResponse*) serialize to a sink
/// - _turb1__GetMagneticFieldGradientResponse* soap_dup__turb1__GetMagneticFieldGradientResponse(struct soap*, _turb1__GetMagneticFieldGradientResponse* dst, _turb1__GetMagneticFieldGradientResponse *src) returns deep copy of _turb1__GetMagneticFieldGradientResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetMagneticFieldGradientResponse(_turb1__GetMagneticFieldGradientResponse*) deep deletes _turb1__GetMagneticFieldGradientResponse data members, use only on dst after soap_dup__turb1__GetMagneticFieldGradientResponse(NULL, _turb1__GetMagneticFieldGradientResponse *dst, _turb1__GetMagneticFieldGradientResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetMagneticFieldGradientResponse
{
/// Element "GetMagneticFieldGradientResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVelocityGradient.
    struct turb1__ArrayOfVelocityGradient*  GetMagneticFieldGradientResult 0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVectorPotentialGradient
/// @brief "http://turbulence.pha.jhu.edu/":GetVectorPotentialGradient is a complexType.
///
/// @note struct _turb1__GetVectorPotentialGradient operations:
/// - _turb1__GetVectorPotentialGradient* soap_new__turb1__GetVectorPotentialGradient(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVectorPotentialGradient(struct soap*, _turb1__GetVectorPotentialGradient*) default initialize members
/// - int soap_read__turb1__GetVectorPotentialGradient(struct soap*, _turb1__GetVectorPotentialGradient*) deserialize from a source
/// - int soap_write__turb1__GetVectorPotentialGradient(struct soap*, _turb1__GetVectorPotentialGradient*) serialize to a sink
/// - _turb1__GetVectorPotentialGradient* soap_dup__turb1__GetVectorPotentialGradient(struct soap*, _turb1__GetVectorPotentialGradient* dst, _turb1__GetVectorPotentialGradient *src) returns deep copy of _turb1__GetVectorPotentialGradient src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVectorPotentialGradient(_turb1__GetVectorPotentialGradient*) deep deletes _turb1__GetVectorPotentialGradient data members, use only on dst after soap_dup__turb1__GetVectorPotentialGradient(NULL, _turb1__GetVectorPotentialGradient *dst, _turb1__GetVectorPotentialGradient *src) (use soapcpp2 -Ed)
struct _turb1__GetVectorPotentialGradient
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVectorPotentialGradientResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetVectorPotentialGradientResponse is a complexType.
///
/// @note struct _turb1__GetVectorPotentialGradientResponse operations:
/// - _turb1__GetVectorPotentialGradientResponse* soap_new__turb1__GetVectorPotentialGradientResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVectorPotentialGradientResponse(struct soap*, _turb1__GetVectorPotentialGradientResponse*) default initialize members
/// - int soap_read__turb1__GetVectorPotentialGradientResponse(struct soap*, _turb1__GetVectorPotentialGradientResponse*) deserialize from a source
/// - int soap_write__turb1__GetVectorPotentialGradientResponse(struct soap*, _turb1__GetVectorPotentialGradientResponse*) serialize to a sink
/// - _turb1__GetVectorPotentialGradientResponse* soap_dup__turb1__GetVectorPotentialGradientResponse(struct soap*, _turb1__GetVectorPotentialGradientResponse* dst, _turb1__GetVectorPotentialGradientResponse *src) returns deep copy of _turb1__GetVectorPotentialGradientResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVectorPotentialGradientResponse(_turb1__GetVectorPotentialGradientResponse*) deep deletes _turb1__GetVectorPotentialGradientResponse data members, use only on dst after soap_dup__turb1__GetVectorPotentialGradientResponse(NULL, _turb1__GetVectorPotentialGradientResponse *dst, _turb1__GetVectorPotentialGradientResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetVectorPotentialGradientResponse
{
/// Element "GetVectorPotentialGradientResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVelocityGradient.
    struct turb1__ArrayOfVelocityGradient*  GetVectorPotentialGradientResult 0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetPressureGradient
/// @brief "http://turbulence.pha.jhu.edu/":GetPressureGradient is a complexType.
///
/// @note struct _turb1__GetPressureGradient operations:
/// - _turb1__GetPressureGradient* soap_new__turb1__GetPressureGradient(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetPressureGradient(struct soap*, _turb1__GetPressureGradient*) default initialize members
/// - int soap_read__turb1__GetPressureGradient(struct soap*, _turb1__GetPressureGradient*) deserialize from a source
/// - int soap_write__turb1__GetPressureGradient(struct soap*, _turb1__GetPressureGradient*) serialize to a sink
/// - _turb1__GetPressureGradient* soap_dup__turb1__GetPressureGradient(struct soap*, _turb1__GetPressureGradient* dst, _turb1__GetPressureGradient *src) returns deep copy of _turb1__GetPressureGradient src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetPressureGradient(_turb1__GetPressureGradient*) deep deletes _turb1__GetPressureGradient data members, use only on dst after soap_dup__turb1__GetPressureGradient(NULL, _turb1__GetPressureGradient *dst, _turb1__GetPressureGradient *src) (use soapcpp2 -Ed)
struct _turb1__GetPressureGradient
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetPressureGradientResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetPressureGradientResponse is a complexType.
///
/// @note struct _turb1__GetPressureGradientResponse operations:
/// - _turb1__GetPressureGradientResponse* soap_new__turb1__GetPressureGradientResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetPressureGradientResponse(struct soap*, _turb1__GetPressureGradientResponse*) default initialize members
/// - int soap_read__turb1__GetPressureGradientResponse(struct soap*, _turb1__GetPressureGradientResponse*) deserialize from a source
/// - int soap_write__turb1__GetPressureGradientResponse(struct soap*, _turb1__GetPressureGradientResponse*) serialize to a sink
/// - _turb1__GetPressureGradientResponse* soap_dup__turb1__GetPressureGradientResponse(struct soap*, _turb1__GetPressureGradientResponse* dst, _turb1__GetPressureGradientResponse *src) returns deep copy of _turb1__GetPressureGradientResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetPressureGradientResponse(_turb1__GetPressureGradientResponse*) deep deletes _turb1__GetPressureGradientResponse data members, use only on dst after soap_dup__turb1__GetPressureGradientResponse(NULL, _turb1__GetPressureGradientResponse *dst, _turb1__GetPressureGradientResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetPressureGradientResponse
{
/// Element "GetPressureGradientResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVector3.
    struct turb1__ArrayOfVector3*        GetPressureGradientResult      0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetDensityGradient
/// @brief "http://turbulence.pha.jhu.edu/":GetDensityGradient is a complexType.
///
/// @note struct _turb1__GetDensityGradient operations:
/// - _turb1__GetDensityGradient* soap_new__turb1__GetDensityGradient(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetDensityGradient(struct soap*, _turb1__GetDensityGradient*) default initialize members
/// - int soap_read__turb1__GetDensityGradient(struct soap*, _turb1__GetDensityGradient*) deserialize from a source
/// - int soap_write__turb1__GetDensityGradient(struct soap*, _turb1__GetDensityGradient*) serialize to a sink
/// - _turb1__GetDensityGradient* soap_dup__turb1__GetDensityGradient(struct soap*, _turb1__GetDensityGradient* dst, _turb1__GetDensityGradient *src) returns deep copy of _turb1__GetDensityGradient src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetDensityGradient(_turb1__GetDensityGradient*) deep deletes _turb1__GetDensityGradient data members, use only on dst after soap_dup__turb1__GetDensityGradient(NULL, _turb1__GetDensityGradient *dst, _turb1__GetDensityGradient *src) (use soapcpp2 -Ed)
struct _turb1__GetDensityGradient
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetDensityGradientResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetDensityGradientResponse is a complexType.
///
/// @note struct _turb1__GetDensityGradientResponse operations:
/// - _turb1__GetDensityGradientResponse* soap_new__turb1__GetDensityGradientResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetDensityGradientResponse(struct soap*, _turb1__GetDensityGradientResponse*) default initialize members
/// - int soap_read__turb1__GetDensityGradientResponse(struct soap*, _turb1__GetDensityGradientResponse*) deserialize from a source
/// - int soap_write__turb1__GetDensityGradientResponse(struct soap*, _turb1__GetDensityGradientResponse*) serialize to a sink
/// - _turb1__GetDensityGradientResponse* soap_dup__turb1__GetDensityGradientResponse(struct soap*, _turb1__GetDensityGradientResponse* dst, _turb1__GetDensityGradientResponse *src) returns deep copy of _turb1__GetDensityGradientResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetDensityGradientResponse(_turb1__GetDensityGradientResponse*) deep deletes _turb1__GetDensityGradientResponse data members, use only on dst after soap_dup__turb1__GetDensityGradientResponse(NULL, _turb1__GetDensityGradientResponse *dst, _turb1__GetDensityGradientResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetDensityGradientResponse
{
/// Element "GetDensityGradientResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVector3.
    struct turb1__ArrayOfVector3*        GetDensityGradientResult       0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetTemperatureGradient
/// @brief "http://turbulence.pha.jhu.edu/":GetTemperatureGradient is a complexType.
///
/// @note struct _turb1__GetTemperatureGradient operations:
/// - _turb1__GetTemperatureGradient* soap_new__turb1__GetTemperatureGradient(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetTemperatureGradient(struct soap*, _turb1__GetTemperatureGradient*) default initialize members
/// - int soap_read__turb1__GetTemperatureGradient(struct soap*, _turb1__GetTemperatureGradient*) deserialize from a source
/// - int soap_write__turb1__GetTemperatureGradient(struct soap*, _turb1__GetTemperatureGradient*) serialize to a sink
/// - _turb1__GetTemperatureGradient* soap_dup__turb1__GetTemperatureGradient(struct soap*, _turb1__GetTemperatureGradient* dst, _turb1__GetTemperatureGradient *src) returns deep copy of _turb1__GetTemperatureGradient src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetTemperatureGradient(_turb1__GetTemperatureGradient*) deep deletes _turb1__GetTemperatureGradient data members, use only on dst after soap_dup__turb1__GetTemperatureGradient(NULL, _turb1__GetTemperatureGradient *dst, _turb1__GetTemperatureGradient *src) (use soapcpp2 -Ed)
struct _turb1__GetTemperatureGradient
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetTemperatureGradientResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetTemperatureGradientResponse is a complexType.
///
/// @note struct _turb1__GetTemperatureGradientResponse operations:
/// - _turb1__GetTemperatureGradientResponse* soap_new__turb1__GetTemperatureGradientResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetTemperatureGradientResponse(struct soap*, _turb1__GetTemperatureGradientResponse*) default initialize members
/// - int soap_read__turb1__GetTemperatureGradientResponse(struct soap*, _turb1__GetTemperatureGradientResponse*) deserialize from a source
/// - int soap_write__turb1__GetTemperatureGradientResponse(struct soap*, _turb1__GetTemperatureGradientResponse*) serialize to a sink
/// - _turb1__GetTemperatureGradientResponse* soap_dup__turb1__GetTemperatureGradientResponse(struct soap*, _turb1__GetTemperatureGradientResponse* dst, _turb1__GetTemperatureGradientResponse *src) returns deep copy of _turb1__GetTemperatureGradientResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetTemperatureGradientResponse(_turb1__GetTemperatureGradientResponse*) deep deletes _turb1__GetTemperatureGradientResponse data members, use only on dst after soap_dup__turb1__GetTemperatureGradientResponse(NULL, _turb1__GetTemperatureGradientResponse *dst, _turb1__GetTemperatureGradientResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetTemperatureGradientResponse
{
/// Element "GetTemperatureGradientResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVector3.
    struct turb1__ArrayOfVector3*        GetTemperatureGradientResult   0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVelocityHessian
/// @brief "http://turbulence.pha.jhu.edu/":GetVelocityHessian is a complexType.
///
/// @note struct _turb1__GetVelocityHessian operations:
/// - _turb1__GetVelocityHessian* soap_new__turb1__GetVelocityHessian(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVelocityHessian(struct soap*, _turb1__GetVelocityHessian*) default initialize members
/// - int soap_read__turb1__GetVelocityHessian(struct soap*, _turb1__GetVelocityHessian*) deserialize from a source
/// - int soap_write__turb1__GetVelocityHessian(struct soap*, _turb1__GetVelocityHessian*) serialize to a sink
/// - _turb1__GetVelocityHessian* soap_dup__turb1__GetVelocityHessian(struct soap*, _turb1__GetVelocityHessian* dst, _turb1__GetVelocityHessian *src) returns deep copy of _turb1__GetVelocityHessian src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVelocityHessian(_turb1__GetVelocityHessian*) deep deletes _turb1__GetVelocityHessian data members, use only on dst after soap_dup__turb1__GetVelocityHessian(NULL, _turb1__GetVelocityHessian *dst, _turb1__GetVelocityHessian *src) (use soapcpp2 -Ed)
struct _turb1__GetVelocityHessian
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVelocityHessianResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetVelocityHessianResponse is a complexType.
///
/// @note struct _turb1__GetVelocityHessianResponse operations:
/// - _turb1__GetVelocityHessianResponse* soap_new__turb1__GetVelocityHessianResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVelocityHessianResponse(struct soap*, _turb1__GetVelocityHessianResponse*) default initialize members
/// - int soap_read__turb1__GetVelocityHessianResponse(struct soap*, _turb1__GetVelocityHessianResponse*) deserialize from a source
/// - int soap_write__turb1__GetVelocityHessianResponse(struct soap*, _turb1__GetVelocityHessianResponse*) serialize to a sink
/// - _turb1__GetVelocityHessianResponse* soap_dup__turb1__GetVelocityHessianResponse(struct soap*, _turb1__GetVelocityHessianResponse* dst, _turb1__GetVelocityHessianResponse *src) returns deep copy of _turb1__GetVelocityHessianResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVelocityHessianResponse(_turb1__GetVelocityHessianResponse*) deep deletes _turb1__GetVelocityHessianResponse data members, use only on dst after soap_dup__turb1__GetVelocityHessianResponse(NULL, _turb1__GetVelocityHessianResponse *dst, _turb1__GetVelocityHessianResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetVelocityHessianResponse
{
/// Element "GetVelocityHessianResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVelocityHessian.
    struct turb1__ArrayOfVelocityHessian*  GetVelocityHessianResult       0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetMagneticHessian
/// @brief "http://turbulence.pha.jhu.edu/":GetMagneticHessian is a complexType.
///
/// @note struct _turb1__GetMagneticHessian operations:
/// - _turb1__GetMagneticHessian* soap_new__turb1__GetMagneticHessian(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetMagneticHessian(struct soap*, _turb1__GetMagneticHessian*) default initialize members
/// - int soap_read__turb1__GetMagneticHessian(struct soap*, _turb1__GetMagneticHessian*) deserialize from a source
/// - int soap_write__turb1__GetMagneticHessian(struct soap*, _turb1__GetMagneticHessian*) serialize to a sink
/// - _turb1__GetMagneticHessian* soap_dup__turb1__GetMagneticHessian(struct soap*, _turb1__GetMagneticHessian* dst, _turb1__GetMagneticHessian *src) returns deep copy of _turb1__GetMagneticHessian src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetMagneticHessian(_turb1__GetMagneticHessian*) deep deletes _turb1__GetMagneticHessian data members, use only on dst after soap_dup__turb1__GetMagneticHessian(NULL, _turb1__GetMagneticHessian *dst, _turb1__GetMagneticHessian *src) (use soapcpp2 -Ed)
struct _turb1__GetMagneticHessian
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetMagneticHessianResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetMagneticHessianResponse is a complexType.
///
/// @note struct _turb1__GetMagneticHessianResponse operations:
/// - _turb1__GetMagneticHessianResponse* soap_new__turb1__GetMagneticHessianResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetMagneticHessianResponse(struct soap*, _turb1__GetMagneticHessianResponse*) default initialize members
/// - int soap_read__turb1__GetMagneticHessianResponse(struct soap*, _turb1__GetMagneticHessianResponse*) deserialize from a source
/// - int soap_write__turb1__GetMagneticHessianResponse(struct soap*, _turb1__GetMagneticHessianResponse*) serialize to a sink
/// - _turb1__GetMagneticHessianResponse* soap_dup__turb1__GetMagneticHessianResponse(struct soap*, _turb1__GetMagneticHessianResponse* dst, _turb1__GetMagneticHessianResponse *src) returns deep copy of _turb1__GetMagneticHessianResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetMagneticHessianResponse(_turb1__GetMagneticHessianResponse*) deep deletes _turb1__GetMagneticHessianResponse data members, use only on dst after soap_dup__turb1__GetMagneticHessianResponse(NULL, _turb1__GetMagneticHessianResponse *dst, _turb1__GetMagneticHessianResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetMagneticHessianResponse
{
/// Element "GetMagneticHessianResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVelocityHessian.
    struct turb1__ArrayOfVelocityHessian*  GetMagneticHessianResult       0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVectorPotentialHessian
/// @brief "http://turbulence.pha.jhu.edu/":GetVectorPotentialHessian is a complexType.
///
/// @note struct _turb1__GetVectorPotentialHessian operations:
/// - _turb1__GetVectorPotentialHessian* soap_new__turb1__GetVectorPotentialHessian(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVectorPotentialHessian(struct soap*, _turb1__GetVectorPotentialHessian*) default initialize members
/// - int soap_read__turb1__GetVectorPotentialHessian(struct soap*, _turb1__GetVectorPotentialHessian*) deserialize from a source
/// - int soap_write__turb1__GetVectorPotentialHessian(struct soap*, _turb1__GetVectorPotentialHessian*) serialize to a sink
/// - _turb1__GetVectorPotentialHessian* soap_dup__turb1__GetVectorPotentialHessian(struct soap*, _turb1__GetVectorPotentialHessian* dst, _turb1__GetVectorPotentialHessian *src) returns deep copy of _turb1__GetVectorPotentialHessian src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVectorPotentialHessian(_turb1__GetVectorPotentialHessian*) deep deletes _turb1__GetVectorPotentialHessian data members, use only on dst after soap_dup__turb1__GetVectorPotentialHessian(NULL, _turb1__GetVectorPotentialHessian *dst, _turb1__GetVectorPotentialHessian *src) (use soapcpp2 -Ed)
struct _turb1__GetVectorPotentialHessian
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVectorPotentialHessianResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetVectorPotentialHessianResponse is a complexType.
///
/// @note struct _turb1__GetVectorPotentialHessianResponse operations:
/// - _turb1__GetVectorPotentialHessianResponse* soap_new__turb1__GetVectorPotentialHessianResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVectorPotentialHessianResponse(struct soap*, _turb1__GetVectorPotentialHessianResponse*) default initialize members
/// - int soap_read__turb1__GetVectorPotentialHessianResponse(struct soap*, _turb1__GetVectorPotentialHessianResponse*) deserialize from a source
/// - int soap_write__turb1__GetVectorPotentialHessianResponse(struct soap*, _turb1__GetVectorPotentialHessianResponse*) serialize to a sink
/// - _turb1__GetVectorPotentialHessianResponse* soap_dup__turb1__GetVectorPotentialHessianResponse(struct soap*, _turb1__GetVectorPotentialHessianResponse* dst, _turb1__GetVectorPotentialHessianResponse *src) returns deep copy of _turb1__GetVectorPotentialHessianResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVectorPotentialHessianResponse(_turb1__GetVectorPotentialHessianResponse*) deep deletes _turb1__GetVectorPotentialHessianResponse data members, use only on dst after soap_dup__turb1__GetVectorPotentialHessianResponse(NULL, _turb1__GetVectorPotentialHessianResponse *dst, _turb1__GetVectorPotentialHessianResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetVectorPotentialHessianResponse
{
/// Element "GetVectorPotentialHessianResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVelocityHessian.
    struct turb1__ArrayOfVelocityHessian*  GetVectorPotentialHessianResult 0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetPressureHessian
/// @brief "http://turbulence.pha.jhu.edu/":GetPressureHessian is a complexType.
///
/// @note struct _turb1__GetPressureHessian operations:
/// - _turb1__GetPressureHessian* soap_new__turb1__GetPressureHessian(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetPressureHessian(struct soap*, _turb1__GetPressureHessian*) default initialize members
/// - int soap_read__turb1__GetPressureHessian(struct soap*, _turb1__GetPressureHessian*) deserialize from a source
/// - int soap_write__turb1__GetPressureHessian(struct soap*, _turb1__GetPressureHessian*) serialize to a sink
/// - _turb1__GetPressureHessian* soap_dup__turb1__GetPressureHessian(struct soap*, _turb1__GetPressureHessian* dst, _turb1__GetPressureHessian *src) returns deep copy of _turb1__GetPressureHessian src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetPressureHessian(_turb1__GetPressureHessian*) deep deletes _turb1__GetPressureHessian data members, use only on dst after soap_dup__turb1__GetPressureHessian(NULL, _turb1__GetPressureHessian *dst, _turb1__GetPressureHessian *src) (use soapcpp2 -Ed)
struct _turb1__GetPressureHessian
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetPressureHessianResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetPressureHessianResponse is a complexType.
///
/// @note struct _turb1__GetPressureHessianResponse operations:
/// - _turb1__GetPressureHessianResponse* soap_new__turb1__GetPressureHessianResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetPressureHessianResponse(struct soap*, _turb1__GetPressureHessianResponse*) default initialize members
/// - int soap_read__turb1__GetPressureHessianResponse(struct soap*, _turb1__GetPressureHessianResponse*) deserialize from a source
/// - int soap_write__turb1__GetPressureHessianResponse(struct soap*, _turb1__GetPressureHessianResponse*) serialize to a sink
/// - _turb1__GetPressureHessianResponse* soap_dup__turb1__GetPressureHessianResponse(struct soap*, _turb1__GetPressureHessianResponse* dst, _turb1__GetPressureHessianResponse *src) returns deep copy of _turb1__GetPressureHessianResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetPressureHessianResponse(_turb1__GetPressureHessianResponse*) deep deletes _turb1__GetPressureHessianResponse data members, use only on dst after soap_dup__turb1__GetPressureHessianResponse(NULL, _turb1__GetPressureHessianResponse *dst, _turb1__GetPressureHessianResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetPressureHessianResponse
{
/// Element "GetPressureHessianResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfPressureHessian.
    struct turb1__ArrayOfPressureHessian*  GetPressureHessianResult       0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetDensityHessian
/// @brief "http://turbulence.pha.jhu.edu/":GetDensityHessian is a complexType.
///
/// @note struct _turb1__GetDensityHessian operations:
/// - _turb1__GetDensityHessian* soap_new__turb1__GetDensityHessian(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetDensityHessian(struct soap*, _turb1__GetDensityHessian*) default initialize members
/// - int soap_read__turb1__GetDensityHessian(struct soap*, _turb1__GetDensityHessian*) deserialize from a source
/// - int soap_write__turb1__GetDensityHessian(struct soap*, _turb1__GetDensityHessian*) serialize to a sink
/// - _turb1__GetDensityHessian* soap_dup__turb1__GetDensityHessian(struct soap*, _turb1__GetDensityHessian* dst, _turb1__GetDensityHessian *src) returns deep copy of _turb1__GetDensityHessian src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetDensityHessian(_turb1__GetDensityHessian*) deep deletes _turb1__GetDensityHessian data members, use only on dst after soap_dup__turb1__GetDensityHessian(NULL, _turb1__GetDensityHessian *dst, _turb1__GetDensityHessian *src) (use soapcpp2 -Ed)
struct _turb1__GetDensityHessian
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetDensityHessianResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetDensityHessianResponse is a complexType.
///
/// @note struct _turb1__GetDensityHessianResponse operations:
/// - _turb1__GetDensityHessianResponse* soap_new__turb1__GetDensityHessianResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetDensityHessianResponse(struct soap*, _turb1__GetDensityHessianResponse*) default initialize members
/// - int soap_read__turb1__GetDensityHessianResponse(struct soap*, _turb1__GetDensityHessianResponse*) deserialize from a source
/// - int soap_write__turb1__GetDensityHessianResponse(struct soap*, _turb1__GetDensityHessianResponse*) serialize to a sink
/// - _turb1__GetDensityHessianResponse* soap_dup__turb1__GetDensityHessianResponse(struct soap*, _turb1__GetDensityHessianResponse* dst, _turb1__GetDensityHessianResponse *src) returns deep copy of _turb1__GetDensityHessianResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetDensityHessianResponse(_turb1__GetDensityHessianResponse*) deep deletes _turb1__GetDensityHessianResponse data members, use only on dst after soap_dup__turb1__GetDensityHessianResponse(NULL, _turb1__GetDensityHessianResponse *dst, _turb1__GetDensityHessianResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetDensityHessianResponse
{
/// Element "GetDensityHessianResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfPressureHessian.
    struct turb1__ArrayOfPressureHessian*  GetDensityHessianResult        0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetTemperatureHessian
/// @brief "http://turbulence.pha.jhu.edu/":GetTemperatureHessian is a complexType.
///
/// @note struct _turb1__GetTemperatureHessian operations:
/// - _turb1__GetTemperatureHessian* soap_new__turb1__GetTemperatureHessian(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetTemperatureHessian(struct soap*, _turb1__GetTemperatureHessian*) default initialize members
/// - int soap_read__turb1__GetTemperatureHessian(struct soap*, _turb1__GetTemperatureHessian*) deserialize from a source
/// - int soap_write__turb1__GetTemperatureHessian(struct soap*, _turb1__GetTemperatureHessian*) serialize to a sink
/// - _turb1__GetTemperatureHessian* soap_dup__turb1__GetTemperatureHessian(struct soap*, _turb1__GetTemperatureHessian* dst, _turb1__GetTemperatureHessian *src) returns deep copy of _turb1__GetTemperatureHessian src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetTemperatureHessian(_turb1__GetTemperatureHessian*) deep deletes _turb1__GetTemperatureHessian data members, use only on dst after soap_dup__turb1__GetTemperatureHessian(NULL, _turb1__GetTemperatureHessian *dst, _turb1__GetTemperatureHessian *src) (use soapcpp2 -Ed)
struct _turb1__GetTemperatureHessian
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetTemperatureHessianResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetTemperatureHessianResponse is a complexType.
///
/// @note struct _turb1__GetTemperatureHessianResponse operations:
/// - _turb1__GetTemperatureHessianResponse* soap_new__turb1__GetTemperatureHessianResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetTemperatureHessianResponse(struct soap*, _turb1__GetTemperatureHessianResponse*) default initialize members
/// - int soap_read__turb1__GetTemperatureHessianResponse(struct soap*, _turb1__GetTemperatureHessianResponse*) deserialize from a source
/// - int soap_write__turb1__GetTemperatureHessianResponse(struct soap*, _turb1__GetTemperatureHessianResponse*) serialize to a sink
/// - _turb1__GetTemperatureHessianResponse* soap_dup__turb1__GetTemperatureHessianResponse(struct soap*, _turb1__GetTemperatureHessianResponse* dst, _turb1__GetTemperatureHessianResponse *src) returns deep copy of _turb1__GetTemperatureHessianResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetTemperatureHessianResponse(_turb1__GetTemperatureHessianResponse*) deep deletes _turb1__GetTemperatureHessianResponse data members, use only on dst after soap_dup__turb1__GetTemperatureHessianResponse(NULL, _turb1__GetTemperatureHessianResponse *dst, _turb1__GetTemperatureHessianResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetTemperatureHessianResponse
{
/// Element "GetTemperatureHessianResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfPressureHessian.
    struct turb1__ArrayOfPressureHessian*  GetTemperatureHessianResult    0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVelocityLaplacian
/// @brief "http://turbulence.pha.jhu.edu/":GetVelocityLaplacian is a complexType.
///
/// @note struct _turb1__GetVelocityLaplacian operations:
/// - _turb1__GetVelocityLaplacian* soap_new__turb1__GetVelocityLaplacian(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVelocityLaplacian(struct soap*, _turb1__GetVelocityLaplacian*) default initialize members
/// - int soap_read__turb1__GetVelocityLaplacian(struct soap*, _turb1__GetVelocityLaplacian*) deserialize from a source
/// - int soap_write__turb1__GetVelocityLaplacian(struct soap*, _turb1__GetVelocityLaplacian*) serialize to a sink
/// - _turb1__GetVelocityLaplacian* soap_dup__turb1__GetVelocityLaplacian(struct soap*, _turb1__GetVelocityLaplacian* dst, _turb1__GetVelocityLaplacian *src) returns deep copy of _turb1__GetVelocityLaplacian src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVelocityLaplacian(_turb1__GetVelocityLaplacian*) deep deletes _turb1__GetVelocityLaplacian data members, use only on dst after soap_dup__turb1__GetVelocityLaplacian(NULL, _turb1__GetVelocityLaplacian *dst, _turb1__GetVelocityLaplacian *src) (use soapcpp2 -Ed)
struct _turb1__GetVelocityLaplacian
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVelocityLaplacianResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetVelocityLaplacianResponse is a complexType.
///
/// @note struct _turb1__GetVelocityLaplacianResponse operations:
/// - _turb1__GetVelocityLaplacianResponse* soap_new__turb1__GetVelocityLaplacianResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVelocityLaplacianResponse(struct soap*, _turb1__GetVelocityLaplacianResponse*) default initialize members
/// - int soap_read__turb1__GetVelocityLaplacianResponse(struct soap*, _turb1__GetVelocityLaplacianResponse*) deserialize from a source
/// - int soap_write__turb1__GetVelocityLaplacianResponse(struct soap*, _turb1__GetVelocityLaplacianResponse*) serialize to a sink
/// - _turb1__GetVelocityLaplacianResponse* soap_dup__turb1__GetVelocityLaplacianResponse(struct soap*, _turb1__GetVelocityLaplacianResponse* dst, _turb1__GetVelocityLaplacianResponse *src) returns deep copy of _turb1__GetVelocityLaplacianResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVelocityLaplacianResponse(_turb1__GetVelocityLaplacianResponse*) deep deletes _turb1__GetVelocityLaplacianResponse data members, use only on dst after soap_dup__turb1__GetVelocityLaplacianResponse(NULL, _turb1__GetVelocityLaplacianResponse *dst, _turb1__GetVelocityLaplacianResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetVelocityLaplacianResponse
{
/// Element "GetVelocityLaplacianResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVector3.
    struct turb1__ArrayOfVector3*        GetVelocityLaplacianResult     0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetMagneticFieldLaplacian
/// @brief "http://turbulence.pha.jhu.edu/":GetMagneticFieldLaplacian is a complexType.
///
/// @note struct _turb1__GetMagneticFieldLaplacian operations:
/// - _turb1__GetMagneticFieldLaplacian* soap_new__turb1__GetMagneticFieldLaplacian(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetMagneticFieldLaplacian(struct soap*, _turb1__GetMagneticFieldLaplacian*) default initialize members
/// - int soap_read__turb1__GetMagneticFieldLaplacian(struct soap*, _turb1__GetMagneticFieldLaplacian*) deserialize from a source
/// - int soap_write__turb1__GetMagneticFieldLaplacian(struct soap*, _turb1__GetMagneticFieldLaplacian*) serialize to a sink
/// - _turb1__GetMagneticFieldLaplacian* soap_dup__turb1__GetMagneticFieldLaplacian(struct soap*, _turb1__GetMagneticFieldLaplacian* dst, _turb1__GetMagneticFieldLaplacian *src) returns deep copy of _turb1__GetMagneticFieldLaplacian src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetMagneticFieldLaplacian(_turb1__GetMagneticFieldLaplacian*) deep deletes _turb1__GetMagneticFieldLaplacian data members, use only on dst after soap_dup__turb1__GetMagneticFieldLaplacian(NULL, _turb1__GetMagneticFieldLaplacian *dst, _turb1__GetMagneticFieldLaplacian *src) (use soapcpp2 -Ed)
struct _turb1__GetMagneticFieldLaplacian
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetMagneticFieldLaplacianResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetMagneticFieldLaplacianResponse is a complexType.
///
/// @note struct _turb1__GetMagneticFieldLaplacianResponse operations:
/// - _turb1__GetMagneticFieldLaplacianResponse* soap_new__turb1__GetMagneticFieldLaplacianResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetMagneticFieldLaplacianResponse(struct soap*, _turb1__GetMagneticFieldLaplacianResponse*) default initialize members
/// - int soap_read__turb1__GetMagneticFieldLaplacianResponse(struct soap*, _turb1__GetMagneticFieldLaplacianResponse*) deserialize from a source
/// - int soap_write__turb1__GetMagneticFieldLaplacianResponse(struct soap*, _turb1__GetMagneticFieldLaplacianResponse*) serialize to a sink
/// - _turb1__GetMagneticFieldLaplacianResponse* soap_dup__turb1__GetMagneticFieldLaplacianResponse(struct soap*, _turb1__GetMagneticFieldLaplacianResponse* dst, _turb1__GetMagneticFieldLaplacianResponse *src) returns deep copy of _turb1__GetMagneticFieldLaplacianResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetMagneticFieldLaplacianResponse(_turb1__GetMagneticFieldLaplacianResponse*) deep deletes _turb1__GetMagneticFieldLaplacianResponse data members, use only on dst after soap_dup__turb1__GetMagneticFieldLaplacianResponse(NULL, _turb1__GetMagneticFieldLaplacianResponse *dst, _turb1__GetMagneticFieldLaplacianResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetMagneticFieldLaplacianResponse
{
/// Element "GetMagneticFieldLaplacianResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVector3.
    struct turb1__ArrayOfVector3*        GetMagneticFieldLaplacianResult 0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVectorPotentialLaplacian
/// @brief "http://turbulence.pha.jhu.edu/":GetVectorPotentialLaplacian is a complexType.
///
/// @note struct _turb1__GetVectorPotentialLaplacian operations:
/// - _turb1__GetVectorPotentialLaplacian* soap_new__turb1__GetVectorPotentialLaplacian(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVectorPotentialLaplacian(struct soap*, _turb1__GetVectorPotentialLaplacian*) default initialize members
/// - int soap_read__turb1__GetVectorPotentialLaplacian(struct soap*, _turb1__GetVectorPotentialLaplacian*) deserialize from a source
/// - int soap_write__turb1__GetVectorPotentialLaplacian(struct soap*, _turb1__GetVectorPotentialLaplacian*) serialize to a sink
/// - _turb1__GetVectorPotentialLaplacian* soap_dup__turb1__GetVectorPotentialLaplacian(struct soap*, _turb1__GetVectorPotentialLaplacian* dst, _turb1__GetVectorPotentialLaplacian *src) returns deep copy of _turb1__GetVectorPotentialLaplacian src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVectorPotentialLaplacian(_turb1__GetVectorPotentialLaplacian*) deep deletes _turb1__GetVectorPotentialLaplacian data members, use only on dst after soap_dup__turb1__GetVectorPotentialLaplacian(NULL, _turb1__GetVectorPotentialLaplacian *dst, _turb1__GetVectorPotentialLaplacian *src) (use soapcpp2 -Ed)
struct _turb1__GetVectorPotentialLaplacian
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVectorPotentialLaplacianResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetVectorPotentialLaplacianResponse is a complexType.
///
/// @note struct _turb1__GetVectorPotentialLaplacianResponse operations:
/// - _turb1__GetVectorPotentialLaplacianResponse* soap_new__turb1__GetVectorPotentialLaplacianResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVectorPotentialLaplacianResponse(struct soap*, _turb1__GetVectorPotentialLaplacianResponse*) default initialize members
/// - int soap_read__turb1__GetVectorPotentialLaplacianResponse(struct soap*, _turb1__GetVectorPotentialLaplacianResponse*) deserialize from a source
/// - int soap_write__turb1__GetVectorPotentialLaplacianResponse(struct soap*, _turb1__GetVectorPotentialLaplacianResponse*) serialize to a sink
/// - _turb1__GetVectorPotentialLaplacianResponse* soap_dup__turb1__GetVectorPotentialLaplacianResponse(struct soap*, _turb1__GetVectorPotentialLaplacianResponse* dst, _turb1__GetVectorPotentialLaplacianResponse *src) returns deep copy of _turb1__GetVectorPotentialLaplacianResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVectorPotentialLaplacianResponse(_turb1__GetVectorPotentialLaplacianResponse*) deep deletes _turb1__GetVectorPotentialLaplacianResponse data members, use only on dst after soap_dup__turb1__GetVectorPotentialLaplacianResponse(NULL, _turb1__GetVectorPotentialLaplacianResponse *dst, _turb1__GetVectorPotentialLaplacianResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetVectorPotentialLaplacianResponse
{
/// Element "GetVectorPotentialLaplacianResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVector3.
    struct turb1__ArrayOfVector3*        GetVectorPotentialLaplacianResult 0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetPosition
/// @brief "http://turbulence.pha.jhu.edu/":GetPosition is a complexType.
///
/// @note struct _turb1__GetPosition operations:
/// - _turb1__GetPosition* soap_new__turb1__GetPosition(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetPosition(struct soap*, _turb1__GetPosition*) default initialize members
/// - int soap_read__turb1__GetPosition(struct soap*, _turb1__GetPosition*) deserialize from a source
/// - int soap_write__turb1__GetPosition(struct soap*, _turb1__GetPosition*) serialize to a sink
/// - _turb1__GetPosition* soap_dup__turb1__GetPosition(struct soap*, _turb1__GetPosition* dst, _turb1__GetPosition *src) returns deep copy of _turb1__GetPosition src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetPosition(_turb1__GetPosition*) deep deletes _turb1__GetPosition data members, use only on dst after soap_dup__turb1__GetPosition(NULL, _turb1__GetPosition *dst, _turb1__GetPosition *src) (use soapcpp2 -Ed)
struct _turb1__GetPosition
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "StartTime" of type xs:float.
    float                                StartTime                      1;	///< Required element.
/// Element "EndTime" of type xs:float.
    float                                EndTime                        1;	///< Required element.
/// Element "dt" of type xs:float.
    float                                dt                             1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetPositionResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetPositionResponse is a complexType.
///
/// @note struct _turb1__GetPositionResponse operations:
/// - _turb1__GetPositionResponse* soap_new__turb1__GetPositionResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetPositionResponse(struct soap*, _turb1__GetPositionResponse*) default initialize members
/// - int soap_read__turb1__GetPositionResponse(struct soap*, _turb1__GetPositionResponse*) deserialize from a source
/// - int soap_write__turb1__GetPositionResponse(struct soap*, _turb1__GetPositionResponse*) serialize to a sink
/// - _turb1__GetPositionResponse* soap_dup__turb1__GetPositionResponse(struct soap*, _turb1__GetPositionResponse* dst, _turb1__GetPositionResponse *src) returns deep copy of _turb1__GetPositionResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetPositionResponse(_turb1__GetPositionResponse*) deep deletes _turb1__GetPositionResponse data members, use only on dst after soap_dup__turb1__GetPositionResponse(NULL, _turb1__GetPositionResponse *dst, _turb1__GetPositionResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetPositionResponse
{
/// Element "GetPositionResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         GetPositionResult              0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetThreshold
/// @brief "http://turbulence.pha.jhu.edu/":GetThreshold is a complexType.
///
/// @note struct _turb1__GetThreshold operations:
/// - _turb1__GetThreshold* soap_new__turb1__GetThreshold(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetThreshold(struct soap*, _turb1__GetThreshold*) default initialize members
/// - int soap_read__turb1__GetThreshold(struct soap*, _turb1__GetThreshold*) deserialize from a source
/// - int soap_write__turb1__GetThreshold(struct soap*, _turb1__GetThreshold*) serialize to a sink
/// - _turb1__GetThreshold* soap_dup__turb1__GetThreshold(struct soap*, _turb1__GetThreshold* dst, _turb1__GetThreshold *src) returns deep copy of _turb1__GetThreshold src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetThreshold(_turb1__GetThreshold*) deep deletes _turb1__GetThreshold data members, use only on dst after soap_dup__turb1__GetThreshold(NULL, _turb1__GetThreshold *dst, _turb1__GetThreshold *src) (use soapcpp2 -Ed)
struct _turb1__GetThreshold
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "field" of type xs:string.
    char*                                field                          0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "threshold" of type xs:float.
    float                                threshold                      1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "x_start" of type xs:int.
    int                                  x_USCOREstart                  1;	///< Required element.
/// Element "y_start" of type xs:int.
    int                                  y_USCOREstart                  1;	///< Required element.
/// Element "z_start" of type xs:int.
    int                                  z_USCOREstart                  1;	///< Required element.
/// Element "x_end" of type xs:int.
    int                                  x_USCOREend                    1;	///< Required element.
/// Element "y_end" of type xs:int.
    int                                  y_USCOREend                    1;	///< Required element.
/// Element "z_end" of type xs:int.
    int                                  z_USCOREend                    1;	///< Required element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetThresholdResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetThresholdResponse is a complexType.
///
/// @note struct _turb1__GetThresholdResponse operations:
/// - _turb1__GetThresholdResponse* soap_new__turb1__GetThresholdResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetThresholdResponse(struct soap*, _turb1__GetThresholdResponse*) default initialize members
/// - int soap_read__turb1__GetThresholdResponse(struct soap*, _turb1__GetThresholdResponse*) deserialize from a source
/// - int soap_write__turb1__GetThresholdResponse(struct soap*, _turb1__GetThresholdResponse*) serialize to a sink
/// - _turb1__GetThresholdResponse* soap_dup__turb1__GetThresholdResponse(struct soap*, _turb1__GetThresholdResponse* dst, _turb1__GetThresholdResponse *src) returns deep copy of _turb1__GetThresholdResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetThresholdResponse(_turb1__GetThresholdResponse*) deep deletes _turb1__GetThresholdResponse data members, use only on dst after soap_dup__turb1__GetThresholdResponse(NULL, _turb1__GetThresholdResponse *dst, _turb1__GetThresholdResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetThresholdResponse
{
/// Element "GetThresholdResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfThresholdInfo.
    struct turb1__ArrayOfThresholdInfo*  GetThresholdResult             0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetForce
/// @brief "http://turbulence.pha.jhu.edu/":GetForce is a complexType.
///
/// @note struct _turb1__GetForce operations:
/// - _turb1__GetForce* soap_new__turb1__GetForce(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetForce(struct soap*, _turb1__GetForce*) default initialize members
/// - int soap_read__turb1__GetForce(struct soap*, _turb1__GetForce*) deserialize from a source
/// - int soap_write__turb1__GetForce(struct soap*, _turb1__GetForce*) serialize to a sink
/// - _turb1__GetForce* soap_dup__turb1__GetForce(struct soap*, _turb1__GetForce* dst, _turb1__GetForce *src) returns deep copy of _turb1__GetForce src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetForce(_turb1__GetForce*) deep deletes _turb1__GetForce data members, use only on dst after soap_dup__turb1__GetForce(NULL, _turb1__GetForce *dst, _turb1__GetForce *src) (use soapcpp2 -Ed)
struct _turb1__GetForce
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetForceResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetForceResponse is a complexType.
///
/// @note struct _turb1__GetForceResponse operations:
/// - _turb1__GetForceResponse* soap_new__turb1__GetForceResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetForceResponse(struct soap*, _turb1__GetForceResponse*) default initialize members
/// - int soap_read__turb1__GetForceResponse(struct soap*, _turb1__GetForceResponse*) deserialize from a source
/// - int soap_write__turb1__GetForceResponse(struct soap*, _turb1__GetForceResponse*) serialize to a sink
/// - _turb1__GetForceResponse* soap_dup__turb1__GetForceResponse(struct soap*, _turb1__GetForceResponse* dst, _turb1__GetForceResponse *src) returns deep copy of _turb1__GetForceResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetForceResponse(_turb1__GetForceResponse*) deep deletes _turb1__GetForceResponse data members, use only on dst after soap_dup__turb1__GetForceResponse(NULL, _turb1__GetForceResponse *dst, _turb1__GetForceResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetForceResponse
{
/// Element "GetForceResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVector3.
    struct turb1__ArrayOfVector3*        GetForceResult                 0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetInvariant
/// @brief "http://turbulence.pha.jhu.edu/":GetInvariant is a complexType.
///
/// @note struct _turb1__GetInvariant operations:
/// - _turb1__GetInvariant* soap_new__turb1__GetInvariant(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetInvariant(struct soap*, _turb1__GetInvariant*) default initialize members
/// - int soap_read__turb1__GetInvariant(struct soap*, _turb1__GetInvariant*) deserialize from a source
/// - int soap_write__turb1__GetInvariant(struct soap*, _turb1__GetInvariant*) serialize to a sink
/// - _turb1__GetInvariant* soap_dup__turb1__GetInvariant(struct soap*, _turb1__GetInvariant* dst, _turb1__GetInvariant *src) returns deep copy of _turb1__GetInvariant src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetInvariant(_turb1__GetInvariant*) deep deletes _turb1__GetInvariant data members, use only on dst after soap_dup__turb1__GetInvariant(NULL, _turb1__GetInvariant *dst, _turb1__GetInvariant *src) (use soapcpp2 -Ed)
struct _turb1__GetInvariant
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetInvariantResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetInvariantResponse is a complexType.
///
/// @note struct _turb1__GetInvariantResponse operations:
/// - _turb1__GetInvariantResponse* soap_new__turb1__GetInvariantResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetInvariantResponse(struct soap*, _turb1__GetInvariantResponse*) default initialize members
/// - int soap_read__turb1__GetInvariantResponse(struct soap*, _turb1__GetInvariantResponse*) deserialize from a source
/// - int soap_write__turb1__GetInvariantResponse(struct soap*, _turb1__GetInvariantResponse*) serialize to a sink
/// - _turb1__GetInvariantResponse* soap_dup__turb1__GetInvariantResponse(struct soap*, _turb1__GetInvariantResponse* dst, _turb1__GetInvariantResponse *src) returns deep copy of _turb1__GetInvariantResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetInvariantResponse(_turb1__GetInvariantResponse*) deep deletes _turb1__GetInvariantResponse data members, use only on dst after soap_dup__turb1__GetInvariantResponse(NULL, _turb1__GetInvariantResponse *dst, _turb1__GetInvariantResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetInvariantResponse
{
/// Element "GetInvariantResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVector3.
    struct turb1__ArrayOfVector3*        GetInvariantResult             0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetBoxFilter
/// @brief "http://turbulence.pha.jhu.edu/":GetBoxFilter is a complexType.
///
/// @note struct _turb1__GetBoxFilter operations:
/// - _turb1__GetBoxFilter* soap_new__turb1__GetBoxFilter(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetBoxFilter(struct soap*, _turb1__GetBoxFilter*) default initialize members
/// - int soap_read__turb1__GetBoxFilter(struct soap*, _turb1__GetBoxFilter*) deserialize from a source
/// - int soap_write__turb1__GetBoxFilter(struct soap*, _turb1__GetBoxFilter*) serialize to a sink
/// - _turb1__GetBoxFilter* soap_dup__turb1__GetBoxFilter(struct soap*, _turb1__GetBoxFilter* dst, _turb1__GetBoxFilter *src) returns deep copy of _turb1__GetBoxFilter src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetBoxFilter(_turb1__GetBoxFilter*) deep deletes _turb1__GetBoxFilter data members, use only on dst after soap_dup__turb1__GetBoxFilter(NULL, _turb1__GetBoxFilter *dst, _turb1__GetBoxFilter *src) (use soapcpp2 -Ed)
struct _turb1__GetBoxFilter
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "field" of type xs:string.
    char*                                field                          0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "filterwidth" of type xs:float.
    float                                filterwidth                    1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetBoxFilterResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetBoxFilterResponse is a complexType.
///
/// @note struct _turb1__GetBoxFilterResponse operations:
/// - _turb1__GetBoxFilterResponse* soap_new__turb1__GetBoxFilterResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetBoxFilterResponse(struct soap*, _turb1__GetBoxFilterResponse*) default initialize members
/// - int soap_read__turb1__GetBoxFilterResponse(struct soap*, _turb1__GetBoxFilterResponse*) deserialize from a source
/// - int soap_write__turb1__GetBoxFilterResponse(struct soap*, _turb1__GetBoxFilterResponse*) serialize to a sink
/// - _turb1__GetBoxFilterResponse* soap_dup__turb1__GetBoxFilterResponse(struct soap*, _turb1__GetBoxFilterResponse* dst, _turb1__GetBoxFilterResponse *src) returns deep copy of _turb1__GetBoxFilterResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetBoxFilterResponse(_turb1__GetBoxFilterResponse*) deep deletes _turb1__GetBoxFilterResponse data members, use only on dst after soap_dup__turb1__GetBoxFilterResponse(NULL, _turb1__GetBoxFilterResponse *dst, _turb1__GetBoxFilterResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetBoxFilterResponse
{
/// Element "GetBoxFilterResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVector3.
    struct turb1__ArrayOfVector3*        GetBoxFilterResult             0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetBoxFilterSGS
/// @brief "http://turbulence.pha.jhu.edu/":GetBoxFilterSGS is a complexType.
///
/// @note struct _turb1__GetBoxFilterSGS operations:
/// - _turb1__GetBoxFilterSGS* soap_new__turb1__GetBoxFilterSGS(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetBoxFilterSGS(struct soap*, _turb1__GetBoxFilterSGS*) default initialize members
/// - int soap_read__turb1__GetBoxFilterSGS(struct soap*, _turb1__GetBoxFilterSGS*) deserialize from a source
/// - int soap_write__turb1__GetBoxFilterSGS(struct soap*, _turb1__GetBoxFilterSGS*) serialize to a sink
/// - _turb1__GetBoxFilterSGS* soap_dup__turb1__GetBoxFilterSGS(struct soap*, _turb1__GetBoxFilterSGS* dst, _turb1__GetBoxFilterSGS *src) returns deep copy of _turb1__GetBoxFilterSGS src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetBoxFilterSGS(_turb1__GetBoxFilterSGS*) deep deletes _turb1__GetBoxFilterSGS data members, use only on dst after soap_dup__turb1__GetBoxFilterSGS(NULL, _turb1__GetBoxFilterSGS *dst, _turb1__GetBoxFilterSGS *src) (use soapcpp2 -Ed)
struct _turb1__GetBoxFilterSGS
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "field" of type xs:string.
    char*                                field                          0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "filterwidth" of type xs:float.
    float                                filterwidth                    1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetBoxFilterSGSResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetBoxFilterSGSResponse is a complexType.
///
/// @note struct _turb1__GetBoxFilterSGSResponse operations:
/// - _turb1__GetBoxFilterSGSResponse* soap_new__turb1__GetBoxFilterSGSResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetBoxFilterSGSResponse(struct soap*, _turb1__GetBoxFilterSGSResponse*) default initialize members
/// - int soap_read__turb1__GetBoxFilterSGSResponse(struct soap*, _turb1__GetBoxFilterSGSResponse*) deserialize from a source
/// - int soap_write__turb1__GetBoxFilterSGSResponse(struct soap*, _turb1__GetBoxFilterSGSResponse*) serialize to a sink
/// - _turb1__GetBoxFilterSGSResponse* soap_dup__turb1__GetBoxFilterSGSResponse(struct soap*, _turb1__GetBoxFilterSGSResponse* dst, _turb1__GetBoxFilterSGSResponse *src) returns deep copy of _turb1__GetBoxFilterSGSResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetBoxFilterSGSResponse(_turb1__GetBoxFilterSGSResponse*) deep deletes _turb1__GetBoxFilterSGSResponse data members, use only on dst after soap_dup__turb1__GetBoxFilterSGSResponse(NULL, _turb1__GetBoxFilterSGSResponse *dst, _turb1__GetBoxFilterSGSResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetBoxFilterSGSResponse
{
/// Element "GetBoxFilterSGSResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfSGSTensor.
    struct turb1__ArrayOfSGSTensor*      GetBoxFilterSGSResult          0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetBoxFilterSGSsymtensor
/// @brief "http://turbulence.pha.jhu.edu/":GetBoxFilterSGSsymtensor is a complexType.
///
/// @note struct _turb1__GetBoxFilterSGSsymtensor operations:
/// - _turb1__GetBoxFilterSGSsymtensor* soap_new__turb1__GetBoxFilterSGSsymtensor(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetBoxFilterSGSsymtensor(struct soap*, _turb1__GetBoxFilterSGSsymtensor*) default initialize members
/// - int soap_read__turb1__GetBoxFilterSGSsymtensor(struct soap*, _turb1__GetBoxFilterSGSsymtensor*) deserialize from a source
/// - int soap_write__turb1__GetBoxFilterSGSsymtensor(struct soap*, _turb1__GetBoxFilterSGSsymtensor*) serialize to a sink
/// - _turb1__GetBoxFilterSGSsymtensor* soap_dup__turb1__GetBoxFilterSGSsymtensor(struct soap*, _turb1__GetBoxFilterSGSsymtensor* dst, _turb1__GetBoxFilterSGSsymtensor *src) returns deep copy of _turb1__GetBoxFilterSGSsymtensor src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetBoxFilterSGSsymtensor(_turb1__GetBoxFilterSGSsymtensor*) deep deletes _turb1__GetBoxFilterSGSsymtensor data members, use only on dst after soap_dup__turb1__GetBoxFilterSGSsymtensor(NULL, _turb1__GetBoxFilterSGSsymtensor *dst, _turb1__GetBoxFilterSGSsymtensor *src) (use soapcpp2 -Ed)
struct _turb1__GetBoxFilterSGSsymtensor
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "field" of type xs:string.
    char*                                field                          0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "filterwidth" of type xs:float.
    float                                filterwidth                    1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetBoxFilterSGSsymtensorResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetBoxFilterSGSsymtensorResponse is a complexType.
///
/// @note struct _turb1__GetBoxFilterSGSsymtensorResponse operations:
/// - _turb1__GetBoxFilterSGSsymtensorResponse* soap_new__turb1__GetBoxFilterSGSsymtensorResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetBoxFilterSGSsymtensorResponse(struct soap*, _turb1__GetBoxFilterSGSsymtensorResponse*) default initialize members
/// - int soap_read__turb1__GetBoxFilterSGSsymtensorResponse(struct soap*, _turb1__GetBoxFilterSGSsymtensorResponse*) deserialize from a source
/// - int soap_write__turb1__GetBoxFilterSGSsymtensorResponse(struct soap*, _turb1__GetBoxFilterSGSsymtensorResponse*) serialize to a sink
/// - _turb1__GetBoxFilterSGSsymtensorResponse* soap_dup__turb1__GetBoxFilterSGSsymtensorResponse(struct soap*, _turb1__GetBoxFilterSGSsymtensorResponse* dst, _turb1__GetBoxFilterSGSsymtensorResponse *src) returns deep copy of _turb1__GetBoxFilterSGSsymtensorResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetBoxFilterSGSsymtensorResponse(_turb1__GetBoxFilterSGSsymtensorResponse*) deep deletes _turb1__GetBoxFilterSGSsymtensorResponse data members, use only on dst after soap_dup__turb1__GetBoxFilterSGSsymtensorResponse(NULL, _turb1__GetBoxFilterSGSsymtensorResponse *dst, _turb1__GetBoxFilterSGSsymtensorResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetBoxFilterSGSsymtensorResponse
{
/// Element "GetBoxFilterSGSsymtensorResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfSGSTensor.
    struct turb1__ArrayOfSGSTensor*      GetBoxFilterSGSsymtensorResult 0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetBoxFilterSGStensor
/// @brief "http://turbulence.pha.jhu.edu/":GetBoxFilterSGStensor is a complexType.
///
/// @note struct _turb1__GetBoxFilterSGStensor operations:
/// - _turb1__GetBoxFilterSGStensor* soap_new__turb1__GetBoxFilterSGStensor(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetBoxFilterSGStensor(struct soap*, _turb1__GetBoxFilterSGStensor*) default initialize members
/// - int soap_read__turb1__GetBoxFilterSGStensor(struct soap*, _turb1__GetBoxFilterSGStensor*) deserialize from a source
/// - int soap_write__turb1__GetBoxFilterSGStensor(struct soap*, _turb1__GetBoxFilterSGStensor*) serialize to a sink
/// - _turb1__GetBoxFilterSGStensor* soap_dup__turb1__GetBoxFilterSGStensor(struct soap*, _turb1__GetBoxFilterSGStensor* dst, _turb1__GetBoxFilterSGStensor *src) returns deep copy of _turb1__GetBoxFilterSGStensor src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetBoxFilterSGStensor(_turb1__GetBoxFilterSGStensor*) deep deletes _turb1__GetBoxFilterSGStensor data members, use only on dst after soap_dup__turb1__GetBoxFilterSGStensor(NULL, _turb1__GetBoxFilterSGStensor *dst, _turb1__GetBoxFilterSGStensor *src) (use soapcpp2 -Ed)
struct _turb1__GetBoxFilterSGStensor
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "field" of type xs:string.
    char*                                field                          0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "filterwidth" of type xs:float.
    float                                filterwidth                    1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetBoxFilterSGStensorResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetBoxFilterSGStensorResponse is a complexType.
///
/// @note struct _turb1__GetBoxFilterSGStensorResponse operations:
/// - _turb1__GetBoxFilterSGStensorResponse* soap_new__turb1__GetBoxFilterSGStensorResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetBoxFilterSGStensorResponse(struct soap*, _turb1__GetBoxFilterSGStensorResponse*) default initialize members
/// - int soap_read__turb1__GetBoxFilterSGStensorResponse(struct soap*, _turb1__GetBoxFilterSGStensorResponse*) deserialize from a source
/// - int soap_write__turb1__GetBoxFilterSGStensorResponse(struct soap*, _turb1__GetBoxFilterSGStensorResponse*) serialize to a sink
/// - _turb1__GetBoxFilterSGStensorResponse* soap_dup__turb1__GetBoxFilterSGStensorResponse(struct soap*, _turb1__GetBoxFilterSGStensorResponse* dst, _turb1__GetBoxFilterSGStensorResponse *src) returns deep copy of _turb1__GetBoxFilterSGStensorResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetBoxFilterSGStensorResponse(_turb1__GetBoxFilterSGStensorResponse*) deep deletes _turb1__GetBoxFilterSGStensorResponse data members, use only on dst after soap_dup__turb1__GetBoxFilterSGStensorResponse(NULL, _turb1__GetBoxFilterSGStensorResponse *dst, _turb1__GetBoxFilterSGStensorResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetBoxFilterSGStensorResponse
{
/// Element "GetBoxFilterSGStensorResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVelocityGradient.
    struct turb1__ArrayOfVelocityGradient*  GetBoxFilterSGStensorResult    0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetBoxFilterSGSvector
/// @brief "http://turbulence.pha.jhu.edu/":GetBoxFilterSGSvector is a complexType.
///
/// @note struct _turb1__GetBoxFilterSGSvector operations:
/// - _turb1__GetBoxFilterSGSvector* soap_new__turb1__GetBoxFilterSGSvector(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetBoxFilterSGSvector(struct soap*, _turb1__GetBoxFilterSGSvector*) default initialize members
/// - int soap_read__turb1__GetBoxFilterSGSvector(struct soap*, _turb1__GetBoxFilterSGSvector*) deserialize from a source
/// - int soap_write__turb1__GetBoxFilterSGSvector(struct soap*, _turb1__GetBoxFilterSGSvector*) serialize to a sink
/// - _turb1__GetBoxFilterSGSvector* soap_dup__turb1__GetBoxFilterSGSvector(struct soap*, _turb1__GetBoxFilterSGSvector* dst, _turb1__GetBoxFilterSGSvector *src) returns deep copy of _turb1__GetBoxFilterSGSvector src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetBoxFilterSGSvector(_turb1__GetBoxFilterSGSvector*) deep deletes _turb1__GetBoxFilterSGSvector data members, use only on dst after soap_dup__turb1__GetBoxFilterSGSvector(NULL, _turb1__GetBoxFilterSGSvector *dst, _turb1__GetBoxFilterSGSvector *src) (use soapcpp2 -Ed)
struct _turb1__GetBoxFilterSGSvector
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "field" of type xs:string.
    char*                                field                          0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "filterwidth" of type xs:float.
    float                                filterwidth                    1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetBoxFilterSGSvectorResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetBoxFilterSGSvectorResponse is a complexType.
///
/// @note struct _turb1__GetBoxFilterSGSvectorResponse operations:
/// - _turb1__GetBoxFilterSGSvectorResponse* soap_new__turb1__GetBoxFilterSGSvectorResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetBoxFilterSGSvectorResponse(struct soap*, _turb1__GetBoxFilterSGSvectorResponse*) default initialize members
/// - int soap_read__turb1__GetBoxFilterSGSvectorResponse(struct soap*, _turb1__GetBoxFilterSGSvectorResponse*) deserialize from a source
/// - int soap_write__turb1__GetBoxFilterSGSvectorResponse(struct soap*, _turb1__GetBoxFilterSGSvectorResponse*) serialize to a sink
/// - _turb1__GetBoxFilterSGSvectorResponse* soap_dup__turb1__GetBoxFilterSGSvectorResponse(struct soap*, _turb1__GetBoxFilterSGSvectorResponse* dst, _turb1__GetBoxFilterSGSvectorResponse *src) returns deep copy of _turb1__GetBoxFilterSGSvectorResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetBoxFilterSGSvectorResponse(_turb1__GetBoxFilterSGSvectorResponse*) deep deletes _turb1__GetBoxFilterSGSvectorResponse data members, use only on dst after soap_dup__turb1__GetBoxFilterSGSvectorResponse(NULL, _turb1__GetBoxFilterSGSvectorResponse *dst, _turb1__GetBoxFilterSGSvectorResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetBoxFilterSGSvectorResponse
{
/// Element "GetBoxFilterSGSvectorResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVector3.
    struct turb1__ArrayOfVector3*        GetBoxFilterSGSvectorResult    0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetBoxFilterSGSscalar
/// @brief "http://turbulence.pha.jhu.edu/":GetBoxFilterSGSscalar is a complexType.
///
/// @note struct _turb1__GetBoxFilterSGSscalar operations:
/// - _turb1__GetBoxFilterSGSscalar* soap_new__turb1__GetBoxFilterSGSscalar(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetBoxFilterSGSscalar(struct soap*, _turb1__GetBoxFilterSGSscalar*) default initialize members
/// - int soap_read__turb1__GetBoxFilterSGSscalar(struct soap*, _turb1__GetBoxFilterSGSscalar*) deserialize from a source
/// - int soap_write__turb1__GetBoxFilterSGSscalar(struct soap*, _turb1__GetBoxFilterSGSscalar*) serialize to a sink
/// - _turb1__GetBoxFilterSGSscalar* soap_dup__turb1__GetBoxFilterSGSscalar(struct soap*, _turb1__GetBoxFilterSGSscalar* dst, _turb1__GetBoxFilterSGSscalar *src) returns deep copy of _turb1__GetBoxFilterSGSscalar src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetBoxFilterSGSscalar(_turb1__GetBoxFilterSGSscalar*) deep deletes _turb1__GetBoxFilterSGSscalar data members, use only on dst after soap_dup__turb1__GetBoxFilterSGSscalar(NULL, _turb1__GetBoxFilterSGSscalar *dst, _turb1__GetBoxFilterSGSscalar *src) (use soapcpp2 -Ed)
struct _turb1__GetBoxFilterSGSscalar
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "field" of type xs:string.
    char*                                field                          0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "filterwidth" of type xs:float.
    float                                filterwidth                    1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetBoxFilterSGSscalarResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetBoxFilterSGSscalarResponse is a complexType.
///
/// @note struct _turb1__GetBoxFilterSGSscalarResponse operations:
/// - _turb1__GetBoxFilterSGSscalarResponse* soap_new__turb1__GetBoxFilterSGSscalarResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetBoxFilterSGSscalarResponse(struct soap*, _turb1__GetBoxFilterSGSscalarResponse*) default initialize members
/// - int soap_read__turb1__GetBoxFilterSGSscalarResponse(struct soap*, _turb1__GetBoxFilterSGSscalarResponse*) deserialize from a source
/// - int soap_write__turb1__GetBoxFilterSGSscalarResponse(struct soap*, _turb1__GetBoxFilterSGSscalarResponse*) serialize to a sink
/// - _turb1__GetBoxFilterSGSscalarResponse* soap_dup__turb1__GetBoxFilterSGSscalarResponse(struct soap*, _turb1__GetBoxFilterSGSscalarResponse* dst, _turb1__GetBoxFilterSGSscalarResponse *src) returns deep copy of _turb1__GetBoxFilterSGSscalarResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetBoxFilterSGSscalarResponse(_turb1__GetBoxFilterSGSscalarResponse*) deep deletes _turb1__GetBoxFilterSGSscalarResponse data members, use only on dst after soap_dup__turb1__GetBoxFilterSGSscalarResponse(NULL, _turb1__GetBoxFilterSGSscalarResponse *dst, _turb1__GetBoxFilterSGSscalarResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetBoxFilterSGSscalarResponse
{
/// Element "GetBoxFilterSGSscalarResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfFloat.
    struct turb1__ArrayOfFloat*          GetBoxFilterSGSscalarResult    0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetBoxFilterGradient
/// @brief "http://turbulence.pha.jhu.edu/":GetBoxFilterGradient is a complexType.
///
/// @note struct _turb1__GetBoxFilterGradient operations:
/// - _turb1__GetBoxFilterGradient* soap_new__turb1__GetBoxFilterGradient(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetBoxFilterGradient(struct soap*, _turb1__GetBoxFilterGradient*) default initialize members
/// - int soap_read__turb1__GetBoxFilterGradient(struct soap*, _turb1__GetBoxFilterGradient*) deserialize from a source
/// - int soap_write__turb1__GetBoxFilterGradient(struct soap*, _turb1__GetBoxFilterGradient*) serialize to a sink
/// - _turb1__GetBoxFilterGradient* soap_dup__turb1__GetBoxFilterGradient(struct soap*, _turb1__GetBoxFilterGradient* dst, _turb1__GetBoxFilterGradient *src) returns deep copy of _turb1__GetBoxFilterGradient src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetBoxFilterGradient(_turb1__GetBoxFilterGradient*) deep deletes _turb1__GetBoxFilterGradient data members, use only on dst after soap_dup__turb1__GetBoxFilterGradient(NULL, _turb1__GetBoxFilterGradient *dst, _turb1__GetBoxFilterGradient *src) (use soapcpp2 -Ed)
struct _turb1__GetBoxFilterGradient
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "field" of type xs:string.
    char*                                field                          0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "filterwidth" of type xs:float.
    float                                filterwidth                    1;	///< Required element.
/// Element "spacing" of type xs:float.
    float                                spacing                        1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetBoxFilterGradientResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetBoxFilterGradientResponse is a complexType.
///
/// @note struct _turb1__GetBoxFilterGradientResponse operations:
/// - _turb1__GetBoxFilterGradientResponse* soap_new__turb1__GetBoxFilterGradientResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetBoxFilterGradientResponse(struct soap*, _turb1__GetBoxFilterGradientResponse*) default initialize members
/// - int soap_read__turb1__GetBoxFilterGradientResponse(struct soap*, _turb1__GetBoxFilterGradientResponse*) deserialize from a source
/// - int soap_write__turb1__GetBoxFilterGradientResponse(struct soap*, _turb1__GetBoxFilterGradientResponse*) serialize to a sink
/// - _turb1__GetBoxFilterGradientResponse* soap_dup__turb1__GetBoxFilterGradientResponse(struct soap*, _turb1__GetBoxFilterGradientResponse* dst, _turb1__GetBoxFilterGradientResponse *src) returns deep copy of _turb1__GetBoxFilterGradientResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetBoxFilterGradientResponse(_turb1__GetBoxFilterGradientResponse*) deep deletes _turb1__GetBoxFilterGradientResponse data members, use only on dst after soap_dup__turb1__GetBoxFilterGradientResponse(NULL, _turb1__GetBoxFilterGradientResponse *dst, _turb1__GetBoxFilterGradientResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetBoxFilterGradientResponse
{
/// Element "GetBoxFilterGradientResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVelocityGradient.
    struct turb1__ArrayOfVelocityGradient*  GetBoxFilterGradientResult     0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetLaplacianOfGradient
/// @brief "http://turbulence.pha.jhu.edu/":GetLaplacianOfGradient is a complexType.
///
/// @note struct _turb1__GetLaplacianOfGradient operations:
/// - _turb1__GetLaplacianOfGradient* soap_new__turb1__GetLaplacianOfGradient(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetLaplacianOfGradient(struct soap*, _turb1__GetLaplacianOfGradient*) default initialize members
/// - int soap_read__turb1__GetLaplacianOfGradient(struct soap*, _turb1__GetLaplacianOfGradient*) deserialize from a source
/// - int soap_write__turb1__GetLaplacianOfGradient(struct soap*, _turb1__GetLaplacianOfGradient*) serialize to a sink
/// - _turb1__GetLaplacianOfGradient* soap_dup__turb1__GetLaplacianOfGradient(struct soap*, _turb1__GetLaplacianOfGradient* dst, _turb1__GetLaplacianOfGradient *src) returns deep copy of _turb1__GetLaplacianOfGradient src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetLaplacianOfGradient(_turb1__GetLaplacianOfGradient*) deep deletes _turb1__GetLaplacianOfGradient data members, use only on dst after soap_dup__turb1__GetLaplacianOfGradient(NULL, _turb1__GetLaplacianOfGradient *dst, _turb1__GetLaplacianOfGradient *src) (use soapcpp2 -Ed)
struct _turb1__GetLaplacianOfGradient
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "field" of type xs:string.
    char*                                field                          0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetLaplacianOfGradientResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetLaplacianOfGradientResponse is a complexType.
///
/// @note struct _turb1__GetLaplacianOfGradientResponse operations:
/// - _turb1__GetLaplacianOfGradientResponse* soap_new__turb1__GetLaplacianOfGradientResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetLaplacianOfGradientResponse(struct soap*, _turb1__GetLaplacianOfGradientResponse*) default initialize members
/// - int soap_read__turb1__GetLaplacianOfGradientResponse(struct soap*, _turb1__GetLaplacianOfGradientResponse*) deserialize from a source
/// - int soap_write__turb1__GetLaplacianOfGradientResponse(struct soap*, _turb1__GetLaplacianOfGradientResponse*) serialize to a sink
/// - _turb1__GetLaplacianOfGradientResponse* soap_dup__turb1__GetLaplacianOfGradientResponse(struct soap*, _turb1__GetLaplacianOfGradientResponse* dst, _turb1__GetLaplacianOfGradientResponse *src) returns deep copy of _turb1__GetLaplacianOfGradientResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetLaplacianOfGradientResponse(_turb1__GetLaplacianOfGradientResponse*) deep deletes _turb1__GetLaplacianOfGradientResponse data members, use only on dst after soap_dup__turb1__GetLaplacianOfGradientResponse(NULL, _turb1__GetLaplacianOfGradientResponse *dst, _turb1__GetLaplacianOfGradientResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetLaplacianOfGradientResponse
{
/// Element "GetLaplacianOfGradientResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVelocityGradient.
    struct turb1__ArrayOfVelocityGradient*  GetLaplacianOfGradientResult   0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVelocityBatch
/// @brief "http://turbulence.pha.jhu.edu/":GetVelocityBatch is a complexType.
///
/// @note struct _turb1__GetVelocityBatch operations:
/// - _turb1__GetVelocityBatch* soap_new__turb1__GetVelocityBatch(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVelocityBatch(struct soap*, _turb1__GetVelocityBatch*) default initialize members
/// - int soap_read__turb1__GetVelocityBatch(struct soap*, _turb1__GetVelocityBatch*) deserialize from a source
/// - int soap_write__turb1__GetVelocityBatch(struct soap*, _turb1__GetVelocityBatch*) serialize to a sink
/// - _turb1__GetVelocityBatch* soap_dup__turb1__GetVelocityBatch(struct soap*, _turb1__GetVelocityBatch* dst, _turb1__GetVelocityBatch *src) returns deep copy of _turb1__GetVelocityBatch src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVelocityBatch(_turb1__GetVelocityBatch*) deep deletes _turb1__GetVelocityBatch data members, use only on dst after soap_dup__turb1__GetVelocityBatch(NULL, _turb1__GetVelocityBatch *dst, _turb1__GetVelocityBatch *src) (use soapcpp2 -Ed)
struct _turb1__GetVelocityBatch
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfPoint3.
    struct turb1__ArrayOfPoint3*         points                         0;	///< Optional element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetVelocityBatchResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetVelocityBatchResponse is a complexType.
///
/// @note struct _turb1__GetVelocityBatchResponse operations:
/// - _turb1__GetVelocityBatchResponse* soap_new__turb1__GetVelocityBatchResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetVelocityBatchResponse(struct soap*, _turb1__GetVelocityBatchResponse*) default initialize members
/// - int soap_read__turb1__GetVelocityBatchResponse(struct soap*, _turb1__GetVelocityBatchResponse*) deserialize from a source
/// - int soap_write__turb1__GetVelocityBatchResponse(struct soap*, _turb1__GetVelocityBatchResponse*) serialize to a sink
/// - _turb1__GetVelocityBatchResponse* soap_dup__turb1__GetVelocityBatchResponse(struct soap*, _turb1__GetVelocityBatchResponse* dst, _turb1__GetVelocityBatchResponse *src) returns deep copy of _turb1__GetVelocityBatchResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetVelocityBatchResponse(_turb1__GetVelocityBatchResponse*) deep deletes _turb1__GetVelocityBatchResponse data members, use only on dst after soap_dup__turb1__GetVelocityBatchResponse(NULL, _turb1__GetVelocityBatchResponse *dst, _turb1__GetVelocityBatchResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetVelocityBatchResponse
{
/// Element "GetVelocityBatchResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfVector3.
    struct turb1__ArrayOfVector3*        GetVelocityBatchResult         0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetRawVelocity
/// @brief "http://turbulence.pha.jhu.edu/":GetRawVelocity is a complexType.
///
/// @note struct _turb1__GetRawVelocity operations:
/// - _turb1__GetRawVelocity* soap_new__turb1__GetRawVelocity(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetRawVelocity(struct soap*, _turb1__GetRawVelocity*) default initialize members
/// - int soap_read__turb1__GetRawVelocity(struct soap*, _turb1__GetRawVelocity*) deserialize from a source
/// - int soap_write__turb1__GetRawVelocity(struct soap*, _turb1__GetRawVelocity*) serialize to a sink
/// - _turb1__GetRawVelocity* soap_dup__turb1__GetRawVelocity(struct soap*, _turb1__GetRawVelocity* dst, _turb1__GetRawVelocity *src) returns deep copy of _turb1__GetRawVelocity src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetRawVelocity(_turb1__GetRawVelocity*) deep deletes _turb1__GetRawVelocity data members, use only on dst after soap_dup__turb1__GetRawVelocity(NULL, _turb1__GetRawVelocity *dst, _turb1__GetRawVelocity *src) (use soapcpp2 -Ed)
struct _turb1__GetRawVelocity
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "T" of type xs:int.
    int                                  T                              1;	///< Required element.
/// Element "X" of type xs:int.
    int                                  X                              1;	///< Required element.
/// Element "Y" of type xs:int.
    int                                  Y                              1;	///< Required element.
/// Element "Z" of type xs:int.
    int                                  Z                              1;	///< Required element.
/// Element "Xwidth" of type xs:int.
    int                                  Xwidth                         1;	///< Required element.
/// Element "Ywidth" of type xs:int.
    int                                  Ywidth                         1;	///< Required element.
/// Element "Zwidth" of type xs:int.
    int                                  Zwidth                         1;	///< Required element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetRawVelocityResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetRawVelocityResponse is a complexType.
///
/// @note struct _turb1__GetRawVelocityResponse operations:
/// - _turb1__GetRawVelocityResponse* soap_new__turb1__GetRawVelocityResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetRawVelocityResponse(struct soap*, _turb1__GetRawVelocityResponse*) default initialize members
/// - int soap_read__turb1__GetRawVelocityResponse(struct soap*, _turb1__GetRawVelocityResponse*) deserialize from a source
/// - int soap_write__turb1__GetRawVelocityResponse(struct soap*, _turb1__GetRawVelocityResponse*) serialize to a sink
/// - _turb1__GetRawVelocityResponse* soap_dup__turb1__GetRawVelocityResponse(struct soap*, _turb1__GetRawVelocityResponse* dst, _turb1__GetRawVelocityResponse *src) returns deep copy of _turb1__GetRawVelocityResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetRawVelocityResponse(_turb1__GetRawVelocityResponse*) deep deletes _turb1__GetRawVelocityResponse data members, use only on dst after soap_dup__turb1__GetRawVelocityResponse(NULL, _turb1__GetRawVelocityResponse *dst, _turb1__GetRawVelocityResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetRawVelocityResponse
{
/// Element "GetRawVelocityResult" of type xs:base64Binary.
    struct xsd__base64Binary             GetRawVelocityResult           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetRawMagneticField
/// @brief "http://turbulence.pha.jhu.edu/":GetRawMagneticField is a complexType.
///
/// @note struct _turb1__GetRawMagneticField operations:
/// - _turb1__GetRawMagneticField* soap_new__turb1__GetRawMagneticField(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetRawMagneticField(struct soap*, _turb1__GetRawMagneticField*) default initialize members
/// - int soap_read__turb1__GetRawMagneticField(struct soap*, _turb1__GetRawMagneticField*) deserialize from a source
/// - int soap_write__turb1__GetRawMagneticField(struct soap*, _turb1__GetRawMagneticField*) serialize to a sink
/// - _turb1__GetRawMagneticField* soap_dup__turb1__GetRawMagneticField(struct soap*, _turb1__GetRawMagneticField* dst, _turb1__GetRawMagneticField *src) returns deep copy of _turb1__GetRawMagneticField src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetRawMagneticField(_turb1__GetRawMagneticField*) deep deletes _turb1__GetRawMagneticField data members, use only on dst after soap_dup__turb1__GetRawMagneticField(NULL, _turb1__GetRawMagneticField *dst, _turb1__GetRawMagneticField *src) (use soapcpp2 -Ed)
struct _turb1__GetRawMagneticField
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "T" of type xs:int.
    int                                  T                              1;	///< Required element.
/// Element "X" of type xs:int.
    int                                  X                              1;	///< Required element.
/// Element "Y" of type xs:int.
    int                                  Y                              1;	///< Required element.
/// Element "Z" of type xs:int.
    int                                  Z                              1;	///< Required element.
/// Element "Xwidth" of type xs:int.
    int                                  Xwidth                         1;	///< Required element.
/// Element "Ywidth" of type xs:int.
    int                                  Ywidth                         1;	///< Required element.
/// Element "Zwidth" of type xs:int.
    int                                  Zwidth                         1;	///< Required element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetRawMagneticFieldResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetRawMagneticFieldResponse is a complexType.
///
/// @note struct _turb1__GetRawMagneticFieldResponse operations:
/// - _turb1__GetRawMagneticFieldResponse* soap_new__turb1__GetRawMagneticFieldResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetRawMagneticFieldResponse(struct soap*, _turb1__GetRawMagneticFieldResponse*) default initialize members
/// - int soap_read__turb1__GetRawMagneticFieldResponse(struct soap*, _turb1__GetRawMagneticFieldResponse*) deserialize from a source
/// - int soap_write__turb1__GetRawMagneticFieldResponse(struct soap*, _turb1__GetRawMagneticFieldResponse*) serialize to a sink
/// - _turb1__GetRawMagneticFieldResponse* soap_dup__turb1__GetRawMagneticFieldResponse(struct soap*, _turb1__GetRawMagneticFieldResponse* dst, _turb1__GetRawMagneticFieldResponse *src) returns deep copy of _turb1__GetRawMagneticFieldResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetRawMagneticFieldResponse(_turb1__GetRawMagneticFieldResponse*) deep deletes _turb1__GetRawMagneticFieldResponse data members, use only on dst after soap_dup__turb1__GetRawMagneticFieldResponse(NULL, _turb1__GetRawMagneticFieldResponse *dst, _turb1__GetRawMagneticFieldResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetRawMagneticFieldResponse
{
/// Element "GetRawMagneticFieldResult" of type xs:base64Binary.
    struct xsd__base64Binary             GetRawMagneticFieldResult      0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetRawVectorPotential
/// @brief "http://turbulence.pha.jhu.edu/":GetRawVectorPotential is a complexType.
///
/// @note struct _turb1__GetRawVectorPotential operations:
/// - _turb1__GetRawVectorPotential* soap_new__turb1__GetRawVectorPotential(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetRawVectorPotential(struct soap*, _turb1__GetRawVectorPotential*) default initialize members
/// - int soap_read__turb1__GetRawVectorPotential(struct soap*, _turb1__GetRawVectorPotential*) deserialize from a source
/// - int soap_write__turb1__GetRawVectorPotential(struct soap*, _turb1__GetRawVectorPotential*) serialize to a sink
/// - _turb1__GetRawVectorPotential* soap_dup__turb1__GetRawVectorPotential(struct soap*, _turb1__GetRawVectorPotential* dst, _turb1__GetRawVectorPotential *src) returns deep copy of _turb1__GetRawVectorPotential src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetRawVectorPotential(_turb1__GetRawVectorPotential*) deep deletes _turb1__GetRawVectorPotential data members, use only on dst after soap_dup__turb1__GetRawVectorPotential(NULL, _turb1__GetRawVectorPotential *dst, _turb1__GetRawVectorPotential *src) (use soapcpp2 -Ed)
struct _turb1__GetRawVectorPotential
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "T" of type xs:int.
    int                                  T                              1;	///< Required element.
/// Element "X" of type xs:int.
    int                                  X                              1;	///< Required element.
/// Element "Y" of type xs:int.
    int                                  Y                              1;	///< Required element.
/// Element "Z" of type xs:int.
    int                                  Z                              1;	///< Required element.
/// Element "Xwidth" of type xs:int.
    int                                  Xwidth                         1;	///< Required element.
/// Element "Ywidth" of type xs:int.
    int                                  Ywidth                         1;	///< Required element.
/// Element "Zwidth" of type xs:int.
    int                                  Zwidth                         1;	///< Required element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetRawVectorPotentialResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetRawVectorPotentialResponse is a complexType.
///
/// @note struct _turb1__GetRawVectorPotentialResponse operations:
/// - _turb1__GetRawVectorPotentialResponse* soap_new__turb1__GetRawVectorPotentialResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetRawVectorPotentialResponse(struct soap*, _turb1__GetRawVectorPotentialResponse*) default initialize members
/// - int soap_read__turb1__GetRawVectorPotentialResponse(struct soap*, _turb1__GetRawVectorPotentialResponse*) deserialize from a source
/// - int soap_write__turb1__GetRawVectorPotentialResponse(struct soap*, _turb1__GetRawVectorPotentialResponse*) serialize to a sink
/// - _turb1__GetRawVectorPotentialResponse* soap_dup__turb1__GetRawVectorPotentialResponse(struct soap*, _turb1__GetRawVectorPotentialResponse* dst, _turb1__GetRawVectorPotentialResponse *src) returns deep copy of _turb1__GetRawVectorPotentialResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetRawVectorPotentialResponse(_turb1__GetRawVectorPotentialResponse*) deep deletes _turb1__GetRawVectorPotentialResponse data members, use only on dst after soap_dup__turb1__GetRawVectorPotentialResponse(NULL, _turb1__GetRawVectorPotentialResponse *dst, _turb1__GetRawVectorPotentialResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetRawVectorPotentialResponse
{
/// Element "GetRawVectorPotentialResult" of type xs:base64Binary.
    struct xsd__base64Binary             GetRawVectorPotentialResult    0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetRawPressure
/// @brief "http://turbulence.pha.jhu.edu/":GetRawPressure is a complexType.
///
/// @note struct _turb1__GetRawPressure operations:
/// - _turb1__GetRawPressure* soap_new__turb1__GetRawPressure(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetRawPressure(struct soap*, _turb1__GetRawPressure*) default initialize members
/// - int soap_read__turb1__GetRawPressure(struct soap*, _turb1__GetRawPressure*) deserialize from a source
/// - int soap_write__turb1__GetRawPressure(struct soap*, _turb1__GetRawPressure*) serialize to a sink
/// - _turb1__GetRawPressure* soap_dup__turb1__GetRawPressure(struct soap*, _turb1__GetRawPressure* dst, _turb1__GetRawPressure *src) returns deep copy of _turb1__GetRawPressure src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetRawPressure(_turb1__GetRawPressure*) deep deletes _turb1__GetRawPressure data members, use only on dst after soap_dup__turb1__GetRawPressure(NULL, _turb1__GetRawPressure *dst, _turb1__GetRawPressure *src) (use soapcpp2 -Ed)
struct _turb1__GetRawPressure
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "T" of type xs:int.
    int                                  T                              1;	///< Required element.
/// Element "X" of type xs:int.
    int                                  X                              1;	///< Required element.
/// Element "Y" of type xs:int.
    int                                  Y                              1;	///< Required element.
/// Element "Z" of type xs:int.
    int                                  Z                              1;	///< Required element.
/// Element "Xwidth" of type xs:int.
    int                                  Xwidth                         1;	///< Required element.
/// Element "Ywidth" of type xs:int.
    int                                  Ywidth                         1;	///< Required element.
/// Element "Zwidth" of type xs:int.
    int                                  Zwidth                         1;	///< Required element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetRawPressureResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetRawPressureResponse is a complexType.
///
/// @note struct _turb1__GetRawPressureResponse operations:
/// - _turb1__GetRawPressureResponse* soap_new__turb1__GetRawPressureResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetRawPressureResponse(struct soap*, _turb1__GetRawPressureResponse*) default initialize members
/// - int soap_read__turb1__GetRawPressureResponse(struct soap*, _turb1__GetRawPressureResponse*) deserialize from a source
/// - int soap_write__turb1__GetRawPressureResponse(struct soap*, _turb1__GetRawPressureResponse*) serialize to a sink
/// - _turb1__GetRawPressureResponse* soap_dup__turb1__GetRawPressureResponse(struct soap*, _turb1__GetRawPressureResponse* dst, _turb1__GetRawPressureResponse *src) returns deep copy of _turb1__GetRawPressureResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetRawPressureResponse(_turb1__GetRawPressureResponse*) deep deletes _turb1__GetRawPressureResponse data members, use only on dst after soap_dup__turb1__GetRawPressureResponse(NULL, _turb1__GetRawPressureResponse *dst, _turb1__GetRawPressureResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetRawPressureResponse
{
/// Element "GetRawPressureResult" of type xs:base64Binary.
    struct xsd__base64Binary             GetRawPressureResult           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetRawDensity
/// @brief "http://turbulence.pha.jhu.edu/":GetRawDensity is a complexType.
///
/// @note struct _turb1__GetRawDensity operations:
/// - _turb1__GetRawDensity* soap_new__turb1__GetRawDensity(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetRawDensity(struct soap*, _turb1__GetRawDensity*) default initialize members
/// - int soap_read__turb1__GetRawDensity(struct soap*, _turb1__GetRawDensity*) deserialize from a source
/// - int soap_write__turb1__GetRawDensity(struct soap*, _turb1__GetRawDensity*) serialize to a sink
/// - _turb1__GetRawDensity* soap_dup__turb1__GetRawDensity(struct soap*, _turb1__GetRawDensity* dst, _turb1__GetRawDensity *src) returns deep copy of _turb1__GetRawDensity src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetRawDensity(_turb1__GetRawDensity*) deep deletes _turb1__GetRawDensity data members, use only on dst after soap_dup__turb1__GetRawDensity(NULL, _turb1__GetRawDensity *dst, _turb1__GetRawDensity *src) (use soapcpp2 -Ed)
struct _turb1__GetRawDensity
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "T" of type xs:int.
    int                                  T                              1;	///< Required element.
/// Element "X" of type xs:int.
    int                                  X                              1;	///< Required element.
/// Element "Y" of type xs:int.
    int                                  Y                              1;	///< Required element.
/// Element "Z" of type xs:int.
    int                                  Z                              1;	///< Required element.
/// Element "Xwidth" of type xs:int.
    int                                  Xwidth                         1;	///< Required element.
/// Element "Ywidth" of type xs:int.
    int                                  Ywidth                         1;	///< Required element.
/// Element "Zwidth" of type xs:int.
    int                                  Zwidth                         1;	///< Required element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetRawDensityResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetRawDensityResponse is a complexType.
///
/// @note struct _turb1__GetRawDensityResponse operations:
/// - _turb1__GetRawDensityResponse* soap_new__turb1__GetRawDensityResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetRawDensityResponse(struct soap*, _turb1__GetRawDensityResponse*) default initialize members
/// - int soap_read__turb1__GetRawDensityResponse(struct soap*, _turb1__GetRawDensityResponse*) deserialize from a source
/// - int soap_write__turb1__GetRawDensityResponse(struct soap*, _turb1__GetRawDensityResponse*) serialize to a sink
/// - _turb1__GetRawDensityResponse* soap_dup__turb1__GetRawDensityResponse(struct soap*, _turb1__GetRawDensityResponse* dst, _turb1__GetRawDensityResponse *src) returns deep copy of _turb1__GetRawDensityResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetRawDensityResponse(_turb1__GetRawDensityResponse*) deep deletes _turb1__GetRawDensityResponse data members, use only on dst after soap_dup__turb1__GetRawDensityResponse(NULL, _turb1__GetRawDensityResponse *dst, _turb1__GetRawDensityResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetRawDensityResponse
{
/// Element "GetRawDensityResult" of type xs:base64Binary.
    struct xsd__base64Binary             GetRawDensityResult            0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetRawTemperature
/// @brief "http://turbulence.pha.jhu.edu/":GetRawTemperature is a complexType.
///
/// @note struct _turb1__GetRawTemperature operations:
/// - _turb1__GetRawTemperature* soap_new__turb1__GetRawTemperature(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetRawTemperature(struct soap*, _turb1__GetRawTemperature*) default initialize members
/// - int soap_read__turb1__GetRawTemperature(struct soap*, _turb1__GetRawTemperature*) deserialize from a source
/// - int soap_write__turb1__GetRawTemperature(struct soap*, _turb1__GetRawTemperature*) serialize to a sink
/// - _turb1__GetRawTemperature* soap_dup__turb1__GetRawTemperature(struct soap*, _turb1__GetRawTemperature* dst, _turb1__GetRawTemperature *src) returns deep copy of _turb1__GetRawTemperature src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetRawTemperature(_turb1__GetRawTemperature*) deep deletes _turb1__GetRawTemperature data members, use only on dst after soap_dup__turb1__GetRawTemperature(NULL, _turb1__GetRawTemperature *dst, _turb1__GetRawTemperature *src) (use soapcpp2 -Ed)
struct _turb1__GetRawTemperature
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "T" of type xs:int.
    int                                  T                              1;	///< Required element.
/// Element "X" of type xs:int.
    int                                  X                              1;	///< Required element.
/// Element "Y" of type xs:int.
    int                                  Y                              1;	///< Required element.
/// Element "Z" of type xs:int.
    int                                  Z                              1;	///< Required element.
/// Element "Xwidth" of type xs:int.
    int                                  Xwidth                         1;	///< Required element.
/// Element "Ywidth" of type xs:int.
    int                                  Ywidth                         1;	///< Required element.
/// Element "Zwidth" of type xs:int.
    int                                  Zwidth                         1;	///< Required element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetRawTemperatureResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetRawTemperatureResponse is a complexType.
///
/// @note struct _turb1__GetRawTemperatureResponse operations:
/// - _turb1__GetRawTemperatureResponse* soap_new__turb1__GetRawTemperatureResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetRawTemperatureResponse(struct soap*, _turb1__GetRawTemperatureResponse*) default initialize members
/// - int soap_read__turb1__GetRawTemperatureResponse(struct soap*, _turb1__GetRawTemperatureResponse*) deserialize from a source
/// - int soap_write__turb1__GetRawTemperatureResponse(struct soap*, _turb1__GetRawTemperatureResponse*) serialize to a sink
/// - _turb1__GetRawTemperatureResponse* soap_dup__turb1__GetRawTemperatureResponse(struct soap*, _turb1__GetRawTemperatureResponse* dst, _turb1__GetRawTemperatureResponse *src) returns deep copy of _turb1__GetRawTemperatureResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetRawTemperatureResponse(_turb1__GetRawTemperatureResponse*) deep deletes _turb1__GetRawTemperatureResponse data members, use only on dst after soap_dup__turb1__GetRawTemperatureResponse(NULL, _turb1__GetRawTemperatureResponse *dst, _turb1__GetRawTemperatureResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetRawTemperatureResponse
{
/// Element "GetRawTemperatureResult" of type xs:base64Binary.
    struct xsd__base64Binary             GetRawTemperatureResult        0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetAnyCutoutWeb
/// @brief "http://turbulence.pha.jhu.edu/":GetAnyCutoutWeb is a complexType.
///
/// @note struct _turb1__GetAnyCutoutWeb operations:
/// - _turb1__GetAnyCutoutWeb* soap_new__turb1__GetAnyCutoutWeb(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetAnyCutoutWeb(struct soap*, _turb1__GetAnyCutoutWeb*) default initialize members
/// - int soap_read__turb1__GetAnyCutoutWeb(struct soap*, _turb1__GetAnyCutoutWeb*) deserialize from a source
/// - int soap_write__turb1__GetAnyCutoutWeb(struct soap*, _turb1__GetAnyCutoutWeb*) serialize to a sink
/// - _turb1__GetAnyCutoutWeb* soap_dup__turb1__GetAnyCutoutWeb(struct soap*, _turb1__GetAnyCutoutWeb* dst, _turb1__GetAnyCutoutWeb *src) returns deep copy of _turb1__GetAnyCutoutWeb src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetAnyCutoutWeb(_turb1__GetAnyCutoutWeb*) deep deletes _turb1__GetAnyCutoutWeb data members, use only on dst after soap_dup__turb1__GetAnyCutoutWeb(NULL, _turb1__GetAnyCutoutWeb *dst, _turb1__GetAnyCutoutWeb *src) (use soapcpp2 -Ed)
struct _turb1__GetAnyCutoutWeb
{
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "field" of type xs:string.
    char*                                field                          0;	///< Optional element.
/// Element "T" of type xs:int.
    int                                  T                              1;	///< Required element.
/// Element "x_start" of type xs:int.
    int                                  x_USCOREstart                  1;	///< Required element.
/// Element "y_start" of type xs:int.
    int                                  y_USCOREstart                  1;	///< Required element.
/// Element "z_start" of type xs:int.
    int                                  z_USCOREstart                  1;	///< Required element.
/// Element "x_end" of type xs:int.
    int                                  x_USCOREend                    1;	///< Required element.
/// Element "y_end" of type xs:int.
    int                                  y_USCOREend                    1;	///< Required element.
/// Element "z_end" of type xs:int.
    int                                  z_USCOREend                    1;	///< Required element.
/// Element "x_step" of type xs:int.
    int                                  x_USCOREstep                   1;	///< Required element.
/// Element "y_step" of type xs:int.
    int                                  y_USCOREstep                   1;	///< Required element.
/// Element "z_step" of type xs:int.
    int                                  z_USCOREstep                   1;	///< Required element.
/// Element "filter_width" of type xs:int.
    int                                  filter_USCOREwidth             1;	///< Required element.
/// Element "addr" of type xs:string.
    char*                                addr                           0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetAnyCutoutWebResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetAnyCutoutWebResponse is a complexType.
///
/// @note struct _turb1__GetAnyCutoutWebResponse operations:
/// - _turb1__GetAnyCutoutWebResponse* soap_new__turb1__GetAnyCutoutWebResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetAnyCutoutWebResponse(struct soap*, _turb1__GetAnyCutoutWebResponse*) default initialize members
/// - int soap_read__turb1__GetAnyCutoutWebResponse(struct soap*, _turb1__GetAnyCutoutWebResponse*) deserialize from a source
/// - int soap_write__turb1__GetAnyCutoutWebResponse(struct soap*, _turb1__GetAnyCutoutWebResponse*) serialize to a sink
/// - _turb1__GetAnyCutoutWebResponse* soap_dup__turb1__GetAnyCutoutWebResponse(struct soap*, _turb1__GetAnyCutoutWebResponse* dst, _turb1__GetAnyCutoutWebResponse *src) returns deep copy of _turb1__GetAnyCutoutWebResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetAnyCutoutWebResponse(_turb1__GetAnyCutoutWebResponse*) deep deletes _turb1__GetAnyCutoutWebResponse data members, use only on dst after soap_dup__turb1__GetAnyCutoutWebResponse(NULL, _turb1__GetAnyCutoutWebResponse *dst, _turb1__GetAnyCutoutWebResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetAnyCutoutWebResponse
{
/// Element "GetAnyCutoutWebResult" of type xs:base64Binary.
    struct xsd__base64Binary             GetAnyCutoutWebResult          0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetData_Python
/// @brief "http://turbulence.pha.jhu.edu/":GetData_Python is a complexType.
///
/// @note struct _turb1__GetData_USCOREPython operations:
/// - _turb1__GetData_USCOREPython* soap_new__turb1__GetData_USCOREPython(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetData_USCOREPython(struct soap*, _turb1__GetData_USCOREPython*) default initialize members
/// - int soap_read__turb1__GetData_USCOREPython(struct soap*, _turb1__GetData_USCOREPython*) deserialize from a source
/// - int soap_write__turb1__GetData_USCOREPython(struct soap*, _turb1__GetData_USCOREPython*) serialize to a sink
/// - _turb1__GetData_USCOREPython* soap_dup__turb1__GetData_USCOREPython(struct soap*, _turb1__GetData_USCOREPython* dst, _turb1__GetData_USCOREPython *src) returns deep copy of _turb1__GetData_USCOREPython src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetData_USCOREPython(_turb1__GetData_USCOREPython*) deep deletes _turb1__GetData_USCOREPython data members, use only on dst after soap_dup__turb1__GetData_USCOREPython(NULL, _turb1__GetData_USCOREPython *dst, _turb1__GetData_USCOREPython *src) (use soapcpp2 -Ed)
struct _turb1__GetData_USCOREPython
{
/// Element "function_name" of type xs:string.
    char*                                function_USCOREname            0;	///< Optional element.
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "temporalInterpolation" of type "http://turbulence.pha.jhu.edu/":TemporalInterpolation.
    enum turb1__TemporalInterpolation    temporalInterpolation          1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfArrayOfFloat.
    struct turb1__ArrayOfArrayOfFloat*   points                         0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetData_PythonResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetData_PythonResponse is a complexType.
///
/// @note struct _turb1__GetData_USCOREPythonResponse operations:
/// - _turb1__GetData_USCOREPythonResponse* soap_new__turb1__GetData_USCOREPythonResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetData_USCOREPythonResponse(struct soap*, _turb1__GetData_USCOREPythonResponse*) default initialize members
/// - int soap_read__turb1__GetData_USCOREPythonResponse(struct soap*, _turb1__GetData_USCOREPythonResponse*) deserialize from a source
/// - int soap_write__turb1__GetData_USCOREPythonResponse(struct soap*, _turb1__GetData_USCOREPythonResponse*) serialize to a sink
/// - _turb1__GetData_USCOREPythonResponse* soap_dup__turb1__GetData_USCOREPythonResponse(struct soap*, _turb1__GetData_USCOREPythonResponse* dst, _turb1__GetData_USCOREPythonResponse *src) returns deep copy of _turb1__GetData_USCOREPythonResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetData_USCOREPythonResponse(_turb1__GetData_USCOREPythonResponse*) deep deletes _turb1__GetData_USCOREPythonResponse data members, use only on dst after soap_dup__turb1__GetData_USCOREPythonResponse(NULL, _turb1__GetData_USCOREPythonResponse *dst, _turb1__GetData_USCOREPythonResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetData_USCOREPythonResponse
{
/// Element "GetData_PythonResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfFloat.
    struct turb1__ArrayOfFloat*          GetData_USCOREPythonResult     0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetFilter_Python
/// @brief "http://turbulence.pha.jhu.edu/":GetFilter_Python is a complexType.
///
/// @note struct _turb1__GetFilter_USCOREPython operations:
/// - _turb1__GetFilter_USCOREPython* soap_new__turb1__GetFilter_USCOREPython(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetFilter_USCOREPython(struct soap*, _turb1__GetFilter_USCOREPython*) default initialize members
/// - int soap_read__turb1__GetFilter_USCOREPython(struct soap*, _turb1__GetFilter_USCOREPython*) deserialize from a source
/// - int soap_write__turb1__GetFilter_USCOREPython(struct soap*, _turb1__GetFilter_USCOREPython*) serialize to a sink
/// - _turb1__GetFilter_USCOREPython* soap_dup__turb1__GetFilter_USCOREPython(struct soap*, _turb1__GetFilter_USCOREPython* dst, _turb1__GetFilter_USCOREPython *src) returns deep copy of _turb1__GetFilter_USCOREPython src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetFilter_USCOREPython(_turb1__GetFilter_USCOREPython*) deep deletes _turb1__GetFilter_USCOREPython data members, use only on dst after soap_dup__turb1__GetFilter_USCOREPython(NULL, _turb1__GetFilter_USCOREPython *dst, _turb1__GetFilter_USCOREPython *src) (use soapcpp2 -Ed)
struct _turb1__GetFilter_USCOREPython
{
/// Element "function_name" of type xs:string.
    char*                                function_USCOREname            0;	///< Optional element.
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "field" of type xs:string.
    char*                                field                          0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "filterwidth" of type xs:float.
    float                                filterwidth                    1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfArrayOfFloat.
    struct turb1__ArrayOfArrayOfFloat*   points                         0;	///< Optional element.
/// Element "spacing" of type xs:float.
    float                                spacing                        1;	///< Required element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetFilter_PythonResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetFilter_PythonResponse is a complexType.
///
/// @note struct _turb1__GetFilter_USCOREPythonResponse operations:
/// - _turb1__GetFilter_USCOREPythonResponse* soap_new__turb1__GetFilter_USCOREPythonResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetFilter_USCOREPythonResponse(struct soap*, _turb1__GetFilter_USCOREPythonResponse*) default initialize members
/// - int soap_read__turb1__GetFilter_USCOREPythonResponse(struct soap*, _turb1__GetFilter_USCOREPythonResponse*) deserialize from a source
/// - int soap_write__turb1__GetFilter_USCOREPythonResponse(struct soap*, _turb1__GetFilter_USCOREPythonResponse*) serialize to a sink
/// - _turb1__GetFilter_USCOREPythonResponse* soap_dup__turb1__GetFilter_USCOREPythonResponse(struct soap*, _turb1__GetFilter_USCOREPythonResponse* dst, _turb1__GetFilter_USCOREPythonResponse *src) returns deep copy of _turb1__GetFilter_USCOREPythonResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetFilter_USCOREPythonResponse(_turb1__GetFilter_USCOREPythonResponse*) deep deletes _turb1__GetFilter_USCOREPythonResponse data members, use only on dst after soap_dup__turb1__GetFilter_USCOREPythonResponse(NULL, _turb1__GetFilter_USCOREPythonResponse *dst, _turb1__GetFilter_USCOREPythonResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetFilter_USCOREPythonResponse
{
/// Element "GetFilter_PythonResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfFloat.
    struct turb1__ArrayOfFloat*          GetFilter_USCOREPythonResult   0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetPosition_Python
/// @brief "http://turbulence.pha.jhu.edu/":GetPosition_Python is a complexType.
///
/// @note struct _turb1__GetPosition_USCOREPython operations:
/// - _turb1__GetPosition_USCOREPython* soap_new__turb1__GetPosition_USCOREPython(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetPosition_USCOREPython(struct soap*, _turb1__GetPosition_USCOREPython*) default initialize members
/// - int soap_read__turb1__GetPosition_USCOREPython(struct soap*, _turb1__GetPosition_USCOREPython*) deserialize from a source
/// - int soap_write__turb1__GetPosition_USCOREPython(struct soap*, _turb1__GetPosition_USCOREPython*) serialize to a sink
/// - _turb1__GetPosition_USCOREPython* soap_dup__turb1__GetPosition_USCOREPython(struct soap*, _turb1__GetPosition_USCOREPython* dst, _turb1__GetPosition_USCOREPython *src) returns deep copy of _turb1__GetPosition_USCOREPython src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetPosition_USCOREPython(_turb1__GetPosition_USCOREPython*) deep deletes _turb1__GetPosition_USCOREPython data members, use only on dst after soap_dup__turb1__GetPosition_USCOREPython(NULL, _turb1__GetPosition_USCOREPython *dst, _turb1__GetPosition_USCOREPython *src) (use soapcpp2 -Ed)
struct _turb1__GetPosition_USCOREPython
{
/// Element "function_name" of type xs:string.
    char*                                function_USCOREname            0;	///< Optional element.
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "StartTime" of type xs:float.
    float                                StartTime                      1;	///< Required element.
/// Element "EndTime" of type xs:float.
    float                                EndTime                        1;	///< Required element.
/// Element "dt" of type xs:float.
    float                                dt                             1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "points" of type "http://turbulence.pha.jhu.edu/":ArrayOfArrayOfFloat.
    struct turb1__ArrayOfArrayOfFloat*   points                         0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetPosition_PythonResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetPosition_PythonResponse is a complexType.
///
/// @note struct _turb1__GetPosition_USCOREPythonResponse operations:
/// - _turb1__GetPosition_USCOREPythonResponse* soap_new__turb1__GetPosition_USCOREPythonResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetPosition_USCOREPythonResponse(struct soap*, _turb1__GetPosition_USCOREPythonResponse*) default initialize members
/// - int soap_read__turb1__GetPosition_USCOREPythonResponse(struct soap*, _turb1__GetPosition_USCOREPythonResponse*) deserialize from a source
/// - int soap_write__turb1__GetPosition_USCOREPythonResponse(struct soap*, _turb1__GetPosition_USCOREPythonResponse*) serialize to a sink
/// - _turb1__GetPosition_USCOREPythonResponse* soap_dup__turb1__GetPosition_USCOREPythonResponse(struct soap*, _turb1__GetPosition_USCOREPythonResponse* dst, _turb1__GetPosition_USCOREPythonResponse *src) returns deep copy of _turb1__GetPosition_USCOREPythonResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetPosition_USCOREPythonResponse(_turb1__GetPosition_USCOREPythonResponse*) deep deletes _turb1__GetPosition_USCOREPythonResponse data members, use only on dst after soap_dup__turb1__GetPosition_USCOREPythonResponse(NULL, _turb1__GetPosition_USCOREPythonResponse *dst, _turb1__GetPosition_USCOREPythonResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetPosition_USCOREPythonResponse
{
/// Element "GetPosition_PythonResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfFloat.
    struct turb1__ArrayOfFloat*          GetPosition_USCOREPythonResult 0;	///< Optional element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetThreshold_Python
/// @brief "http://turbulence.pha.jhu.edu/":GetThreshold_Python is a complexType.
///
/// @note struct _turb1__GetThreshold_USCOREPython operations:
/// - _turb1__GetThreshold_USCOREPython* soap_new__turb1__GetThreshold_USCOREPython(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetThreshold_USCOREPython(struct soap*, _turb1__GetThreshold_USCOREPython*) default initialize members
/// - int soap_read__turb1__GetThreshold_USCOREPython(struct soap*, _turb1__GetThreshold_USCOREPython*) deserialize from a source
/// - int soap_write__turb1__GetThreshold_USCOREPython(struct soap*, _turb1__GetThreshold_USCOREPython*) serialize to a sink
/// - _turb1__GetThreshold_USCOREPython* soap_dup__turb1__GetThreshold_USCOREPython(struct soap*, _turb1__GetThreshold_USCOREPython* dst, _turb1__GetThreshold_USCOREPython *src) returns deep copy of _turb1__GetThreshold_USCOREPython src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetThreshold_USCOREPython(_turb1__GetThreshold_USCOREPython*) deep deletes _turb1__GetThreshold_USCOREPython data members, use only on dst after soap_dup__turb1__GetThreshold_USCOREPython(NULL, _turb1__GetThreshold_USCOREPython *dst, _turb1__GetThreshold_USCOREPython *src) (use soapcpp2 -Ed)
struct _turb1__GetThreshold_USCOREPython
{
/// Element "function_name" of type xs:string.
    char*                                function_USCOREname            0;	///< Optional element.
/// Element "authToken" of type xs:string.
    char*                                authToken                      0;	///< Optional element.
/// Element "dataset" of type xs:string.
    char*                                dataset                        0;	///< Optional element.
/// Element "field" of type xs:string.
    char*                                field                          0;	///< Optional element.
/// Element "time" of type xs:float.
    float                                time                           1;	///< Required element.
/// Element "threshold" of type xs:float.
    float                                threshold                      1;	///< Required element.
/// Element "spatialInterpolation" of type "http://turbulence.pha.jhu.edu/":SpatialInterpolation.
    enum turb1__SpatialInterpolation     spatialInterpolation           1;	///< Required element.
/// Element "x_start" of type xs:int.
    int                                  x_USCOREstart                  1;	///< Required element.
/// Element "y_start" of type xs:int.
    int                                  y_USCOREstart                  1;	///< Required element.
/// Element "z_start" of type xs:int.
    int                                  z_USCOREstart                  1;	///< Required element.
/// Element "x_end" of type xs:int.
    int                                  x_USCOREend                    1;	///< Required element.
/// Element "y_end" of type xs:int.
    int                                  y_USCOREend                    1;	///< Required element.
/// Element "z_end" of type xs:int.
    int                                  z_USCOREend                    1;	///< Required element.
};

/// @brief Top-level root element "http://turbulence.pha.jhu.edu/":GetThreshold_PythonResponse
/// @brief "http://turbulence.pha.jhu.edu/":GetThreshold_PythonResponse is a complexType.
///
/// @note struct _turb1__GetThreshold_USCOREPythonResponse operations:
/// - _turb1__GetThreshold_USCOREPythonResponse* soap_new__turb1__GetThreshold_USCOREPythonResponse(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default__turb1__GetThreshold_USCOREPythonResponse(struct soap*, _turb1__GetThreshold_USCOREPythonResponse*) default initialize members
/// - int soap_read__turb1__GetThreshold_USCOREPythonResponse(struct soap*, _turb1__GetThreshold_USCOREPythonResponse*) deserialize from a source
/// - int soap_write__turb1__GetThreshold_USCOREPythonResponse(struct soap*, _turb1__GetThreshold_USCOREPythonResponse*) serialize to a sink
/// - _turb1__GetThreshold_USCOREPythonResponse* soap_dup__turb1__GetThreshold_USCOREPythonResponse(struct soap*, _turb1__GetThreshold_USCOREPythonResponse* dst, _turb1__GetThreshold_USCOREPythonResponse *src) returns deep copy of _turb1__GetThreshold_USCOREPythonResponse src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__turb1__GetThreshold_USCOREPythonResponse(_turb1__GetThreshold_USCOREPythonResponse*) deep deletes _turb1__GetThreshold_USCOREPythonResponse data members, use only on dst after soap_dup__turb1__GetThreshold_USCOREPythonResponse(NULL, _turb1__GetThreshold_USCOREPythonResponse *dst, _turb1__GetThreshold_USCOREPythonResponse *src) (use soapcpp2 -Ed)
struct _turb1__GetThreshold_USCOREPythonResponse
{
/// Element "GetThreshold_PythonResult" of type "http://turbulence.pha.jhu.edu/":ArrayOfFloat.
    struct turb1__ArrayOfFloat*          GetThreshold_USCOREPythonResult 0;	///< Optional element.
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://turbulence.pha.jhu.edu/                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://turbulence.pha.jhu.edu/                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap turb1 service name:	TurbulenceServiceSoap 
//gsoap turb1 service type:	TurbulenceServiceSoap 
//gsoap turb1 service port:	http://turbulence.pha.jhu.edu/service/turbulence.asmx 
//gsoap turb1 service namespace:	http://turbulence.pha.jhu.edu/ 
//gsoap turb1 service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref TurbulenceServiceSoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/** @page TurbulenceServiceSoap Binding "TurbulenceServiceSoap"

@section TurbulenceServiceSoap_operations Operations of Binding "TurbulenceServiceSoap"

  - @ref __turb1__NullOp

  - @ref __turb1__GetVelocity

  - @ref __turb1__GetMagneticField

  - @ref __turb1__GetVectorPotential

  - @ref __turb1__GetPressure

  - @ref __turb1__GetDensity

  - @ref __turb1__GetTemperature

  - @ref __turb1__GetVelocityAndPressure

  - @ref __turb1__GetVelocityAndTemperature

  - @ref __turb1__GetVelocityGradient

  - @ref __turb1__GetMagneticFieldGradient

  - @ref __turb1__GetVectorPotentialGradient

  - @ref __turb1__GetPressureGradient

  - @ref __turb1__GetDensityGradient

  - @ref __turb1__GetTemperatureGradient

  - @ref __turb1__GetVelocityHessian

  - @ref __turb1__GetMagneticHessian

  - @ref __turb1__GetVectorPotentialHessian

  - @ref __turb1__GetPressureHessian

  - @ref __turb1__GetDensityHessian

  - @ref __turb1__GetTemperatureHessian

  - @ref __turb1__GetVelocityLaplacian

  - @ref __turb1__GetMagneticFieldLaplacian

  - @ref __turb1__GetVectorPotentialLaplacian

  - @ref __turb1__GetPosition

  - @ref __turb1__GetThreshold

  - @ref __turb1__GetForce

  - @ref __turb1__GetInvariant

  - @ref __turb1__GetBoxFilter

  - @ref __turb1__GetBoxFilterSGS

  - @ref __turb1__GetBoxFilterSGSsymtensor

  - @ref __turb1__GetBoxFilterSGStensor

  - @ref __turb1__GetBoxFilterSGSvector

  - @ref __turb1__GetBoxFilterSGSscalar

  - @ref __turb1__GetBoxFilterGradient

  - @ref __turb1__GetLaplacianOfGradient

  - @ref __turb1__GetVelocityBatch

  - @ref __turb1__GetRawVelocity

  - @ref __turb1__GetRawMagneticField

  - @ref __turb1__GetRawVectorPotential

  - @ref __turb1__GetRawPressure

  - @ref __turb1__GetRawDensity

  - @ref __turb1__GetRawTemperature

  - @ref __turb1__GetAnyCutoutWeb

  - @ref __turb1__GetData_USCOREPython

  - @ref __turb1__GetFilter_USCOREPython

  - @ref __turb1__GetPosition_USCOREPython

  - @ref __turb1__GetThreshold_USCOREPython

  - @ref __turb1__NullOp_

  - @ref __turb1__GetVelocity_

  - @ref __turb1__GetMagneticField_

  - @ref __turb1__GetVectorPotential_

  - @ref __turb1__GetPressure_

  - @ref __turb1__GetDensity_

  - @ref __turb1__GetTemperature_

  - @ref __turb1__GetVelocityAndPressure_

  - @ref __turb1__GetVelocityAndTemperature_

  - @ref __turb1__GetVelocityGradient_

  - @ref __turb1__GetMagneticFieldGradient_

  - @ref __turb1__GetVectorPotentialGradient_

  - @ref __turb1__GetPressureGradient_

  - @ref __turb1__GetDensityGradient_

  - @ref __turb1__GetTemperatureGradient_

  - @ref __turb1__GetVelocityHessian_

  - @ref __turb1__GetMagneticHessian_

  - @ref __turb1__GetVectorPotentialHessian_

  - @ref __turb1__GetPressureHessian_

  - @ref __turb1__GetDensityHessian_

  - @ref __turb1__GetTemperatureHessian_

  - @ref __turb1__GetVelocityLaplacian_

  - @ref __turb1__GetMagneticFieldLaplacian_

  - @ref __turb1__GetVectorPotentialLaplacian_

  - @ref __turb1__GetPosition_

  - @ref __turb1__GetThreshold_

  - @ref __turb1__GetForce_

  - @ref __turb1__GetInvariant_

  - @ref __turb1__GetBoxFilter_

  - @ref __turb1__GetBoxFilterSGS_

  - @ref __turb1__GetBoxFilterSGSsymtensor_

  - @ref __turb1__GetBoxFilterSGStensor_

  - @ref __turb1__GetBoxFilterSGSvector_

  - @ref __turb1__GetBoxFilterSGSscalar_

  - @ref __turb1__GetBoxFilterGradient_

  - @ref __turb1__GetLaplacianOfGradient_

  - @ref __turb1__GetVelocityBatch_

  - @ref __turb1__GetRawVelocity_

  - @ref __turb1__GetRawMagneticField_

  - @ref __turb1__GetRawVectorPotential_

  - @ref __turb1__GetRawPressure_

  - @ref __turb1__GetRawDensity_

  - @ref __turb1__GetRawTemperature_

  - @ref __turb1__GetAnyCutoutWeb_

  - @ref __turb1__GetData_USCOREPython_

  - @ref __turb1__GetFilter_USCOREPython_

  - @ref __turb1__GetPosition_USCOREPython_

  - @ref __turb1__GetThreshold_USCOREPython_

@section TurbulenceServiceSoap_ports Default endpoints of Binding "TurbulenceServiceSoap"

  - http://turbulence.pha.jhu.edu/service/turbulence.asmx

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   TurbulenceServiceSoap                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__NullOp                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__NullOp" of service binding "TurbulenceServiceSoap".
Perform a null operation -- for testing throughput

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/NullOp"

  - Addressing input action: "http://turbulence.pha.jhu.edu/NullOp"

  - Addressing output action: "http://turbulence.pha.jhu.edu/NullOpResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__NullOp(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__NullOp*              turb1__NullOp,
    // output parameters:
    struct _turb1__NullOpResponse      *turb1__NullOpResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__NullOp(
    struct soap *soap,
    // input parameters:
    struct _turb1__NullOp*              turb1__NullOp,
    // output parameters:
    struct _turb1__NullOpResponse      *turb1__NullOpResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	NullOp SOAP
//gsoap turb1 service method-style:	NullOp document
//gsoap turb1 service method-encoding:	NullOp literal
//gsoap turb1 service method-input-action:	NullOp http://turbulence.pha.jhu.edu/NullOp
//gsoap turb1 service method-output-action:	NullOp http://turbulence.pha.jhu.edu/NullOpResponse
int __turb1__NullOp(
    struct _turb1__NullOp*              turb1__NullOp,	///< Input parameter
    struct _turb1__NullOpResponse      *turb1__NullOpResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVelocity                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVelocity" of service binding "TurbulenceServiceSoap".
Spatially interpolate the velocity at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVelocity"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVelocity"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVelocityResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVelocity(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVelocity*         turb1__GetVelocity,
    // output parameters:
    struct _turb1__GetVelocityResponse *turb1__GetVelocityResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVelocity(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVelocity*         turb1__GetVelocity,
    // output parameters:
    struct _turb1__GetVelocityResponse *turb1__GetVelocityResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVelocity SOAP
//gsoap turb1 service method-style:	GetVelocity document
//gsoap turb1 service method-encoding:	GetVelocity literal
//gsoap turb1 service method-input-action:	GetVelocity http://turbulence.pha.jhu.edu/GetVelocity
//gsoap turb1 service method-output-action:	GetVelocity http://turbulence.pha.jhu.edu/GetVelocityResponse
int __turb1__GetVelocity(
    struct _turb1__GetVelocity*         turb1__GetVelocity,	///< Input parameter
    struct _turb1__GetVelocityResponse *turb1__GetVelocityResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetMagneticField                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetMagneticField" of service binding "TurbulenceServiceSoap".
Spatially interpolate the magnetic field at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetMagneticField"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetMagneticField"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetMagneticFieldResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetMagneticField(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetMagneticField*    turb1__GetMagneticField,
    // output parameters:
    struct _turb1__GetMagneticFieldResponse*turb1__GetMagneticFieldResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetMagneticField(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetMagneticField*    turb1__GetMagneticField,
    // output parameters:
    struct _turb1__GetMagneticFieldResponse*turb1__GetMagneticFieldResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetMagneticField SOAP
//gsoap turb1 service method-style:	GetMagneticField document
//gsoap turb1 service method-encoding:	GetMagneticField literal
//gsoap turb1 service method-input-action:	GetMagneticField http://turbulence.pha.jhu.edu/GetMagneticField
//gsoap turb1 service method-output-action:	GetMagneticField http://turbulence.pha.jhu.edu/GetMagneticFieldResponse
int __turb1__GetMagneticField(
    struct _turb1__GetMagneticField*    turb1__GetMagneticField,	///< Input parameter
    struct _turb1__GetMagneticFieldResponse*turb1__GetMagneticFieldResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVectorPotential                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVectorPotential" of service binding "TurbulenceServiceSoap".
Spatially interpolate the magnetic field at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVectorPotential"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVectorPotential"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVectorPotentialResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVectorPotential(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVectorPotential*  turb1__GetVectorPotential,
    // output parameters:
    struct _turb1__GetVectorPotentialResponse*turb1__GetVectorPotentialResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVectorPotential(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVectorPotential*  turb1__GetVectorPotential,
    // output parameters:
    struct _turb1__GetVectorPotentialResponse*turb1__GetVectorPotentialResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVectorPotential SOAP
//gsoap turb1 service method-style:	GetVectorPotential document
//gsoap turb1 service method-encoding:	GetVectorPotential literal
//gsoap turb1 service method-input-action:	GetVectorPotential http://turbulence.pha.jhu.edu/GetVectorPotential
//gsoap turb1 service method-output-action:	GetVectorPotential http://turbulence.pha.jhu.edu/GetVectorPotentialResponse
int __turb1__GetVectorPotential(
    struct _turb1__GetVectorPotential*  turb1__GetVectorPotential,	///< Input parameter
    struct _turb1__GetVectorPotentialResponse*turb1__GetVectorPotentialResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetPressure                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetPressure" of service binding "TurbulenceServiceSoap".
Spatially interpolate the pressure field at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetPressure"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetPressure"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetPressureResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetPressure(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetPressure*         turb1__GetPressure,
    // output parameters:
    struct _turb1__GetPressureResponse *turb1__GetPressureResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetPressure(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetPressure*         turb1__GetPressure,
    // output parameters:
    struct _turb1__GetPressureResponse *turb1__GetPressureResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetPressure SOAP
//gsoap turb1 service method-style:	GetPressure document
//gsoap turb1 service method-encoding:	GetPressure literal
//gsoap turb1 service method-input-action:	GetPressure http://turbulence.pha.jhu.edu/GetPressure
//gsoap turb1 service method-output-action:	GetPressure http://turbulence.pha.jhu.edu/GetPressureResponse
int __turb1__GetPressure(
    struct _turb1__GetPressure*         turb1__GetPressure,	///< Input parameter
    struct _turb1__GetPressureResponse *turb1__GetPressureResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetDensity                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetDensity" of service binding "TurbulenceServiceSoap".
Spatially interpolate the density field at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetDensity"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetDensity"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetDensityResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetDensity(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetDensity*          turb1__GetDensity,
    // output parameters:
    struct _turb1__GetDensityResponse  *turb1__GetDensityResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetDensity(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetDensity*          turb1__GetDensity,
    // output parameters:
    struct _turb1__GetDensityResponse  *turb1__GetDensityResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetDensity SOAP
//gsoap turb1 service method-style:	GetDensity document
//gsoap turb1 service method-encoding:	GetDensity literal
//gsoap turb1 service method-input-action:	GetDensity http://turbulence.pha.jhu.edu/GetDensity
//gsoap turb1 service method-output-action:	GetDensity http://turbulence.pha.jhu.edu/GetDensityResponse
int __turb1__GetDensity(
    struct _turb1__GetDensity*          turb1__GetDensity,	///< Input parameter
    struct _turb1__GetDensityResponse  *turb1__GetDensityResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetTemperature                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetTemperature" of service binding "TurbulenceServiceSoap".
Spatially interpolate the temperature field at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetTemperature"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetTemperature"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetTemperatureResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetTemperature(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetTemperature*      turb1__GetTemperature,
    // output parameters:
    struct _turb1__GetTemperatureResponse*turb1__GetTemperatureResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetTemperature(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetTemperature*      turb1__GetTemperature,
    // output parameters:
    struct _turb1__GetTemperatureResponse*turb1__GetTemperatureResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetTemperature SOAP
//gsoap turb1 service method-style:	GetTemperature document
//gsoap turb1 service method-encoding:	GetTemperature literal
//gsoap turb1 service method-input-action:	GetTemperature http://turbulence.pha.jhu.edu/GetTemperature
//gsoap turb1 service method-output-action:	GetTemperature http://turbulence.pha.jhu.edu/GetTemperatureResponse
int __turb1__GetTemperature(
    struct _turb1__GetTemperature*      turb1__GetTemperature,	///< Input parameter
    struct _turb1__GetTemperatureResponse*turb1__GetTemperatureResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVelocityAndPressure                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVelocityAndPressure" of service binding "TurbulenceServiceSoap".
Spatially interpolate the velocity and pressure for an array of points

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVelocityAndPressure"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVelocityAndPressure"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVelocityAndPressureResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVelocityAndPressure(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVelocityAndPressure* turb1__GetVelocityAndPressure,
    // output parameters:
    struct _turb1__GetVelocityAndPressureResponse*turb1__GetVelocityAndPressureResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVelocityAndPressure(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVelocityAndPressure* turb1__GetVelocityAndPressure,
    // output parameters:
    struct _turb1__GetVelocityAndPressureResponse*turb1__GetVelocityAndPressureResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVelocityAndPressure SOAP
//gsoap turb1 service method-style:	GetVelocityAndPressure document
//gsoap turb1 service method-encoding:	GetVelocityAndPressure literal
//gsoap turb1 service method-input-action:	GetVelocityAndPressure http://turbulence.pha.jhu.edu/GetVelocityAndPressure
//gsoap turb1 service method-output-action:	GetVelocityAndPressure http://turbulence.pha.jhu.edu/GetVelocityAndPressureResponse
int __turb1__GetVelocityAndPressure(
    struct _turb1__GetVelocityAndPressure* turb1__GetVelocityAndPressure,	///< Input parameter
    struct _turb1__GetVelocityAndPressureResponse*turb1__GetVelocityAndPressureResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVelocityAndTemperature                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVelocityAndTemperature" of service binding "TurbulenceServiceSoap".
Spatially interpolate the velocity and temperature for an array of points

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVelocityAndTemperature"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVelocityAndTemperature"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVelocityAndTemperatureResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVelocityAndTemperature(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVelocityAndTemperature* turb1__GetVelocityAndTemperature,
    // output parameters:
    struct _turb1__GetVelocityAndTemperatureResponse*turb1__GetVelocityAndTemperatureResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVelocityAndTemperature(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVelocityAndTemperature* turb1__GetVelocityAndTemperature,
    // output parameters:
    struct _turb1__GetVelocityAndTemperatureResponse*turb1__GetVelocityAndTemperatureResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVelocityAndTemperature SOAP
//gsoap turb1 service method-style:	GetVelocityAndTemperature document
//gsoap turb1 service method-encoding:	GetVelocityAndTemperature literal
//gsoap turb1 service method-input-action:	GetVelocityAndTemperature http://turbulence.pha.jhu.edu/GetVelocityAndTemperature
//gsoap turb1 service method-output-action:	GetVelocityAndTemperature http://turbulence.pha.jhu.edu/GetVelocityAndTemperatureResponse
int __turb1__GetVelocityAndTemperature(
    struct _turb1__GetVelocityAndTemperature* turb1__GetVelocityAndTemperature,	///< Input parameter
    struct _turb1__GetVelocityAndTemperatureResponse*turb1__GetVelocityAndTemperatureResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVelocityGradient                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVelocityGradient" of service binding "TurbulenceServiceSoap".
Retrieve the velocity gradient at a fixed location

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVelocityGradient"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVelocityGradient"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVelocityGradientResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVelocityGradient(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVelocityGradient* turb1__GetVelocityGradient,
    // output parameters:
    struct _turb1__GetVelocityGradientResponse*turb1__GetVelocityGradientResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVelocityGradient(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVelocityGradient* turb1__GetVelocityGradient,
    // output parameters:
    struct _turb1__GetVelocityGradientResponse*turb1__GetVelocityGradientResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVelocityGradient SOAP
//gsoap turb1 service method-style:	GetVelocityGradient document
//gsoap turb1 service method-encoding:	GetVelocityGradient literal
//gsoap turb1 service method-input-action:	GetVelocityGradient http://turbulence.pha.jhu.edu/GetVelocityGradient
//gsoap turb1 service method-output-action:	GetVelocityGradient http://turbulence.pha.jhu.edu/GetVelocityGradientResponse
int __turb1__GetVelocityGradient(
    struct _turb1__GetVelocityGradient* turb1__GetVelocityGradient,	///< Input parameter
    struct _turb1__GetVelocityGradientResponse*turb1__GetVelocityGradientResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetMagneticFieldGradient                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetMagneticFieldGradient" of service binding "TurbulenceServiceSoap".
Retrieve the magnetic field gradient at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetMagneticFieldGradient"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetMagneticFieldGradient"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetMagneticFieldGradientResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetMagneticFieldGradient(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetMagneticFieldGradient* turb1__GetMagneticFieldGradient,
    // output parameters:
    struct _turb1__GetMagneticFieldGradientResponse*turb1__GetMagneticFieldGradientResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetMagneticFieldGradient(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetMagneticFieldGradient* turb1__GetMagneticFieldGradient,
    // output parameters:
    struct _turb1__GetMagneticFieldGradientResponse*turb1__GetMagneticFieldGradientResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetMagneticFieldGradient SOAP
//gsoap turb1 service method-style:	GetMagneticFieldGradient document
//gsoap turb1 service method-encoding:	GetMagneticFieldGradient literal
//gsoap turb1 service method-input-action:	GetMagneticFieldGradient http://turbulence.pha.jhu.edu/GetMagneticFieldGradient
//gsoap turb1 service method-output-action:	GetMagneticFieldGradient http://turbulence.pha.jhu.edu/GetMagneticFieldGradientResponse
int __turb1__GetMagneticFieldGradient(
    struct _turb1__GetMagneticFieldGradient* turb1__GetMagneticFieldGradient,	///< Input parameter
    struct _turb1__GetMagneticFieldGradientResponse*turb1__GetMagneticFieldGradientResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVectorPotentialGradient                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVectorPotentialGradient" of service binding "TurbulenceServiceSoap".
Retrieve the vector potential gradient at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVectorPotentialGradient"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVectorPotentialGradient"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVectorPotentialGradientResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVectorPotentialGradient(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVectorPotentialGradient* turb1__GetVectorPotentialGradient,
    // output parameters:
    struct _turb1__GetVectorPotentialGradientResponse*turb1__GetVectorPotentialGradientResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVectorPotentialGradient(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVectorPotentialGradient* turb1__GetVectorPotentialGradient,
    // output parameters:
    struct _turb1__GetVectorPotentialGradientResponse*turb1__GetVectorPotentialGradientResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVectorPotentialGradient SOAP
//gsoap turb1 service method-style:	GetVectorPotentialGradient document
//gsoap turb1 service method-encoding:	GetVectorPotentialGradient literal
//gsoap turb1 service method-input-action:	GetVectorPotentialGradient http://turbulence.pha.jhu.edu/GetVectorPotentialGradient
//gsoap turb1 service method-output-action:	GetVectorPotentialGradient http://turbulence.pha.jhu.edu/GetVectorPotentialGradientResponse
int __turb1__GetVectorPotentialGradient(
    struct _turb1__GetVectorPotentialGradient* turb1__GetVectorPotentialGradient,	///< Input parameter
    struct _turb1__GetVectorPotentialGradientResponse*turb1__GetVectorPotentialGradientResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetPressureGradient                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetPressureGradient" of service binding "TurbulenceServiceSoap".
Retrieve the pressure gradient at a fixed location

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetPressureGradient"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetPressureGradient"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetPressureGradientResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetPressureGradient(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetPressureGradient* turb1__GetPressureGradient,
    // output parameters:
    struct _turb1__GetPressureGradientResponse*turb1__GetPressureGradientResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetPressureGradient(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetPressureGradient* turb1__GetPressureGradient,
    // output parameters:
    struct _turb1__GetPressureGradientResponse*turb1__GetPressureGradientResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetPressureGradient SOAP
//gsoap turb1 service method-style:	GetPressureGradient document
//gsoap turb1 service method-encoding:	GetPressureGradient literal
//gsoap turb1 service method-input-action:	GetPressureGradient http://turbulence.pha.jhu.edu/GetPressureGradient
//gsoap turb1 service method-output-action:	GetPressureGradient http://turbulence.pha.jhu.edu/GetPressureGradientResponse
int __turb1__GetPressureGradient(
    struct _turb1__GetPressureGradient* turb1__GetPressureGradient,	///< Input parameter
    struct _turb1__GetPressureGradientResponse*turb1__GetPressureGradientResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetDensityGradient                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetDensityGradient" of service binding "TurbulenceServiceSoap".
Retrieve the density gradient at a fixed location

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetDensityGradient"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetDensityGradient"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetDensityGradientResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetDensityGradient(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetDensityGradient*  turb1__GetDensityGradient,
    // output parameters:
    struct _turb1__GetDensityGradientResponse*turb1__GetDensityGradientResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetDensityGradient(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetDensityGradient*  turb1__GetDensityGradient,
    // output parameters:
    struct _turb1__GetDensityGradientResponse*turb1__GetDensityGradientResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetDensityGradient SOAP
//gsoap turb1 service method-style:	GetDensityGradient document
//gsoap turb1 service method-encoding:	GetDensityGradient literal
//gsoap turb1 service method-input-action:	GetDensityGradient http://turbulence.pha.jhu.edu/GetDensityGradient
//gsoap turb1 service method-output-action:	GetDensityGradient http://turbulence.pha.jhu.edu/GetDensityGradientResponse
int __turb1__GetDensityGradient(
    struct _turb1__GetDensityGradient*  turb1__GetDensityGradient,	///< Input parameter
    struct _turb1__GetDensityGradientResponse*turb1__GetDensityGradientResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetTemperatureGradient                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetTemperatureGradient" of service binding "TurbulenceServiceSoap".
Retrieve the temperature gradient at a fixed location

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetTemperatureGradient"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetTemperatureGradient"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetTemperatureGradientResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetTemperatureGradient(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetTemperatureGradient* turb1__GetTemperatureGradient,
    // output parameters:
    struct _turb1__GetTemperatureGradientResponse*turb1__GetTemperatureGradientResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetTemperatureGradient(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetTemperatureGradient* turb1__GetTemperatureGradient,
    // output parameters:
    struct _turb1__GetTemperatureGradientResponse*turb1__GetTemperatureGradientResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetTemperatureGradient SOAP
//gsoap turb1 service method-style:	GetTemperatureGradient document
//gsoap turb1 service method-encoding:	GetTemperatureGradient literal
//gsoap turb1 service method-input-action:	GetTemperatureGradient http://turbulence.pha.jhu.edu/GetTemperatureGradient
//gsoap turb1 service method-output-action:	GetTemperatureGradient http://turbulence.pha.jhu.edu/GetTemperatureGradientResponse
int __turb1__GetTemperatureGradient(
    struct _turb1__GetTemperatureGradient* turb1__GetTemperatureGradient,	///< Input parameter
    struct _turb1__GetTemperatureGradientResponse*turb1__GetTemperatureGradientResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVelocityHessian                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVelocityHessian" of service binding "TurbulenceServiceSoap".
Retrieve the velocity hessian at a fixed location

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVelocityHessian"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVelocityHessian"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVelocityHessianResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVelocityHessian(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVelocityHessian*  turb1__GetVelocityHessian,
    // output parameters:
    struct _turb1__GetVelocityHessianResponse*turb1__GetVelocityHessianResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVelocityHessian(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVelocityHessian*  turb1__GetVelocityHessian,
    // output parameters:
    struct _turb1__GetVelocityHessianResponse*turb1__GetVelocityHessianResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVelocityHessian SOAP
//gsoap turb1 service method-style:	GetVelocityHessian document
//gsoap turb1 service method-encoding:	GetVelocityHessian literal
//gsoap turb1 service method-input-action:	GetVelocityHessian http://turbulence.pha.jhu.edu/GetVelocityHessian
//gsoap turb1 service method-output-action:	GetVelocityHessian http://turbulence.pha.jhu.edu/GetVelocityHessianResponse
int __turb1__GetVelocityHessian(
    struct _turb1__GetVelocityHessian*  turb1__GetVelocityHessian,	///< Input parameter
    struct _turb1__GetVelocityHessianResponse*turb1__GetVelocityHessianResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetMagneticHessian                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetMagneticHessian" of service binding "TurbulenceServiceSoap".
Retrieve the magnetic field hessian at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetMagneticHessian"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetMagneticHessian"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetMagneticHessianResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetMagneticHessian(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetMagneticHessian*  turb1__GetMagneticHessian,
    // output parameters:
    struct _turb1__GetMagneticHessianResponse*turb1__GetMagneticHessianResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetMagneticHessian(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetMagneticHessian*  turb1__GetMagneticHessian,
    // output parameters:
    struct _turb1__GetMagneticHessianResponse*turb1__GetMagneticHessianResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetMagneticHessian SOAP
//gsoap turb1 service method-style:	GetMagneticHessian document
//gsoap turb1 service method-encoding:	GetMagneticHessian literal
//gsoap turb1 service method-input-action:	GetMagneticHessian http://turbulence.pha.jhu.edu/GetMagneticHessian
//gsoap turb1 service method-output-action:	GetMagneticHessian http://turbulence.pha.jhu.edu/GetMagneticHessianResponse
int __turb1__GetMagneticHessian(
    struct _turb1__GetMagneticHessian*  turb1__GetMagneticHessian,	///< Input parameter
    struct _turb1__GetMagneticHessianResponse*turb1__GetMagneticHessianResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVectorPotentialHessian                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVectorPotentialHessian" of service binding "TurbulenceServiceSoap".
Retrieve the vector potential hessian at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVectorPotentialHessian"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVectorPotentialHessian"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVectorPotentialHessianResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVectorPotentialHessian(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVectorPotentialHessian* turb1__GetVectorPotentialHessian,
    // output parameters:
    struct _turb1__GetVectorPotentialHessianResponse*turb1__GetVectorPotentialHessianResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVectorPotentialHessian(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVectorPotentialHessian* turb1__GetVectorPotentialHessian,
    // output parameters:
    struct _turb1__GetVectorPotentialHessianResponse*turb1__GetVectorPotentialHessianResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVectorPotentialHessian SOAP
//gsoap turb1 service method-style:	GetVectorPotentialHessian document
//gsoap turb1 service method-encoding:	GetVectorPotentialHessian literal
//gsoap turb1 service method-input-action:	GetVectorPotentialHessian http://turbulence.pha.jhu.edu/GetVectorPotentialHessian
//gsoap turb1 service method-output-action:	GetVectorPotentialHessian http://turbulence.pha.jhu.edu/GetVectorPotentialHessianResponse
int __turb1__GetVectorPotentialHessian(
    struct _turb1__GetVectorPotentialHessian* turb1__GetVectorPotentialHessian,	///< Input parameter
    struct _turb1__GetVectorPotentialHessianResponse*turb1__GetVectorPotentialHessianResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetPressureHessian                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetPressureHessian" of service binding "TurbulenceServiceSoap".
Retrieve the pressure hessian at a fixed location

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetPressureHessian"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetPressureHessian"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetPressureHessianResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetPressureHessian(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetPressureHessian*  turb1__GetPressureHessian,
    // output parameters:
    struct _turb1__GetPressureHessianResponse*turb1__GetPressureHessianResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetPressureHessian(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetPressureHessian*  turb1__GetPressureHessian,
    // output parameters:
    struct _turb1__GetPressureHessianResponse*turb1__GetPressureHessianResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetPressureHessian SOAP
//gsoap turb1 service method-style:	GetPressureHessian document
//gsoap turb1 service method-encoding:	GetPressureHessian literal
//gsoap turb1 service method-input-action:	GetPressureHessian http://turbulence.pha.jhu.edu/GetPressureHessian
//gsoap turb1 service method-output-action:	GetPressureHessian http://turbulence.pha.jhu.edu/GetPressureHessianResponse
int __turb1__GetPressureHessian(
    struct _turb1__GetPressureHessian*  turb1__GetPressureHessian,	///< Input parameter
    struct _turb1__GetPressureHessianResponse*turb1__GetPressureHessianResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetDensityHessian                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetDensityHessian" of service binding "TurbulenceServiceSoap".
Retrieve the density hessian at a fixed location

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetDensityHessian"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetDensityHessian"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetDensityHessianResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetDensityHessian(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetDensityHessian*   turb1__GetDensityHessian,
    // output parameters:
    struct _turb1__GetDensityHessianResponse*turb1__GetDensityHessianResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetDensityHessian(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetDensityHessian*   turb1__GetDensityHessian,
    // output parameters:
    struct _turb1__GetDensityHessianResponse*turb1__GetDensityHessianResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetDensityHessian SOAP
//gsoap turb1 service method-style:	GetDensityHessian document
//gsoap turb1 service method-encoding:	GetDensityHessian literal
//gsoap turb1 service method-input-action:	GetDensityHessian http://turbulence.pha.jhu.edu/GetDensityHessian
//gsoap turb1 service method-output-action:	GetDensityHessian http://turbulence.pha.jhu.edu/GetDensityHessianResponse
int __turb1__GetDensityHessian(
    struct _turb1__GetDensityHessian*   turb1__GetDensityHessian,	///< Input parameter
    struct _turb1__GetDensityHessianResponse*turb1__GetDensityHessianResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetTemperatureHessian                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetTemperatureHessian" of service binding "TurbulenceServiceSoap".
Retrieve the temperature hessian at a fixed location

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetTemperatureHessian"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetTemperatureHessian"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetTemperatureHessianResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetTemperatureHessian(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetTemperatureHessian* turb1__GetTemperatureHessian,
    // output parameters:
    struct _turb1__GetTemperatureHessianResponse*turb1__GetTemperatureHessianResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetTemperatureHessian(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetTemperatureHessian* turb1__GetTemperatureHessian,
    // output parameters:
    struct _turb1__GetTemperatureHessianResponse*turb1__GetTemperatureHessianResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetTemperatureHessian SOAP
//gsoap turb1 service method-style:	GetTemperatureHessian document
//gsoap turb1 service method-encoding:	GetTemperatureHessian literal
//gsoap turb1 service method-input-action:	GetTemperatureHessian http://turbulence.pha.jhu.edu/GetTemperatureHessian
//gsoap turb1 service method-output-action:	GetTemperatureHessian http://turbulence.pha.jhu.edu/GetTemperatureHessianResponse
int __turb1__GetTemperatureHessian(
    struct _turb1__GetTemperatureHessian* turb1__GetTemperatureHessian,	///< Input parameter
    struct _turb1__GetTemperatureHessianResponse*turb1__GetTemperatureHessianResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVelocityLaplacian                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVelocityLaplacian" of service binding "TurbulenceServiceSoap".
Retrieve the velocity laplacian at a fixed location

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVelocityLaplacian"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVelocityLaplacian"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVelocityLaplacianResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVelocityLaplacian(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVelocityLaplacian* turb1__GetVelocityLaplacian,
    // output parameters:
    struct _turb1__GetVelocityLaplacianResponse*turb1__GetVelocityLaplacianResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVelocityLaplacian(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVelocityLaplacian* turb1__GetVelocityLaplacian,
    // output parameters:
    struct _turb1__GetVelocityLaplacianResponse*turb1__GetVelocityLaplacianResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVelocityLaplacian SOAP
//gsoap turb1 service method-style:	GetVelocityLaplacian document
//gsoap turb1 service method-encoding:	GetVelocityLaplacian literal
//gsoap turb1 service method-input-action:	GetVelocityLaplacian http://turbulence.pha.jhu.edu/GetVelocityLaplacian
//gsoap turb1 service method-output-action:	GetVelocityLaplacian http://turbulence.pha.jhu.edu/GetVelocityLaplacianResponse
int __turb1__GetVelocityLaplacian(
    struct _turb1__GetVelocityLaplacian* turb1__GetVelocityLaplacian,	///< Input parameter
    struct _turb1__GetVelocityLaplacianResponse*turb1__GetVelocityLaplacianResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetMagneticFieldLaplacian                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetMagneticFieldLaplacian" of service binding "TurbulenceServiceSoap".
Retrieve the magnetic field Laplacian at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetMagneticFieldLaplacian"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetMagneticFieldLaplacian"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetMagneticFieldLaplacianResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetMagneticFieldLaplacian(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetMagneticFieldLaplacian* turb1__GetMagneticFieldLaplacian,
    // output parameters:
    struct _turb1__GetMagneticFieldLaplacianResponse*turb1__GetMagneticFieldLaplacianResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetMagneticFieldLaplacian(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetMagneticFieldLaplacian* turb1__GetMagneticFieldLaplacian,
    // output parameters:
    struct _turb1__GetMagneticFieldLaplacianResponse*turb1__GetMagneticFieldLaplacianResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetMagneticFieldLaplacian SOAP
//gsoap turb1 service method-style:	GetMagneticFieldLaplacian document
//gsoap turb1 service method-encoding:	GetMagneticFieldLaplacian literal
//gsoap turb1 service method-input-action:	GetMagneticFieldLaplacian http://turbulence.pha.jhu.edu/GetMagneticFieldLaplacian
//gsoap turb1 service method-output-action:	GetMagneticFieldLaplacian http://turbulence.pha.jhu.edu/GetMagneticFieldLaplacianResponse
int __turb1__GetMagneticFieldLaplacian(
    struct _turb1__GetMagneticFieldLaplacian* turb1__GetMagneticFieldLaplacian,	///< Input parameter
    struct _turb1__GetMagneticFieldLaplacianResponse*turb1__GetMagneticFieldLaplacianResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVectorPotentialLaplacian                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVectorPotentialLaplacian" of service binding "TurbulenceServiceSoap".
Retrieve the vector potential Laplacian at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVectorPotentialLaplacian"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVectorPotentialLaplacian"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVectorPotentialLaplacianResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVectorPotentialLaplacian(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVectorPotentialLaplacian* turb1__GetVectorPotentialLaplacian,
    // output parameters:
    struct _turb1__GetVectorPotentialLaplacianResponse*turb1__GetVectorPotentialLaplacianResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVectorPotentialLaplacian(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVectorPotentialLaplacian* turb1__GetVectorPotentialLaplacian,
    // output parameters:
    struct _turb1__GetVectorPotentialLaplacianResponse*turb1__GetVectorPotentialLaplacianResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVectorPotentialLaplacian SOAP
//gsoap turb1 service method-style:	GetVectorPotentialLaplacian document
//gsoap turb1 service method-encoding:	GetVectorPotentialLaplacian literal
//gsoap turb1 service method-input-action:	GetVectorPotentialLaplacian http://turbulence.pha.jhu.edu/GetVectorPotentialLaplacian
//gsoap turb1 service method-output-action:	GetVectorPotentialLaplacian http://turbulence.pha.jhu.edu/GetVectorPotentialLaplacianResponse
int __turb1__GetVectorPotentialLaplacian(
    struct _turb1__GetVectorPotentialLaplacian* turb1__GetVectorPotentialLaplacian,	///< Input parameter
    struct _turb1__GetVectorPotentialLaplacianResponse*turb1__GetVectorPotentialLaplacianResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetPosition                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetPosition" of service binding "TurbulenceServiceSoap".
Fluid particle tracking using a task parallel evaluation approach inside the database
engine.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetPosition"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetPosition"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetPositionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetPosition(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetPosition*         turb1__GetPosition,
    // output parameters:
    struct _turb1__GetPositionResponse *turb1__GetPositionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetPosition(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetPosition*         turb1__GetPosition,
    // output parameters:
    struct _turb1__GetPositionResponse *turb1__GetPositionResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetPosition SOAP
//gsoap turb1 service method-style:	GetPosition document
//gsoap turb1 service method-encoding:	GetPosition literal
//gsoap turb1 service method-input-action:	GetPosition http://turbulence.pha.jhu.edu/GetPosition
//gsoap turb1 service method-output-action:	GetPosition http://turbulence.pha.jhu.edu/GetPositionResponse
int __turb1__GetPosition(
    struct _turb1__GetPosition*         turb1__GetPosition,	///< Input parameter
    struct _turb1__GetPositionResponse *turb1__GetPositionResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetThreshold                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetThreshold" of service binding "TurbulenceServiceSoap".
GetThreshold of the specified field.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetThreshold"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetThreshold"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetThresholdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetThreshold(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetThreshold*        turb1__GetThreshold,
    // output parameters:
    struct _turb1__GetThresholdResponse*turb1__GetThresholdResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetThreshold(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetThreshold*        turb1__GetThreshold,
    // output parameters:
    struct _turb1__GetThresholdResponse*turb1__GetThresholdResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetThreshold SOAP
//gsoap turb1 service method-style:	GetThreshold document
//gsoap turb1 service method-encoding:	GetThreshold literal
//gsoap turb1 service method-input-action:	GetThreshold http://turbulence.pha.jhu.edu/GetThreshold
//gsoap turb1 service method-output-action:	GetThreshold http://turbulence.pha.jhu.edu/GetThresholdResponse
int __turb1__GetThreshold(
    struct _turb1__GetThreshold*        turb1__GetThreshold,	///< Input parameter
    struct _turb1__GetThresholdResponse*turb1__GetThresholdResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetForce                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetForce" of service binding "TurbulenceServiceSoap".
Retrieve the force for a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetForce"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetForce"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetForceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetForce(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetForce*            turb1__GetForce,
    // output parameters:
    struct _turb1__GetForceResponse    *turb1__GetForceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetForce(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetForce*            turb1__GetForce,
    // output parameters:
    struct _turb1__GetForceResponse    *turb1__GetForceResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetForce SOAP
//gsoap turb1 service method-style:	GetForce document
//gsoap turb1 service method-encoding:	GetForce literal
//gsoap turb1 service method-input-action:	GetForce http://turbulence.pha.jhu.edu/GetForce
//gsoap turb1 service method-output-action:	GetForce http://turbulence.pha.jhu.edu/GetForceResponse
int __turb1__GetForce(
    struct _turb1__GetForce*            turb1__GetForce,	///< Input parameter
    struct _turb1__GetForceResponse    *turb1__GetForceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetInvariant                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetInvariant" of service binding "TurbulenceServiceSoap".
Retrieve the invariants of velocity gradient at a fixed location

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetInvariant"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetInvariant"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetInvariantResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetInvariant(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetInvariant*        turb1__GetInvariant,
    // output parameters:
    struct _turb1__GetInvariantResponse*turb1__GetInvariantResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetInvariant(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetInvariant*        turb1__GetInvariant,
    // output parameters:
    struct _turb1__GetInvariantResponse*turb1__GetInvariantResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetInvariant SOAP
//gsoap turb1 service method-style:	GetInvariant document
//gsoap turb1 service method-encoding:	GetInvariant literal
//gsoap turb1 service method-input-action:	GetInvariant http://turbulence.pha.jhu.edu/GetInvariant
//gsoap turb1 service method-output-action:	GetInvariant http://turbulence.pha.jhu.edu/GetInvariantResponse
int __turb1__GetInvariant(
    struct _turb1__GetInvariant*        turb1__GetInvariant,	///< Input parameter
    struct _turb1__GetInvariantResponse*turb1__GetInvariantResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetBoxFilter                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetBoxFilter" of service binding "TurbulenceServiceSoap".
GetBoxFilter of the specified field; uses workload density to decide how to evaluate.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetBoxFilter"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetBoxFilter"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetBoxFilterResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetBoxFilter(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetBoxFilter*        turb1__GetBoxFilter,
    // output parameters:
    struct _turb1__GetBoxFilterResponse*turb1__GetBoxFilterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetBoxFilter(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetBoxFilter*        turb1__GetBoxFilter,
    // output parameters:
    struct _turb1__GetBoxFilterResponse*turb1__GetBoxFilterResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetBoxFilter SOAP
//gsoap turb1 service method-style:	GetBoxFilter document
//gsoap turb1 service method-encoding:	GetBoxFilter literal
//gsoap turb1 service method-input-action:	GetBoxFilter http://turbulence.pha.jhu.edu/GetBoxFilter
//gsoap turb1 service method-output-action:	GetBoxFilter http://turbulence.pha.jhu.edu/GetBoxFilterResponse
int __turb1__GetBoxFilter(
    struct _turb1__GetBoxFilter*        turb1__GetBoxFilter,	///< Input parameter
    struct _turb1__GetBoxFilterResponse*turb1__GetBoxFilterResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetBoxFilterSGS                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetBoxFilterSGS" of service binding "TurbulenceServiceSoap".
Retrieve the SGS symmetric tensor for a single vector field. Also, used
                            when two identical fields are specified (e.g. uu or
bb).

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetBoxFilterSGS"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetBoxFilterSGS"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetBoxFilterSGSResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetBoxFilterSGS(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetBoxFilterSGS*     turb1__GetBoxFilterSGS,
    // output parameters:
    struct _turb1__GetBoxFilterSGSResponse*turb1__GetBoxFilterSGSResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetBoxFilterSGS(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetBoxFilterSGS*     turb1__GetBoxFilterSGS,
    // output parameters:
    struct _turb1__GetBoxFilterSGSResponse*turb1__GetBoxFilterSGSResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetBoxFilterSGS SOAP
//gsoap turb1 service method-style:	GetBoxFilterSGS document
//gsoap turb1 service method-encoding:	GetBoxFilterSGS literal
//gsoap turb1 service method-input-action:	GetBoxFilterSGS http://turbulence.pha.jhu.edu/GetBoxFilterSGS
//gsoap turb1 service method-output-action:	GetBoxFilterSGS http://turbulence.pha.jhu.edu/GetBoxFilterSGSResponse
int __turb1__GetBoxFilterSGS(
    struct _turb1__GetBoxFilterSGS*     turb1__GetBoxFilterSGS,	///< Input parameter
    struct _turb1__GetBoxFilterSGSResponse*turb1__GetBoxFilterSGSResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetBoxFilterSGSsymtensor                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetBoxFilterSGSsymtensor" of service binding "TurbulenceServiceSoap".
Retrieve the SGS symmetric tensor for a single vector field. Also, used
                            when two identical fields are specified (e.g. uu or
bb).

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetBoxFilterSGSsymtensor"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetBoxFilterSGSsymtensor"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetBoxFilterSGSsymtensorResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetBoxFilterSGSsymtensor(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetBoxFilterSGSsymtensor* turb1__GetBoxFilterSGSsymtensor,
    // output parameters:
    struct _turb1__GetBoxFilterSGSsymtensorResponse*turb1__GetBoxFilterSGSsymtensorResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetBoxFilterSGSsymtensor(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetBoxFilterSGSsymtensor* turb1__GetBoxFilterSGSsymtensor,
    // output parameters:
    struct _turb1__GetBoxFilterSGSsymtensorResponse*turb1__GetBoxFilterSGSsymtensorResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetBoxFilterSGSsymtensor SOAP
//gsoap turb1 service method-style:	GetBoxFilterSGSsymtensor document
//gsoap turb1 service method-encoding:	GetBoxFilterSGSsymtensor literal
//gsoap turb1 service method-input-action:	GetBoxFilterSGSsymtensor http://turbulence.pha.jhu.edu/GetBoxFilterSGSsymtensor
//gsoap turb1 service method-output-action:	GetBoxFilterSGSsymtensor http://turbulence.pha.jhu.edu/GetBoxFilterSGSsymtensorResponse
int __turb1__GetBoxFilterSGSsymtensor(
    struct _turb1__GetBoxFilterSGSsymtensor* turb1__GetBoxFilterSGSsymtensor,	///< Input parameter
    struct _turb1__GetBoxFilterSGSsymtensorResponse*turb1__GetBoxFilterSGSsymtensorResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetBoxFilterSGStensor                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetBoxFilterSGStensor" of service binding "TurbulenceServiceSoap".
Retrieve the SGS tensor for a combination of two vector fields(e.g. ub or ba).

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetBoxFilterSGStensor"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetBoxFilterSGStensor"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetBoxFilterSGStensorResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetBoxFilterSGStensor(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetBoxFilterSGStensor* turb1__GetBoxFilterSGStensor,
    // output parameters:
    struct _turb1__GetBoxFilterSGStensorResponse*turb1__GetBoxFilterSGStensorResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetBoxFilterSGStensor(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetBoxFilterSGStensor* turb1__GetBoxFilterSGStensor,
    // output parameters:
    struct _turb1__GetBoxFilterSGStensorResponse*turb1__GetBoxFilterSGStensorResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetBoxFilterSGStensor SOAP
//gsoap turb1 service method-style:	GetBoxFilterSGStensor document
//gsoap turb1 service method-encoding:	GetBoxFilterSGStensor literal
//gsoap turb1 service method-input-action:	GetBoxFilterSGStensor http://turbulence.pha.jhu.edu/GetBoxFilterSGStensor
//gsoap turb1 service method-output-action:	GetBoxFilterSGStensor http://turbulence.pha.jhu.edu/GetBoxFilterSGStensorResponse
int __turb1__GetBoxFilterSGStensor(
    struct _turb1__GetBoxFilterSGStensor* turb1__GetBoxFilterSGStensor,	///< Input parameter
    struct _turb1__GetBoxFilterSGStensorResponse*turb1__GetBoxFilterSGStensorResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetBoxFilterSGSvector                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetBoxFilterSGSvector" of service binding "TurbulenceServiceSoap".
Retrieve the SGS vector for a combination of a vector and a scalar field(e.g. up
or bp).

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetBoxFilterSGSvector"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetBoxFilterSGSvector"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetBoxFilterSGSvectorResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetBoxFilterSGSvector(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetBoxFilterSGSvector* turb1__GetBoxFilterSGSvector,
    // output parameters:
    struct _turb1__GetBoxFilterSGSvectorResponse*turb1__GetBoxFilterSGSvectorResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetBoxFilterSGSvector(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetBoxFilterSGSvector* turb1__GetBoxFilterSGSvector,
    // output parameters:
    struct _turb1__GetBoxFilterSGSvectorResponse*turb1__GetBoxFilterSGSvectorResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetBoxFilterSGSvector SOAP
//gsoap turb1 service method-style:	GetBoxFilterSGSvector document
//gsoap turb1 service method-encoding:	GetBoxFilterSGSvector literal
//gsoap turb1 service method-input-action:	GetBoxFilterSGSvector http://turbulence.pha.jhu.edu/GetBoxFilterSGSvector
//gsoap turb1 service method-output-action:	GetBoxFilterSGSvector http://turbulence.pha.jhu.edu/GetBoxFilterSGSvectorResponse
int __turb1__GetBoxFilterSGSvector(
    struct _turb1__GetBoxFilterSGSvector* turb1__GetBoxFilterSGSvector,	///< Input parameter
    struct _turb1__GetBoxFilterSGSvectorResponse*turb1__GetBoxFilterSGSvectorResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetBoxFilterSGSscalar                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetBoxFilterSGSscalar" of service binding "TurbulenceServiceSoap".
Retrieve the SGS scalar for a combination of two scalar fields(e.g. pp or pd).

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetBoxFilterSGSscalar"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetBoxFilterSGSscalar"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetBoxFilterSGSscalarResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetBoxFilterSGSscalar(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetBoxFilterSGSscalar* turb1__GetBoxFilterSGSscalar,
    // output parameters:
    struct _turb1__GetBoxFilterSGSscalarResponse*turb1__GetBoxFilterSGSscalarResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetBoxFilterSGSscalar(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetBoxFilterSGSscalar* turb1__GetBoxFilterSGSscalar,
    // output parameters:
    struct _turb1__GetBoxFilterSGSscalarResponse*turb1__GetBoxFilterSGSscalarResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetBoxFilterSGSscalar SOAP
//gsoap turb1 service method-style:	GetBoxFilterSGSscalar document
//gsoap turb1 service method-encoding:	GetBoxFilterSGSscalar literal
//gsoap turb1 service method-input-action:	GetBoxFilterSGSscalar http://turbulence.pha.jhu.edu/GetBoxFilterSGSscalar
//gsoap turb1 service method-output-action:	GetBoxFilterSGSscalar http://turbulence.pha.jhu.edu/GetBoxFilterSGSscalarResponse
int __turb1__GetBoxFilterSGSscalar(
    struct _turb1__GetBoxFilterSGSscalar* turb1__GetBoxFilterSGSscalar,	///< Input parameter
    struct _turb1__GetBoxFilterSGSscalarResponse*turb1__GetBoxFilterSGSscalarResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetBoxFilterGradient                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetBoxFilterGradient" of service binding "TurbulenceServiceSoap".
GetBoxFilter of the specified field; uses workload density to decide how to evaluate.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetBoxFilterGradient"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetBoxFilterGradient"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetBoxFilterGradientResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetBoxFilterGradient(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetBoxFilterGradient* turb1__GetBoxFilterGradient,
    // output parameters:
    struct _turb1__GetBoxFilterGradientResponse*turb1__GetBoxFilterGradientResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetBoxFilterGradient(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetBoxFilterGradient* turb1__GetBoxFilterGradient,
    // output parameters:
    struct _turb1__GetBoxFilterGradientResponse*turb1__GetBoxFilterGradientResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetBoxFilterGradient SOAP
//gsoap turb1 service method-style:	GetBoxFilterGradient document
//gsoap turb1 service method-encoding:	GetBoxFilterGradient literal
//gsoap turb1 service method-input-action:	GetBoxFilterGradient http://turbulence.pha.jhu.edu/GetBoxFilterGradient
//gsoap turb1 service method-output-action:	GetBoxFilterGradient http://turbulence.pha.jhu.edu/GetBoxFilterGradientResponse
int __turb1__GetBoxFilterGradient(
    struct _turb1__GetBoxFilterGradient* turb1__GetBoxFilterGradient,	///< Input parameter
    struct _turb1__GetBoxFilterGradientResponse*turb1__GetBoxFilterGradientResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetLaplacianOfGradient                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetLaplacianOfGradient" of service binding "TurbulenceServiceSoap".
Retrieve the laplacian of the gradient of the specified field at a number of points
for a given time. Development version, not intended for production use!

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetLaplacianOfGradient"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetLaplacianOfGradient"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetLaplacianOfGradientResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetLaplacianOfGradient(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetLaplacianOfGradient* turb1__GetLaplacianOfGradient,
    // output parameters:
    struct _turb1__GetLaplacianOfGradientResponse*turb1__GetLaplacianOfGradientResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetLaplacianOfGradient(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetLaplacianOfGradient* turb1__GetLaplacianOfGradient,
    // output parameters:
    struct _turb1__GetLaplacianOfGradientResponse*turb1__GetLaplacianOfGradientResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetLaplacianOfGradient SOAP
//gsoap turb1 service method-style:	GetLaplacianOfGradient document
//gsoap turb1 service method-encoding:	GetLaplacianOfGradient literal
//gsoap turb1 service method-input-action:	GetLaplacianOfGradient http://turbulence.pha.jhu.edu/GetLaplacianOfGradient
//gsoap turb1 service method-output-action:	GetLaplacianOfGradient http://turbulence.pha.jhu.edu/GetLaplacianOfGradientResponse
int __turb1__GetLaplacianOfGradient(
    struct _turb1__GetLaplacianOfGradient* turb1__GetLaplacianOfGradient,	///< Input parameter
    struct _turb1__GetLaplacianOfGradientResponse*turb1__GetLaplacianOfGradientResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVelocityBatch                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVelocityBatch" of service binding "TurbulenceServiceSoap".
Spatially interpolate the velocity at a number of points for a given time (allow
batching).

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVelocityBatch"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVelocityBatch"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVelocityBatchResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVelocityBatch(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVelocityBatch*    turb1__GetVelocityBatch,
    // output parameters:
    struct _turb1__GetVelocityBatchResponse*turb1__GetVelocityBatchResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVelocityBatch(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVelocityBatch*    turb1__GetVelocityBatch,
    // output parameters:
    struct _turb1__GetVelocityBatchResponse*turb1__GetVelocityBatchResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVelocityBatch SOAP
//gsoap turb1 service method-style:	GetVelocityBatch document
//gsoap turb1 service method-encoding:	GetVelocityBatch literal
//gsoap turb1 service method-input-action:	GetVelocityBatch http://turbulence.pha.jhu.edu/GetVelocityBatch
//gsoap turb1 service method-output-action:	GetVelocityBatch http://turbulence.pha.jhu.edu/GetVelocityBatchResponse
int __turb1__GetVelocityBatch(
    struct _turb1__GetVelocityBatch*    turb1__GetVelocityBatch,	///< Input parameter
    struct _turb1__GetVelocityBatchResponse*turb1__GetVelocityBatchResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetRawVelocity                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetRawVelocity" of service binding "TurbulenceServiceSoap".
Get a cube of the raw velocity data with the given width cornered at the specified
coordinates for the given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetRawVelocity"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetRawVelocity"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetRawVelocityResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetRawVelocity(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetRawVelocity*      turb1__GetRawVelocity,
    // output parameters:
    struct _turb1__GetRawVelocityResponse*turb1__GetRawVelocityResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetRawVelocity(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetRawVelocity*      turb1__GetRawVelocity,
    // output parameters:
    struct _turb1__GetRawVelocityResponse*turb1__GetRawVelocityResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetRawVelocity SOAP
//gsoap turb1 service method-style:	GetRawVelocity document
//gsoap turb1 service method-encoding:	GetRawVelocity literal
//gsoap turb1 service method-input-action:	GetRawVelocity http://turbulence.pha.jhu.edu/GetRawVelocity
//gsoap turb1 service method-output-action:	GetRawVelocity http://turbulence.pha.jhu.edu/GetRawVelocityResponse
int __turb1__GetRawVelocity(
    struct _turb1__GetRawVelocity*      turb1__GetRawVelocity,	///< Input parameter
    struct _turb1__GetRawVelocityResponse*turb1__GetRawVelocityResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetRawMagneticField                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetRawMagneticField" of service binding "TurbulenceServiceSoap".
Get a cube of the raw magnetic field data with the given width cornered at the specified
coordinates for the given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetRawMagneticField"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetRawMagneticField"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetRawMagneticFieldResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetRawMagneticField(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetRawMagneticField* turb1__GetRawMagneticField,
    // output parameters:
    struct _turb1__GetRawMagneticFieldResponse*turb1__GetRawMagneticFieldResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetRawMagneticField(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetRawMagneticField* turb1__GetRawMagneticField,
    // output parameters:
    struct _turb1__GetRawMagneticFieldResponse*turb1__GetRawMagneticFieldResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetRawMagneticField SOAP
//gsoap turb1 service method-style:	GetRawMagneticField document
//gsoap turb1 service method-encoding:	GetRawMagneticField literal
//gsoap turb1 service method-input-action:	GetRawMagneticField http://turbulence.pha.jhu.edu/GetRawMagneticField
//gsoap turb1 service method-output-action:	GetRawMagneticField http://turbulence.pha.jhu.edu/GetRawMagneticFieldResponse
int __turb1__GetRawMagneticField(
    struct _turb1__GetRawMagneticField* turb1__GetRawMagneticField,	///< Input parameter
    struct _turb1__GetRawMagneticFieldResponse*turb1__GetRawMagneticFieldResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetRawVectorPotential                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetRawVectorPotential" of service binding "TurbulenceServiceSoap".
Get a cube of the raw vector potential data with the given width cornered at the
specified coordinates for the given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetRawVectorPotential"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetRawVectorPotential"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetRawVectorPotentialResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetRawVectorPotential(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetRawVectorPotential* turb1__GetRawVectorPotential,
    // output parameters:
    struct _turb1__GetRawVectorPotentialResponse*turb1__GetRawVectorPotentialResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetRawVectorPotential(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetRawVectorPotential* turb1__GetRawVectorPotential,
    // output parameters:
    struct _turb1__GetRawVectorPotentialResponse*turb1__GetRawVectorPotentialResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetRawVectorPotential SOAP
//gsoap turb1 service method-style:	GetRawVectorPotential document
//gsoap turb1 service method-encoding:	GetRawVectorPotential literal
//gsoap turb1 service method-input-action:	GetRawVectorPotential http://turbulence.pha.jhu.edu/GetRawVectorPotential
//gsoap turb1 service method-output-action:	GetRawVectorPotential http://turbulence.pha.jhu.edu/GetRawVectorPotentialResponse
int __turb1__GetRawVectorPotential(
    struct _turb1__GetRawVectorPotential* turb1__GetRawVectorPotential,	///< Input parameter
    struct _turb1__GetRawVectorPotentialResponse*turb1__GetRawVectorPotentialResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetRawPressure                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetRawPressure" of service binding "TurbulenceServiceSoap".
Get a cube of the raw pressure data with the given width cornered at the specified
coordinates for the given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetRawPressure"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetRawPressure"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetRawPressureResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetRawPressure(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetRawPressure*      turb1__GetRawPressure,
    // output parameters:
    struct _turb1__GetRawPressureResponse*turb1__GetRawPressureResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetRawPressure(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetRawPressure*      turb1__GetRawPressure,
    // output parameters:
    struct _turb1__GetRawPressureResponse*turb1__GetRawPressureResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetRawPressure SOAP
//gsoap turb1 service method-style:	GetRawPressure document
//gsoap turb1 service method-encoding:	GetRawPressure literal
//gsoap turb1 service method-input-action:	GetRawPressure http://turbulence.pha.jhu.edu/GetRawPressure
//gsoap turb1 service method-output-action:	GetRawPressure http://turbulence.pha.jhu.edu/GetRawPressureResponse
int __turb1__GetRawPressure(
    struct _turb1__GetRawPressure*      turb1__GetRawPressure,	///< Input parameter
    struct _turb1__GetRawPressureResponse*turb1__GetRawPressureResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetRawDensity                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetRawDensity" of service binding "TurbulenceServiceSoap".
Get a cube of the raw density data with the given width cornered at the specified
coordinates for the given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetRawDensity"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetRawDensity"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetRawDensityResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetRawDensity(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetRawDensity*       turb1__GetRawDensity,
    // output parameters:
    struct _turb1__GetRawDensityResponse*turb1__GetRawDensityResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetRawDensity(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetRawDensity*       turb1__GetRawDensity,
    // output parameters:
    struct _turb1__GetRawDensityResponse*turb1__GetRawDensityResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetRawDensity SOAP
//gsoap turb1 service method-style:	GetRawDensity document
//gsoap turb1 service method-encoding:	GetRawDensity literal
//gsoap turb1 service method-input-action:	GetRawDensity http://turbulence.pha.jhu.edu/GetRawDensity
//gsoap turb1 service method-output-action:	GetRawDensity http://turbulence.pha.jhu.edu/GetRawDensityResponse
int __turb1__GetRawDensity(
    struct _turb1__GetRawDensity*       turb1__GetRawDensity,	///< Input parameter
    struct _turb1__GetRawDensityResponse*turb1__GetRawDensityResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetRawTemperature                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetRawTemperature" of service binding "TurbulenceServiceSoap".
Get a cube of the raw density data with the given width cornered at the specified
coordinates for the given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetRawTemperature"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetRawTemperature"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetRawTemperatureResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetRawTemperature(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetRawTemperature*   turb1__GetRawTemperature,
    // output parameters:
    struct _turb1__GetRawTemperatureResponse*turb1__GetRawTemperatureResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetRawTemperature(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetRawTemperature*   turb1__GetRawTemperature,
    // output parameters:
    struct _turb1__GetRawTemperatureResponse*turb1__GetRawTemperatureResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetRawTemperature SOAP
//gsoap turb1 service method-style:	GetRawTemperature document
//gsoap turb1 service method-encoding:	GetRawTemperature literal
//gsoap turb1 service method-input-action:	GetRawTemperature http://turbulence.pha.jhu.edu/GetRawTemperature
//gsoap turb1 service method-output-action:	GetRawTemperature http://turbulence.pha.jhu.edu/GetRawTemperatureResponse
int __turb1__GetRawTemperature(
    struct _turb1__GetRawTemperature*   turb1__GetRawTemperature,	///< Input parameter
    struct _turb1__GetRawTemperatureResponse*turb1__GetRawTemperatureResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetAnyCutoutWeb                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetAnyCutoutWeb" of service binding "TurbulenceServiceSoap".
Retrieve the laplacian of the gradient of the specified field at a number of points
for a given time. Development version, not intended for production use!

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetAnyCutoutWeb"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetAnyCutoutWeb"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetAnyCutoutWebResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetAnyCutoutWeb(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetAnyCutoutWeb*     turb1__GetAnyCutoutWeb,
    // output parameters:
    struct _turb1__GetAnyCutoutWebResponse*turb1__GetAnyCutoutWebResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetAnyCutoutWeb(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetAnyCutoutWeb*     turb1__GetAnyCutoutWeb,
    // output parameters:
    struct _turb1__GetAnyCutoutWebResponse*turb1__GetAnyCutoutWebResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetAnyCutoutWeb SOAP
//gsoap turb1 service method-style:	GetAnyCutoutWeb document
//gsoap turb1 service method-encoding:	GetAnyCutoutWeb literal
//gsoap turb1 service method-input-action:	GetAnyCutoutWeb http://turbulence.pha.jhu.edu/GetAnyCutoutWeb
//gsoap turb1 service method-output-action:	GetAnyCutoutWeb http://turbulence.pha.jhu.edu/GetAnyCutoutWebResponse
int __turb1__GetAnyCutoutWeb(
    struct _turb1__GetAnyCutoutWeb*     turb1__GetAnyCutoutWeb,	///< Input parameter
    struct _turb1__GetAnyCutoutWebResponse*turb1__GetAnyCutoutWebResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetData_USCOREPython                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetData_USCOREPython" of service binding "TurbulenceServiceSoap".
Spatially interpolate the pressure at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetData_Python"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetData_Python"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetData_PythonResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetData_USCOREPython(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetData_USCOREPython* turb1__GetData_USCOREPython,
    // output parameters:
    struct _turb1__GetData_USCOREPythonResponse*turb1__GetData_USCOREPythonResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetData_USCOREPython(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetData_USCOREPython* turb1__GetData_USCOREPython,
    // output parameters:
    struct _turb1__GetData_USCOREPythonResponse*turb1__GetData_USCOREPythonResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetData_USCOREPython SOAP
//gsoap turb1 service method-style:	GetData_USCOREPython document
//gsoap turb1 service method-encoding:	GetData_USCOREPython literal
//gsoap turb1 service method-input-action:	GetData_USCOREPython http://turbulence.pha.jhu.edu/GetData_Python
//gsoap turb1 service method-output-action:	GetData_USCOREPython http://turbulence.pha.jhu.edu/GetData_PythonResponse
int __turb1__GetData_USCOREPython(
    struct _turb1__GetData_USCOREPython* turb1__GetData_USCOREPython,	///< Input parameter
    struct _turb1__GetData_USCOREPythonResponse*turb1__GetData_USCOREPythonResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetFilter_USCOREPython                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetFilter_USCOREPython" of service binding "TurbulenceServiceSoap".
Spatially interpolate the pressure at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetFilter_Python"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetFilter_Python"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetFilter_PythonResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetFilter_USCOREPython(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetFilter_USCOREPython* turb1__GetFilter_USCOREPython,
    // output parameters:
    struct _turb1__GetFilter_USCOREPythonResponse*turb1__GetFilter_USCOREPythonResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetFilter_USCOREPython(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetFilter_USCOREPython* turb1__GetFilter_USCOREPython,
    // output parameters:
    struct _turb1__GetFilter_USCOREPythonResponse*turb1__GetFilter_USCOREPythonResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetFilter_USCOREPython SOAP
//gsoap turb1 service method-style:	GetFilter_USCOREPython document
//gsoap turb1 service method-encoding:	GetFilter_USCOREPython literal
//gsoap turb1 service method-input-action:	GetFilter_USCOREPython http://turbulence.pha.jhu.edu/GetFilter_Python
//gsoap turb1 service method-output-action:	GetFilter_USCOREPython http://turbulence.pha.jhu.edu/GetFilter_PythonResponse
int __turb1__GetFilter_USCOREPython(
    struct _turb1__GetFilter_USCOREPython* turb1__GetFilter_USCOREPython,	///< Input parameter
    struct _turb1__GetFilter_USCOREPythonResponse*turb1__GetFilter_USCOREPythonResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetPosition_USCOREPython                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetPosition_USCOREPython" of service binding "TurbulenceServiceSoap".
Spatially interpolate the pressure at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetPosition_Python"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetPosition_Python"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetPosition_PythonResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetPosition_USCOREPython(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetPosition_USCOREPython* turb1__GetPosition_USCOREPython,
    // output parameters:
    struct _turb1__GetPosition_USCOREPythonResponse*turb1__GetPosition_USCOREPythonResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetPosition_USCOREPython(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetPosition_USCOREPython* turb1__GetPosition_USCOREPython,
    // output parameters:
    struct _turb1__GetPosition_USCOREPythonResponse*turb1__GetPosition_USCOREPythonResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetPosition_USCOREPython SOAP
//gsoap turb1 service method-style:	GetPosition_USCOREPython document
//gsoap turb1 service method-encoding:	GetPosition_USCOREPython literal
//gsoap turb1 service method-input-action:	GetPosition_USCOREPython http://turbulence.pha.jhu.edu/GetPosition_Python
//gsoap turb1 service method-output-action:	GetPosition_USCOREPython http://turbulence.pha.jhu.edu/GetPosition_PythonResponse
int __turb1__GetPosition_USCOREPython(
    struct _turb1__GetPosition_USCOREPython* turb1__GetPosition_USCOREPython,	///< Input parameter
    struct _turb1__GetPosition_USCOREPythonResponse*turb1__GetPosition_USCOREPythonResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetThreshold_USCOREPython                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetThreshold_USCOREPython" of service binding "TurbulenceServiceSoap".
Spatially interpolate the pressure at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetThreshold_Python"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetThreshold_Python"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetThreshold_PythonResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetThreshold_USCOREPython(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetThreshold_USCOREPython* turb1__GetThreshold_USCOREPython,
    // output parameters:
    struct _turb1__GetThreshold_USCOREPythonResponse*turb1__GetThreshold_USCOREPythonResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetThreshold_USCOREPython(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetThreshold_USCOREPython* turb1__GetThreshold_USCOREPython,
    // output parameters:
    struct _turb1__GetThreshold_USCOREPythonResponse*turb1__GetThreshold_USCOREPythonResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetThreshold_USCOREPython SOAP
//gsoap turb1 service method-style:	GetThreshold_USCOREPython document
//gsoap turb1 service method-encoding:	GetThreshold_USCOREPython literal
//gsoap turb1 service method-input-action:	GetThreshold_USCOREPython http://turbulence.pha.jhu.edu/GetThreshold_Python
//gsoap turb1 service method-output-action:	GetThreshold_USCOREPython http://turbulence.pha.jhu.edu/GetThreshold_PythonResponse
int __turb1__GetThreshold_USCOREPython(
    struct _turb1__GetThreshold_USCOREPython* turb1__GetThreshold_USCOREPython,	///< Input parameter
    struct _turb1__GetThreshold_USCOREPythonResponse*turb1__GetThreshold_USCOREPythonResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__NullOp_                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__NullOp_" of service binding "TurbulenceServiceSoap".
Perform a null operation -- for testing throughput

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/NullOp"

  - Addressing input action: "http://turbulence.pha.jhu.edu/NullOp"

  - Addressing output action: "http://turbulence.pha.jhu.edu/NullOpResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__NullOp_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__NullOp*              turb1__NullOp,
    // output parameters:
    struct _turb1__NullOpResponse      *turb1__NullOpResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__NullOp_(
    struct soap *soap,
    // input parameters:
    struct _turb1__NullOp*              turb1__NullOp,
    // output parameters:
    struct _turb1__NullOpResponse      *turb1__NullOpResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	NullOp_ SOAP
//gsoap turb1 service method-style:	NullOp_ document
//gsoap turb1 service method-encoding:	NullOp_ literal
//gsoap turb1 service method-input-action:	NullOp_ http://turbulence.pha.jhu.edu/NullOp
//gsoap turb1 service method-output-action:	NullOp_ http://turbulence.pha.jhu.edu/NullOpResponse
int __turb1__NullOp_(
    struct _turb1__NullOp*              turb1__NullOp,	///< Input parameter
    struct _turb1__NullOpResponse      *turb1__NullOpResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVelocity_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVelocity_" of service binding "TurbulenceServiceSoap".
Spatially interpolate the velocity at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVelocity"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVelocity"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVelocityResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVelocity_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVelocity*         turb1__GetVelocity,
    // output parameters:
    struct _turb1__GetVelocityResponse *turb1__GetVelocityResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVelocity_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVelocity*         turb1__GetVelocity,
    // output parameters:
    struct _turb1__GetVelocityResponse *turb1__GetVelocityResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVelocity_ SOAP
//gsoap turb1 service method-style:	GetVelocity_ document
//gsoap turb1 service method-encoding:	GetVelocity_ literal
//gsoap turb1 service method-input-action:	GetVelocity_ http://turbulence.pha.jhu.edu/GetVelocity
//gsoap turb1 service method-output-action:	GetVelocity_ http://turbulence.pha.jhu.edu/GetVelocityResponse
int __turb1__GetVelocity_(
    struct _turb1__GetVelocity*         turb1__GetVelocity,	///< Input parameter
    struct _turb1__GetVelocityResponse *turb1__GetVelocityResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetMagneticField_                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetMagneticField_" of service binding "TurbulenceServiceSoap".
Spatially interpolate the magnetic field at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetMagneticField"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetMagneticField"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetMagneticFieldResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetMagneticField_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetMagneticField*    turb1__GetMagneticField,
    // output parameters:
    struct _turb1__GetMagneticFieldResponse*turb1__GetMagneticFieldResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetMagneticField_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetMagneticField*    turb1__GetMagneticField,
    // output parameters:
    struct _turb1__GetMagneticFieldResponse*turb1__GetMagneticFieldResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetMagneticField_ SOAP
//gsoap turb1 service method-style:	GetMagneticField_ document
//gsoap turb1 service method-encoding:	GetMagneticField_ literal
//gsoap turb1 service method-input-action:	GetMagneticField_ http://turbulence.pha.jhu.edu/GetMagneticField
//gsoap turb1 service method-output-action:	GetMagneticField_ http://turbulence.pha.jhu.edu/GetMagneticFieldResponse
int __turb1__GetMagneticField_(
    struct _turb1__GetMagneticField*    turb1__GetMagneticField,	///< Input parameter
    struct _turb1__GetMagneticFieldResponse*turb1__GetMagneticFieldResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVectorPotential_                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVectorPotential_" of service binding "TurbulenceServiceSoap".
Spatially interpolate the magnetic field at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVectorPotential"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVectorPotential"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVectorPotentialResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVectorPotential_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVectorPotential*  turb1__GetVectorPotential,
    // output parameters:
    struct _turb1__GetVectorPotentialResponse*turb1__GetVectorPotentialResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVectorPotential_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVectorPotential*  turb1__GetVectorPotential,
    // output parameters:
    struct _turb1__GetVectorPotentialResponse*turb1__GetVectorPotentialResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVectorPotential_ SOAP
//gsoap turb1 service method-style:	GetVectorPotential_ document
//gsoap turb1 service method-encoding:	GetVectorPotential_ literal
//gsoap turb1 service method-input-action:	GetVectorPotential_ http://turbulence.pha.jhu.edu/GetVectorPotential
//gsoap turb1 service method-output-action:	GetVectorPotential_ http://turbulence.pha.jhu.edu/GetVectorPotentialResponse
int __turb1__GetVectorPotential_(
    struct _turb1__GetVectorPotential*  turb1__GetVectorPotential,	///< Input parameter
    struct _turb1__GetVectorPotentialResponse*turb1__GetVectorPotentialResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetPressure_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetPressure_" of service binding "TurbulenceServiceSoap".
Spatially interpolate the pressure field at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetPressure"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetPressure"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetPressureResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetPressure_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetPressure*         turb1__GetPressure,
    // output parameters:
    struct _turb1__GetPressureResponse *turb1__GetPressureResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetPressure_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetPressure*         turb1__GetPressure,
    // output parameters:
    struct _turb1__GetPressureResponse *turb1__GetPressureResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetPressure_ SOAP
//gsoap turb1 service method-style:	GetPressure_ document
//gsoap turb1 service method-encoding:	GetPressure_ literal
//gsoap turb1 service method-input-action:	GetPressure_ http://turbulence.pha.jhu.edu/GetPressure
//gsoap turb1 service method-output-action:	GetPressure_ http://turbulence.pha.jhu.edu/GetPressureResponse
int __turb1__GetPressure_(
    struct _turb1__GetPressure*         turb1__GetPressure,	///< Input parameter
    struct _turb1__GetPressureResponse *turb1__GetPressureResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetDensity_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetDensity_" of service binding "TurbulenceServiceSoap".
Spatially interpolate the density field at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetDensity"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetDensity"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetDensityResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetDensity_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetDensity*          turb1__GetDensity,
    // output parameters:
    struct _turb1__GetDensityResponse  *turb1__GetDensityResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetDensity_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetDensity*          turb1__GetDensity,
    // output parameters:
    struct _turb1__GetDensityResponse  *turb1__GetDensityResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetDensity_ SOAP
//gsoap turb1 service method-style:	GetDensity_ document
//gsoap turb1 service method-encoding:	GetDensity_ literal
//gsoap turb1 service method-input-action:	GetDensity_ http://turbulence.pha.jhu.edu/GetDensity
//gsoap turb1 service method-output-action:	GetDensity_ http://turbulence.pha.jhu.edu/GetDensityResponse
int __turb1__GetDensity_(
    struct _turb1__GetDensity*          turb1__GetDensity,	///< Input parameter
    struct _turb1__GetDensityResponse  *turb1__GetDensityResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetTemperature_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetTemperature_" of service binding "TurbulenceServiceSoap".
Spatially interpolate the temperature field at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetTemperature"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetTemperature"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetTemperatureResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetTemperature_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetTemperature*      turb1__GetTemperature,
    // output parameters:
    struct _turb1__GetTemperatureResponse*turb1__GetTemperatureResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetTemperature_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetTemperature*      turb1__GetTemperature,
    // output parameters:
    struct _turb1__GetTemperatureResponse*turb1__GetTemperatureResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetTemperature_ SOAP
//gsoap turb1 service method-style:	GetTemperature_ document
//gsoap turb1 service method-encoding:	GetTemperature_ literal
//gsoap turb1 service method-input-action:	GetTemperature_ http://turbulence.pha.jhu.edu/GetTemperature
//gsoap turb1 service method-output-action:	GetTemperature_ http://turbulence.pha.jhu.edu/GetTemperatureResponse
int __turb1__GetTemperature_(
    struct _turb1__GetTemperature*      turb1__GetTemperature,	///< Input parameter
    struct _turb1__GetTemperatureResponse*turb1__GetTemperatureResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVelocityAndPressure_                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVelocityAndPressure_" of service binding "TurbulenceServiceSoap".
Spatially interpolate the velocity and pressure for an array of points

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVelocityAndPressure"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVelocityAndPressure"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVelocityAndPressureResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVelocityAndPressure_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVelocityAndPressure* turb1__GetVelocityAndPressure,
    // output parameters:
    struct _turb1__GetVelocityAndPressureResponse*turb1__GetVelocityAndPressureResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVelocityAndPressure_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVelocityAndPressure* turb1__GetVelocityAndPressure,
    // output parameters:
    struct _turb1__GetVelocityAndPressureResponse*turb1__GetVelocityAndPressureResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVelocityAndPressure_ SOAP
//gsoap turb1 service method-style:	GetVelocityAndPressure_ document
//gsoap turb1 service method-encoding:	GetVelocityAndPressure_ literal
//gsoap turb1 service method-input-action:	GetVelocityAndPressure_ http://turbulence.pha.jhu.edu/GetVelocityAndPressure
//gsoap turb1 service method-output-action:	GetVelocityAndPressure_ http://turbulence.pha.jhu.edu/GetVelocityAndPressureResponse
int __turb1__GetVelocityAndPressure_(
    struct _turb1__GetVelocityAndPressure* turb1__GetVelocityAndPressure,	///< Input parameter
    struct _turb1__GetVelocityAndPressureResponse*turb1__GetVelocityAndPressureResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVelocityAndTemperature_                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVelocityAndTemperature_" of service binding "TurbulenceServiceSoap".
Spatially interpolate the velocity and temperature for an array of points

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVelocityAndTemperature"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVelocityAndTemperature"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVelocityAndTemperatureResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVelocityAndTemperature_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVelocityAndTemperature* turb1__GetVelocityAndTemperature,
    // output parameters:
    struct _turb1__GetVelocityAndTemperatureResponse*turb1__GetVelocityAndTemperatureResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVelocityAndTemperature_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVelocityAndTemperature* turb1__GetVelocityAndTemperature,
    // output parameters:
    struct _turb1__GetVelocityAndTemperatureResponse*turb1__GetVelocityAndTemperatureResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVelocityAndTemperature_ SOAP
//gsoap turb1 service method-style:	GetVelocityAndTemperature_ document
//gsoap turb1 service method-encoding:	GetVelocityAndTemperature_ literal
//gsoap turb1 service method-input-action:	GetVelocityAndTemperature_ http://turbulence.pha.jhu.edu/GetVelocityAndTemperature
//gsoap turb1 service method-output-action:	GetVelocityAndTemperature_ http://turbulence.pha.jhu.edu/GetVelocityAndTemperatureResponse
int __turb1__GetVelocityAndTemperature_(
    struct _turb1__GetVelocityAndTemperature* turb1__GetVelocityAndTemperature,	///< Input parameter
    struct _turb1__GetVelocityAndTemperatureResponse*turb1__GetVelocityAndTemperatureResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVelocityGradient_                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVelocityGradient_" of service binding "TurbulenceServiceSoap".
Retrieve the velocity gradient at a fixed location

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVelocityGradient"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVelocityGradient"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVelocityGradientResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVelocityGradient_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVelocityGradient* turb1__GetVelocityGradient,
    // output parameters:
    struct _turb1__GetVelocityGradientResponse*turb1__GetVelocityGradientResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVelocityGradient_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVelocityGradient* turb1__GetVelocityGradient,
    // output parameters:
    struct _turb1__GetVelocityGradientResponse*turb1__GetVelocityGradientResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVelocityGradient_ SOAP
//gsoap turb1 service method-style:	GetVelocityGradient_ document
//gsoap turb1 service method-encoding:	GetVelocityGradient_ literal
//gsoap turb1 service method-input-action:	GetVelocityGradient_ http://turbulence.pha.jhu.edu/GetVelocityGradient
//gsoap turb1 service method-output-action:	GetVelocityGradient_ http://turbulence.pha.jhu.edu/GetVelocityGradientResponse
int __turb1__GetVelocityGradient_(
    struct _turb1__GetVelocityGradient* turb1__GetVelocityGradient,	///< Input parameter
    struct _turb1__GetVelocityGradientResponse*turb1__GetVelocityGradientResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetMagneticFieldGradient_                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetMagneticFieldGradient_" of service binding "TurbulenceServiceSoap".
Retrieve the magnetic field gradient at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetMagneticFieldGradient"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetMagneticFieldGradient"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetMagneticFieldGradientResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetMagneticFieldGradient_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetMagneticFieldGradient* turb1__GetMagneticFieldGradient,
    // output parameters:
    struct _turb1__GetMagneticFieldGradientResponse*turb1__GetMagneticFieldGradientResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetMagneticFieldGradient_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetMagneticFieldGradient* turb1__GetMagneticFieldGradient,
    // output parameters:
    struct _turb1__GetMagneticFieldGradientResponse*turb1__GetMagneticFieldGradientResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetMagneticFieldGradient_ SOAP
//gsoap turb1 service method-style:	GetMagneticFieldGradient_ document
//gsoap turb1 service method-encoding:	GetMagneticFieldGradient_ literal
//gsoap turb1 service method-input-action:	GetMagneticFieldGradient_ http://turbulence.pha.jhu.edu/GetMagneticFieldGradient
//gsoap turb1 service method-output-action:	GetMagneticFieldGradient_ http://turbulence.pha.jhu.edu/GetMagneticFieldGradientResponse
int __turb1__GetMagneticFieldGradient_(
    struct _turb1__GetMagneticFieldGradient* turb1__GetMagneticFieldGradient,	///< Input parameter
    struct _turb1__GetMagneticFieldGradientResponse*turb1__GetMagneticFieldGradientResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVectorPotentialGradient_                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVectorPotentialGradient_" of service binding "TurbulenceServiceSoap".
Retrieve the vector potential gradient at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVectorPotentialGradient"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVectorPotentialGradient"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVectorPotentialGradientResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVectorPotentialGradient_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVectorPotentialGradient* turb1__GetVectorPotentialGradient,
    // output parameters:
    struct _turb1__GetVectorPotentialGradientResponse*turb1__GetVectorPotentialGradientResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVectorPotentialGradient_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVectorPotentialGradient* turb1__GetVectorPotentialGradient,
    // output parameters:
    struct _turb1__GetVectorPotentialGradientResponse*turb1__GetVectorPotentialGradientResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVectorPotentialGradient_ SOAP
//gsoap turb1 service method-style:	GetVectorPotentialGradient_ document
//gsoap turb1 service method-encoding:	GetVectorPotentialGradient_ literal
//gsoap turb1 service method-input-action:	GetVectorPotentialGradient_ http://turbulence.pha.jhu.edu/GetVectorPotentialGradient
//gsoap turb1 service method-output-action:	GetVectorPotentialGradient_ http://turbulence.pha.jhu.edu/GetVectorPotentialGradientResponse
int __turb1__GetVectorPotentialGradient_(
    struct _turb1__GetVectorPotentialGradient* turb1__GetVectorPotentialGradient,	///< Input parameter
    struct _turb1__GetVectorPotentialGradientResponse*turb1__GetVectorPotentialGradientResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetPressureGradient_                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetPressureGradient_" of service binding "TurbulenceServiceSoap".
Retrieve the pressure gradient at a fixed location

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetPressureGradient"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetPressureGradient"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetPressureGradientResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetPressureGradient_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetPressureGradient* turb1__GetPressureGradient,
    // output parameters:
    struct _turb1__GetPressureGradientResponse*turb1__GetPressureGradientResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetPressureGradient_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetPressureGradient* turb1__GetPressureGradient,
    // output parameters:
    struct _turb1__GetPressureGradientResponse*turb1__GetPressureGradientResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetPressureGradient_ SOAP
//gsoap turb1 service method-style:	GetPressureGradient_ document
//gsoap turb1 service method-encoding:	GetPressureGradient_ literal
//gsoap turb1 service method-input-action:	GetPressureGradient_ http://turbulence.pha.jhu.edu/GetPressureGradient
//gsoap turb1 service method-output-action:	GetPressureGradient_ http://turbulence.pha.jhu.edu/GetPressureGradientResponse
int __turb1__GetPressureGradient_(
    struct _turb1__GetPressureGradient* turb1__GetPressureGradient,	///< Input parameter
    struct _turb1__GetPressureGradientResponse*turb1__GetPressureGradientResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetDensityGradient_                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetDensityGradient_" of service binding "TurbulenceServiceSoap".
Retrieve the density gradient at a fixed location

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetDensityGradient"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetDensityGradient"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetDensityGradientResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetDensityGradient_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetDensityGradient*  turb1__GetDensityGradient,
    // output parameters:
    struct _turb1__GetDensityGradientResponse*turb1__GetDensityGradientResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetDensityGradient_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetDensityGradient*  turb1__GetDensityGradient,
    // output parameters:
    struct _turb1__GetDensityGradientResponse*turb1__GetDensityGradientResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetDensityGradient_ SOAP
//gsoap turb1 service method-style:	GetDensityGradient_ document
//gsoap turb1 service method-encoding:	GetDensityGradient_ literal
//gsoap turb1 service method-input-action:	GetDensityGradient_ http://turbulence.pha.jhu.edu/GetDensityGradient
//gsoap turb1 service method-output-action:	GetDensityGradient_ http://turbulence.pha.jhu.edu/GetDensityGradientResponse
int __turb1__GetDensityGradient_(
    struct _turb1__GetDensityGradient*  turb1__GetDensityGradient,	///< Input parameter
    struct _turb1__GetDensityGradientResponse*turb1__GetDensityGradientResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetTemperatureGradient_                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetTemperatureGradient_" of service binding "TurbulenceServiceSoap".
Retrieve the temperature gradient at a fixed location

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetTemperatureGradient"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetTemperatureGradient"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetTemperatureGradientResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetTemperatureGradient_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetTemperatureGradient* turb1__GetTemperatureGradient,
    // output parameters:
    struct _turb1__GetTemperatureGradientResponse*turb1__GetTemperatureGradientResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetTemperatureGradient_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetTemperatureGradient* turb1__GetTemperatureGradient,
    // output parameters:
    struct _turb1__GetTemperatureGradientResponse*turb1__GetTemperatureGradientResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetTemperatureGradient_ SOAP
//gsoap turb1 service method-style:	GetTemperatureGradient_ document
//gsoap turb1 service method-encoding:	GetTemperatureGradient_ literal
//gsoap turb1 service method-input-action:	GetTemperatureGradient_ http://turbulence.pha.jhu.edu/GetTemperatureGradient
//gsoap turb1 service method-output-action:	GetTemperatureGradient_ http://turbulence.pha.jhu.edu/GetTemperatureGradientResponse
int __turb1__GetTemperatureGradient_(
    struct _turb1__GetTemperatureGradient* turb1__GetTemperatureGradient,	///< Input parameter
    struct _turb1__GetTemperatureGradientResponse*turb1__GetTemperatureGradientResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVelocityHessian_                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVelocityHessian_" of service binding "TurbulenceServiceSoap".
Retrieve the velocity hessian at a fixed location

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVelocityHessian"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVelocityHessian"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVelocityHessianResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVelocityHessian_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVelocityHessian*  turb1__GetVelocityHessian,
    // output parameters:
    struct _turb1__GetVelocityHessianResponse*turb1__GetVelocityHessianResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVelocityHessian_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVelocityHessian*  turb1__GetVelocityHessian,
    // output parameters:
    struct _turb1__GetVelocityHessianResponse*turb1__GetVelocityHessianResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVelocityHessian_ SOAP
//gsoap turb1 service method-style:	GetVelocityHessian_ document
//gsoap turb1 service method-encoding:	GetVelocityHessian_ literal
//gsoap turb1 service method-input-action:	GetVelocityHessian_ http://turbulence.pha.jhu.edu/GetVelocityHessian
//gsoap turb1 service method-output-action:	GetVelocityHessian_ http://turbulence.pha.jhu.edu/GetVelocityHessianResponse
int __turb1__GetVelocityHessian_(
    struct _turb1__GetVelocityHessian*  turb1__GetVelocityHessian,	///< Input parameter
    struct _turb1__GetVelocityHessianResponse*turb1__GetVelocityHessianResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetMagneticHessian_                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetMagneticHessian_" of service binding "TurbulenceServiceSoap".
Retrieve the magnetic field hessian at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetMagneticHessian"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetMagneticHessian"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetMagneticHessianResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetMagneticHessian_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetMagneticHessian*  turb1__GetMagneticHessian,
    // output parameters:
    struct _turb1__GetMagneticHessianResponse*turb1__GetMagneticHessianResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetMagneticHessian_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetMagneticHessian*  turb1__GetMagneticHessian,
    // output parameters:
    struct _turb1__GetMagneticHessianResponse*turb1__GetMagneticHessianResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetMagneticHessian_ SOAP
//gsoap turb1 service method-style:	GetMagneticHessian_ document
//gsoap turb1 service method-encoding:	GetMagneticHessian_ literal
//gsoap turb1 service method-input-action:	GetMagneticHessian_ http://turbulence.pha.jhu.edu/GetMagneticHessian
//gsoap turb1 service method-output-action:	GetMagneticHessian_ http://turbulence.pha.jhu.edu/GetMagneticHessianResponse
int __turb1__GetMagneticHessian_(
    struct _turb1__GetMagneticHessian*  turb1__GetMagneticHessian,	///< Input parameter
    struct _turb1__GetMagneticHessianResponse*turb1__GetMagneticHessianResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVectorPotentialHessian_                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVectorPotentialHessian_" of service binding "TurbulenceServiceSoap".
Retrieve the vector potential hessian at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVectorPotentialHessian"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVectorPotentialHessian"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVectorPotentialHessianResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVectorPotentialHessian_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVectorPotentialHessian* turb1__GetVectorPotentialHessian,
    // output parameters:
    struct _turb1__GetVectorPotentialHessianResponse*turb1__GetVectorPotentialHessianResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVectorPotentialHessian_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVectorPotentialHessian* turb1__GetVectorPotentialHessian,
    // output parameters:
    struct _turb1__GetVectorPotentialHessianResponse*turb1__GetVectorPotentialHessianResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVectorPotentialHessian_ SOAP
//gsoap turb1 service method-style:	GetVectorPotentialHessian_ document
//gsoap turb1 service method-encoding:	GetVectorPotentialHessian_ literal
//gsoap turb1 service method-input-action:	GetVectorPotentialHessian_ http://turbulence.pha.jhu.edu/GetVectorPotentialHessian
//gsoap turb1 service method-output-action:	GetVectorPotentialHessian_ http://turbulence.pha.jhu.edu/GetVectorPotentialHessianResponse
int __turb1__GetVectorPotentialHessian_(
    struct _turb1__GetVectorPotentialHessian* turb1__GetVectorPotentialHessian,	///< Input parameter
    struct _turb1__GetVectorPotentialHessianResponse*turb1__GetVectorPotentialHessianResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetPressureHessian_                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetPressureHessian_" of service binding "TurbulenceServiceSoap".
Retrieve the pressure hessian at a fixed location

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetPressureHessian"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetPressureHessian"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetPressureHessianResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetPressureHessian_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetPressureHessian*  turb1__GetPressureHessian,
    // output parameters:
    struct _turb1__GetPressureHessianResponse*turb1__GetPressureHessianResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetPressureHessian_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetPressureHessian*  turb1__GetPressureHessian,
    // output parameters:
    struct _turb1__GetPressureHessianResponse*turb1__GetPressureHessianResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetPressureHessian_ SOAP
//gsoap turb1 service method-style:	GetPressureHessian_ document
//gsoap turb1 service method-encoding:	GetPressureHessian_ literal
//gsoap turb1 service method-input-action:	GetPressureHessian_ http://turbulence.pha.jhu.edu/GetPressureHessian
//gsoap turb1 service method-output-action:	GetPressureHessian_ http://turbulence.pha.jhu.edu/GetPressureHessianResponse
int __turb1__GetPressureHessian_(
    struct _turb1__GetPressureHessian*  turb1__GetPressureHessian,	///< Input parameter
    struct _turb1__GetPressureHessianResponse*turb1__GetPressureHessianResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetDensityHessian_                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetDensityHessian_" of service binding "TurbulenceServiceSoap".
Retrieve the density hessian at a fixed location

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetDensityHessian"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetDensityHessian"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetDensityHessianResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetDensityHessian_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetDensityHessian*   turb1__GetDensityHessian,
    // output parameters:
    struct _turb1__GetDensityHessianResponse*turb1__GetDensityHessianResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetDensityHessian_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetDensityHessian*   turb1__GetDensityHessian,
    // output parameters:
    struct _turb1__GetDensityHessianResponse*turb1__GetDensityHessianResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetDensityHessian_ SOAP
//gsoap turb1 service method-style:	GetDensityHessian_ document
//gsoap turb1 service method-encoding:	GetDensityHessian_ literal
//gsoap turb1 service method-input-action:	GetDensityHessian_ http://turbulence.pha.jhu.edu/GetDensityHessian
//gsoap turb1 service method-output-action:	GetDensityHessian_ http://turbulence.pha.jhu.edu/GetDensityHessianResponse
int __turb1__GetDensityHessian_(
    struct _turb1__GetDensityHessian*   turb1__GetDensityHessian,	///< Input parameter
    struct _turb1__GetDensityHessianResponse*turb1__GetDensityHessianResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetTemperatureHessian_                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetTemperatureHessian_" of service binding "TurbulenceServiceSoap".
Retrieve the temperature hessian at a fixed location

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetTemperatureHessian"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetTemperatureHessian"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetTemperatureHessianResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetTemperatureHessian_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetTemperatureHessian* turb1__GetTemperatureHessian,
    // output parameters:
    struct _turb1__GetTemperatureHessianResponse*turb1__GetTemperatureHessianResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetTemperatureHessian_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetTemperatureHessian* turb1__GetTemperatureHessian,
    // output parameters:
    struct _turb1__GetTemperatureHessianResponse*turb1__GetTemperatureHessianResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetTemperatureHessian_ SOAP
//gsoap turb1 service method-style:	GetTemperatureHessian_ document
//gsoap turb1 service method-encoding:	GetTemperatureHessian_ literal
//gsoap turb1 service method-input-action:	GetTemperatureHessian_ http://turbulence.pha.jhu.edu/GetTemperatureHessian
//gsoap turb1 service method-output-action:	GetTemperatureHessian_ http://turbulence.pha.jhu.edu/GetTemperatureHessianResponse
int __turb1__GetTemperatureHessian_(
    struct _turb1__GetTemperatureHessian* turb1__GetTemperatureHessian,	///< Input parameter
    struct _turb1__GetTemperatureHessianResponse*turb1__GetTemperatureHessianResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVelocityLaplacian_                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVelocityLaplacian_" of service binding "TurbulenceServiceSoap".
Retrieve the velocity laplacian at a fixed location

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVelocityLaplacian"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVelocityLaplacian"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVelocityLaplacianResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVelocityLaplacian_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVelocityLaplacian* turb1__GetVelocityLaplacian,
    // output parameters:
    struct _turb1__GetVelocityLaplacianResponse*turb1__GetVelocityLaplacianResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVelocityLaplacian_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVelocityLaplacian* turb1__GetVelocityLaplacian,
    // output parameters:
    struct _turb1__GetVelocityLaplacianResponse*turb1__GetVelocityLaplacianResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVelocityLaplacian_ SOAP
//gsoap turb1 service method-style:	GetVelocityLaplacian_ document
//gsoap turb1 service method-encoding:	GetVelocityLaplacian_ literal
//gsoap turb1 service method-input-action:	GetVelocityLaplacian_ http://turbulence.pha.jhu.edu/GetVelocityLaplacian
//gsoap turb1 service method-output-action:	GetVelocityLaplacian_ http://turbulence.pha.jhu.edu/GetVelocityLaplacianResponse
int __turb1__GetVelocityLaplacian_(
    struct _turb1__GetVelocityLaplacian* turb1__GetVelocityLaplacian,	///< Input parameter
    struct _turb1__GetVelocityLaplacianResponse*turb1__GetVelocityLaplacianResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetMagneticFieldLaplacian_                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetMagneticFieldLaplacian_" of service binding "TurbulenceServiceSoap".
Retrieve the magnetic field Laplacian at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetMagneticFieldLaplacian"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetMagneticFieldLaplacian"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetMagneticFieldLaplacianResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetMagneticFieldLaplacian_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetMagneticFieldLaplacian* turb1__GetMagneticFieldLaplacian,
    // output parameters:
    struct _turb1__GetMagneticFieldLaplacianResponse*turb1__GetMagneticFieldLaplacianResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetMagneticFieldLaplacian_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetMagneticFieldLaplacian* turb1__GetMagneticFieldLaplacian,
    // output parameters:
    struct _turb1__GetMagneticFieldLaplacianResponse*turb1__GetMagneticFieldLaplacianResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetMagneticFieldLaplacian_ SOAP
//gsoap turb1 service method-style:	GetMagneticFieldLaplacian_ document
//gsoap turb1 service method-encoding:	GetMagneticFieldLaplacian_ literal
//gsoap turb1 service method-input-action:	GetMagneticFieldLaplacian_ http://turbulence.pha.jhu.edu/GetMagneticFieldLaplacian
//gsoap turb1 service method-output-action:	GetMagneticFieldLaplacian_ http://turbulence.pha.jhu.edu/GetMagneticFieldLaplacianResponse
int __turb1__GetMagneticFieldLaplacian_(
    struct _turb1__GetMagneticFieldLaplacian* turb1__GetMagneticFieldLaplacian,	///< Input parameter
    struct _turb1__GetMagneticFieldLaplacianResponse*turb1__GetMagneticFieldLaplacianResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVectorPotentialLaplacian_                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVectorPotentialLaplacian_" of service binding "TurbulenceServiceSoap".
Retrieve the vector potential Laplacian at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVectorPotentialLaplacian"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVectorPotentialLaplacian"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVectorPotentialLaplacianResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVectorPotentialLaplacian_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVectorPotentialLaplacian* turb1__GetVectorPotentialLaplacian,
    // output parameters:
    struct _turb1__GetVectorPotentialLaplacianResponse*turb1__GetVectorPotentialLaplacianResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVectorPotentialLaplacian_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVectorPotentialLaplacian* turb1__GetVectorPotentialLaplacian,
    // output parameters:
    struct _turb1__GetVectorPotentialLaplacianResponse*turb1__GetVectorPotentialLaplacianResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVectorPotentialLaplacian_ SOAP
//gsoap turb1 service method-style:	GetVectorPotentialLaplacian_ document
//gsoap turb1 service method-encoding:	GetVectorPotentialLaplacian_ literal
//gsoap turb1 service method-input-action:	GetVectorPotentialLaplacian_ http://turbulence.pha.jhu.edu/GetVectorPotentialLaplacian
//gsoap turb1 service method-output-action:	GetVectorPotentialLaplacian_ http://turbulence.pha.jhu.edu/GetVectorPotentialLaplacianResponse
int __turb1__GetVectorPotentialLaplacian_(
    struct _turb1__GetVectorPotentialLaplacian* turb1__GetVectorPotentialLaplacian,	///< Input parameter
    struct _turb1__GetVectorPotentialLaplacianResponse*turb1__GetVectorPotentialLaplacianResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetPosition_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetPosition_" of service binding "TurbulenceServiceSoap".
Fluid particle tracking using a task parallel evaluation approach inside the database
engine.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetPosition"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetPosition"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetPositionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetPosition_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetPosition*         turb1__GetPosition,
    // output parameters:
    struct _turb1__GetPositionResponse *turb1__GetPositionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetPosition_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetPosition*         turb1__GetPosition,
    // output parameters:
    struct _turb1__GetPositionResponse *turb1__GetPositionResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetPosition_ SOAP
//gsoap turb1 service method-style:	GetPosition_ document
//gsoap turb1 service method-encoding:	GetPosition_ literal
//gsoap turb1 service method-input-action:	GetPosition_ http://turbulence.pha.jhu.edu/GetPosition
//gsoap turb1 service method-output-action:	GetPosition_ http://turbulence.pha.jhu.edu/GetPositionResponse
int __turb1__GetPosition_(
    struct _turb1__GetPosition*         turb1__GetPosition,	///< Input parameter
    struct _turb1__GetPositionResponse *turb1__GetPositionResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetThreshold_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetThreshold_" of service binding "TurbulenceServiceSoap".
GetThreshold of the specified field.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetThreshold"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetThreshold"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetThresholdResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetThreshold_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetThreshold*        turb1__GetThreshold,
    // output parameters:
    struct _turb1__GetThresholdResponse*turb1__GetThresholdResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetThreshold_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetThreshold*        turb1__GetThreshold,
    // output parameters:
    struct _turb1__GetThresholdResponse*turb1__GetThresholdResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetThreshold_ SOAP
//gsoap turb1 service method-style:	GetThreshold_ document
//gsoap turb1 service method-encoding:	GetThreshold_ literal
//gsoap turb1 service method-input-action:	GetThreshold_ http://turbulence.pha.jhu.edu/GetThreshold
//gsoap turb1 service method-output-action:	GetThreshold_ http://turbulence.pha.jhu.edu/GetThresholdResponse
int __turb1__GetThreshold_(
    struct _turb1__GetThreshold*        turb1__GetThreshold,	///< Input parameter
    struct _turb1__GetThresholdResponse*turb1__GetThresholdResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetForce_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetForce_" of service binding "TurbulenceServiceSoap".
Retrieve the force for a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetForce"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetForce"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetForceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetForce_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetForce*            turb1__GetForce,
    // output parameters:
    struct _turb1__GetForceResponse    *turb1__GetForceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetForce_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetForce*            turb1__GetForce,
    // output parameters:
    struct _turb1__GetForceResponse    *turb1__GetForceResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetForce_ SOAP
//gsoap turb1 service method-style:	GetForce_ document
//gsoap turb1 service method-encoding:	GetForce_ literal
//gsoap turb1 service method-input-action:	GetForce_ http://turbulence.pha.jhu.edu/GetForce
//gsoap turb1 service method-output-action:	GetForce_ http://turbulence.pha.jhu.edu/GetForceResponse
int __turb1__GetForce_(
    struct _turb1__GetForce*            turb1__GetForce,	///< Input parameter
    struct _turb1__GetForceResponse    *turb1__GetForceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetInvariant_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetInvariant_" of service binding "TurbulenceServiceSoap".
Retrieve the invariants of velocity gradient at a fixed location

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetInvariant"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetInvariant"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetInvariantResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetInvariant_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetInvariant*        turb1__GetInvariant,
    // output parameters:
    struct _turb1__GetInvariantResponse*turb1__GetInvariantResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetInvariant_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetInvariant*        turb1__GetInvariant,
    // output parameters:
    struct _turb1__GetInvariantResponse*turb1__GetInvariantResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetInvariant_ SOAP
//gsoap turb1 service method-style:	GetInvariant_ document
//gsoap turb1 service method-encoding:	GetInvariant_ literal
//gsoap turb1 service method-input-action:	GetInvariant_ http://turbulence.pha.jhu.edu/GetInvariant
//gsoap turb1 service method-output-action:	GetInvariant_ http://turbulence.pha.jhu.edu/GetInvariantResponse
int __turb1__GetInvariant_(
    struct _turb1__GetInvariant*        turb1__GetInvariant,	///< Input parameter
    struct _turb1__GetInvariantResponse*turb1__GetInvariantResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetBoxFilter_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetBoxFilter_" of service binding "TurbulenceServiceSoap".
GetBoxFilter of the specified field; uses workload density to decide how to evaluate.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetBoxFilter"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetBoxFilter"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetBoxFilterResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetBoxFilter_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetBoxFilter*        turb1__GetBoxFilter,
    // output parameters:
    struct _turb1__GetBoxFilterResponse*turb1__GetBoxFilterResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetBoxFilter_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetBoxFilter*        turb1__GetBoxFilter,
    // output parameters:
    struct _turb1__GetBoxFilterResponse*turb1__GetBoxFilterResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetBoxFilter_ SOAP
//gsoap turb1 service method-style:	GetBoxFilter_ document
//gsoap turb1 service method-encoding:	GetBoxFilter_ literal
//gsoap turb1 service method-input-action:	GetBoxFilter_ http://turbulence.pha.jhu.edu/GetBoxFilter
//gsoap turb1 service method-output-action:	GetBoxFilter_ http://turbulence.pha.jhu.edu/GetBoxFilterResponse
int __turb1__GetBoxFilter_(
    struct _turb1__GetBoxFilter*        turb1__GetBoxFilter,	///< Input parameter
    struct _turb1__GetBoxFilterResponse*turb1__GetBoxFilterResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetBoxFilterSGS_                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetBoxFilterSGS_" of service binding "TurbulenceServiceSoap".
Retrieve the SGS symmetric tensor for a single vector field. Also, used
                            when two identical fields are specified (e.g. uu or
bb).

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetBoxFilterSGS"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetBoxFilterSGS"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetBoxFilterSGSResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetBoxFilterSGS_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetBoxFilterSGS*     turb1__GetBoxFilterSGS,
    // output parameters:
    struct _turb1__GetBoxFilterSGSResponse*turb1__GetBoxFilterSGSResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetBoxFilterSGS_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetBoxFilterSGS*     turb1__GetBoxFilterSGS,
    // output parameters:
    struct _turb1__GetBoxFilterSGSResponse*turb1__GetBoxFilterSGSResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetBoxFilterSGS_ SOAP
//gsoap turb1 service method-style:	GetBoxFilterSGS_ document
//gsoap turb1 service method-encoding:	GetBoxFilterSGS_ literal
//gsoap turb1 service method-input-action:	GetBoxFilterSGS_ http://turbulence.pha.jhu.edu/GetBoxFilterSGS
//gsoap turb1 service method-output-action:	GetBoxFilterSGS_ http://turbulence.pha.jhu.edu/GetBoxFilterSGSResponse
int __turb1__GetBoxFilterSGS_(
    struct _turb1__GetBoxFilterSGS*     turb1__GetBoxFilterSGS,	///< Input parameter
    struct _turb1__GetBoxFilterSGSResponse*turb1__GetBoxFilterSGSResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetBoxFilterSGSsymtensor_                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetBoxFilterSGSsymtensor_" of service binding "TurbulenceServiceSoap".
Retrieve the SGS symmetric tensor for a single vector field. Also, used
                            when two identical fields are specified (e.g. uu or
bb).

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetBoxFilterSGSsymtensor"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetBoxFilterSGSsymtensor"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetBoxFilterSGSsymtensorResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetBoxFilterSGSsymtensor_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetBoxFilterSGSsymtensor* turb1__GetBoxFilterSGSsymtensor,
    // output parameters:
    struct _turb1__GetBoxFilterSGSsymtensorResponse*turb1__GetBoxFilterSGSsymtensorResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetBoxFilterSGSsymtensor_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetBoxFilterSGSsymtensor* turb1__GetBoxFilterSGSsymtensor,
    // output parameters:
    struct _turb1__GetBoxFilterSGSsymtensorResponse*turb1__GetBoxFilterSGSsymtensorResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetBoxFilterSGSsymtensor_ SOAP
//gsoap turb1 service method-style:	GetBoxFilterSGSsymtensor_ document
//gsoap turb1 service method-encoding:	GetBoxFilterSGSsymtensor_ literal
//gsoap turb1 service method-input-action:	GetBoxFilterSGSsymtensor_ http://turbulence.pha.jhu.edu/GetBoxFilterSGSsymtensor
//gsoap turb1 service method-output-action:	GetBoxFilterSGSsymtensor_ http://turbulence.pha.jhu.edu/GetBoxFilterSGSsymtensorResponse
int __turb1__GetBoxFilterSGSsymtensor_(
    struct _turb1__GetBoxFilterSGSsymtensor* turb1__GetBoxFilterSGSsymtensor,	///< Input parameter
    struct _turb1__GetBoxFilterSGSsymtensorResponse*turb1__GetBoxFilterSGSsymtensorResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetBoxFilterSGStensor_                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetBoxFilterSGStensor_" of service binding "TurbulenceServiceSoap".
Retrieve the SGS tensor for a combination of two vector fields(e.g. ub or ba).

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetBoxFilterSGStensor"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetBoxFilterSGStensor"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetBoxFilterSGStensorResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetBoxFilterSGStensor_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetBoxFilterSGStensor* turb1__GetBoxFilterSGStensor,
    // output parameters:
    struct _turb1__GetBoxFilterSGStensorResponse*turb1__GetBoxFilterSGStensorResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetBoxFilterSGStensor_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetBoxFilterSGStensor* turb1__GetBoxFilterSGStensor,
    // output parameters:
    struct _turb1__GetBoxFilterSGStensorResponse*turb1__GetBoxFilterSGStensorResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetBoxFilterSGStensor_ SOAP
//gsoap turb1 service method-style:	GetBoxFilterSGStensor_ document
//gsoap turb1 service method-encoding:	GetBoxFilterSGStensor_ literal
//gsoap turb1 service method-input-action:	GetBoxFilterSGStensor_ http://turbulence.pha.jhu.edu/GetBoxFilterSGStensor
//gsoap turb1 service method-output-action:	GetBoxFilterSGStensor_ http://turbulence.pha.jhu.edu/GetBoxFilterSGStensorResponse
int __turb1__GetBoxFilterSGStensor_(
    struct _turb1__GetBoxFilterSGStensor* turb1__GetBoxFilterSGStensor,	///< Input parameter
    struct _turb1__GetBoxFilterSGStensorResponse*turb1__GetBoxFilterSGStensorResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetBoxFilterSGSvector_                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetBoxFilterSGSvector_" of service binding "TurbulenceServiceSoap".
Retrieve the SGS vector for a combination of a vector and a scalar field(e.g. up
or bp).

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetBoxFilterSGSvector"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetBoxFilterSGSvector"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetBoxFilterSGSvectorResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetBoxFilterSGSvector_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetBoxFilterSGSvector* turb1__GetBoxFilterSGSvector,
    // output parameters:
    struct _turb1__GetBoxFilterSGSvectorResponse*turb1__GetBoxFilterSGSvectorResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetBoxFilterSGSvector_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetBoxFilterSGSvector* turb1__GetBoxFilterSGSvector,
    // output parameters:
    struct _turb1__GetBoxFilterSGSvectorResponse*turb1__GetBoxFilterSGSvectorResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetBoxFilterSGSvector_ SOAP
//gsoap turb1 service method-style:	GetBoxFilterSGSvector_ document
//gsoap turb1 service method-encoding:	GetBoxFilterSGSvector_ literal
//gsoap turb1 service method-input-action:	GetBoxFilterSGSvector_ http://turbulence.pha.jhu.edu/GetBoxFilterSGSvector
//gsoap turb1 service method-output-action:	GetBoxFilterSGSvector_ http://turbulence.pha.jhu.edu/GetBoxFilterSGSvectorResponse
int __turb1__GetBoxFilterSGSvector_(
    struct _turb1__GetBoxFilterSGSvector* turb1__GetBoxFilterSGSvector,	///< Input parameter
    struct _turb1__GetBoxFilterSGSvectorResponse*turb1__GetBoxFilterSGSvectorResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetBoxFilterSGSscalar_                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetBoxFilterSGSscalar_" of service binding "TurbulenceServiceSoap".
Retrieve the SGS scalar for a combination of two scalar fields(e.g. pp or pd).

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetBoxFilterSGSscalar"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetBoxFilterSGSscalar"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetBoxFilterSGSscalarResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetBoxFilterSGSscalar_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetBoxFilterSGSscalar* turb1__GetBoxFilterSGSscalar,
    // output parameters:
    struct _turb1__GetBoxFilterSGSscalarResponse*turb1__GetBoxFilterSGSscalarResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetBoxFilterSGSscalar_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetBoxFilterSGSscalar* turb1__GetBoxFilterSGSscalar,
    // output parameters:
    struct _turb1__GetBoxFilterSGSscalarResponse*turb1__GetBoxFilterSGSscalarResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetBoxFilterSGSscalar_ SOAP
//gsoap turb1 service method-style:	GetBoxFilterSGSscalar_ document
//gsoap turb1 service method-encoding:	GetBoxFilterSGSscalar_ literal
//gsoap turb1 service method-input-action:	GetBoxFilterSGSscalar_ http://turbulence.pha.jhu.edu/GetBoxFilterSGSscalar
//gsoap turb1 service method-output-action:	GetBoxFilterSGSscalar_ http://turbulence.pha.jhu.edu/GetBoxFilterSGSscalarResponse
int __turb1__GetBoxFilterSGSscalar_(
    struct _turb1__GetBoxFilterSGSscalar* turb1__GetBoxFilterSGSscalar,	///< Input parameter
    struct _turb1__GetBoxFilterSGSscalarResponse*turb1__GetBoxFilterSGSscalarResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetBoxFilterGradient_                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetBoxFilterGradient_" of service binding "TurbulenceServiceSoap".
GetBoxFilter of the specified field; uses workload density to decide how to evaluate.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetBoxFilterGradient"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetBoxFilterGradient"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetBoxFilterGradientResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetBoxFilterGradient_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetBoxFilterGradient* turb1__GetBoxFilterGradient,
    // output parameters:
    struct _turb1__GetBoxFilterGradientResponse*turb1__GetBoxFilterGradientResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetBoxFilterGradient_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetBoxFilterGradient* turb1__GetBoxFilterGradient,
    // output parameters:
    struct _turb1__GetBoxFilterGradientResponse*turb1__GetBoxFilterGradientResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetBoxFilterGradient_ SOAP
//gsoap turb1 service method-style:	GetBoxFilterGradient_ document
//gsoap turb1 service method-encoding:	GetBoxFilterGradient_ literal
//gsoap turb1 service method-input-action:	GetBoxFilterGradient_ http://turbulence.pha.jhu.edu/GetBoxFilterGradient
//gsoap turb1 service method-output-action:	GetBoxFilterGradient_ http://turbulence.pha.jhu.edu/GetBoxFilterGradientResponse
int __turb1__GetBoxFilterGradient_(
    struct _turb1__GetBoxFilterGradient* turb1__GetBoxFilterGradient,	///< Input parameter
    struct _turb1__GetBoxFilterGradientResponse*turb1__GetBoxFilterGradientResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetLaplacianOfGradient_                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetLaplacianOfGradient_" of service binding "TurbulenceServiceSoap".
Retrieve the laplacian of the gradient of the specified field at a number of points
for a given time. Development version, not intended for production use!

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetLaplacianOfGradient"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetLaplacianOfGradient"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetLaplacianOfGradientResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetLaplacianOfGradient_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetLaplacianOfGradient* turb1__GetLaplacianOfGradient,
    // output parameters:
    struct _turb1__GetLaplacianOfGradientResponse*turb1__GetLaplacianOfGradientResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetLaplacianOfGradient_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetLaplacianOfGradient* turb1__GetLaplacianOfGradient,
    // output parameters:
    struct _turb1__GetLaplacianOfGradientResponse*turb1__GetLaplacianOfGradientResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetLaplacianOfGradient_ SOAP
//gsoap turb1 service method-style:	GetLaplacianOfGradient_ document
//gsoap turb1 service method-encoding:	GetLaplacianOfGradient_ literal
//gsoap turb1 service method-input-action:	GetLaplacianOfGradient_ http://turbulence.pha.jhu.edu/GetLaplacianOfGradient
//gsoap turb1 service method-output-action:	GetLaplacianOfGradient_ http://turbulence.pha.jhu.edu/GetLaplacianOfGradientResponse
int __turb1__GetLaplacianOfGradient_(
    struct _turb1__GetLaplacianOfGradient* turb1__GetLaplacianOfGradient,	///< Input parameter
    struct _turb1__GetLaplacianOfGradientResponse*turb1__GetLaplacianOfGradientResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetVelocityBatch_                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetVelocityBatch_" of service binding "TurbulenceServiceSoap".
Spatially interpolate the velocity at a number of points for a given time (allow
batching).

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetVelocityBatch"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetVelocityBatch"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetVelocityBatchResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetVelocityBatch_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetVelocityBatch*    turb1__GetVelocityBatch,
    // output parameters:
    struct _turb1__GetVelocityBatchResponse*turb1__GetVelocityBatchResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetVelocityBatch_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetVelocityBatch*    turb1__GetVelocityBatch,
    // output parameters:
    struct _turb1__GetVelocityBatchResponse*turb1__GetVelocityBatchResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetVelocityBatch_ SOAP
//gsoap turb1 service method-style:	GetVelocityBatch_ document
//gsoap turb1 service method-encoding:	GetVelocityBatch_ literal
//gsoap turb1 service method-input-action:	GetVelocityBatch_ http://turbulence.pha.jhu.edu/GetVelocityBatch
//gsoap turb1 service method-output-action:	GetVelocityBatch_ http://turbulence.pha.jhu.edu/GetVelocityBatchResponse
int __turb1__GetVelocityBatch_(
    struct _turb1__GetVelocityBatch*    turb1__GetVelocityBatch,	///< Input parameter
    struct _turb1__GetVelocityBatchResponse*turb1__GetVelocityBatchResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetRawVelocity_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetRawVelocity_" of service binding "TurbulenceServiceSoap".
Get a cube of the raw velocity data with the given width cornered at the specified
coordinates for the given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetRawVelocity"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetRawVelocity"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetRawVelocityResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetRawVelocity_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetRawVelocity*      turb1__GetRawVelocity,
    // output parameters:
    struct _turb1__GetRawVelocityResponse*turb1__GetRawVelocityResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetRawVelocity_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetRawVelocity*      turb1__GetRawVelocity,
    // output parameters:
    struct _turb1__GetRawVelocityResponse*turb1__GetRawVelocityResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetRawVelocity_ SOAP
//gsoap turb1 service method-style:	GetRawVelocity_ document
//gsoap turb1 service method-encoding:	GetRawVelocity_ literal
//gsoap turb1 service method-input-action:	GetRawVelocity_ http://turbulence.pha.jhu.edu/GetRawVelocity
//gsoap turb1 service method-output-action:	GetRawVelocity_ http://turbulence.pha.jhu.edu/GetRawVelocityResponse
int __turb1__GetRawVelocity_(
    struct _turb1__GetRawVelocity*      turb1__GetRawVelocity,	///< Input parameter
    struct _turb1__GetRawVelocityResponse*turb1__GetRawVelocityResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetRawMagneticField_                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetRawMagneticField_" of service binding "TurbulenceServiceSoap".
Get a cube of the raw magnetic field data with the given width cornered at the specified
coordinates for the given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetRawMagneticField"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetRawMagneticField"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetRawMagneticFieldResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetRawMagneticField_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetRawMagneticField* turb1__GetRawMagneticField,
    // output parameters:
    struct _turb1__GetRawMagneticFieldResponse*turb1__GetRawMagneticFieldResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetRawMagneticField_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetRawMagneticField* turb1__GetRawMagneticField,
    // output parameters:
    struct _turb1__GetRawMagneticFieldResponse*turb1__GetRawMagneticFieldResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetRawMagneticField_ SOAP
//gsoap turb1 service method-style:	GetRawMagneticField_ document
//gsoap turb1 service method-encoding:	GetRawMagneticField_ literal
//gsoap turb1 service method-input-action:	GetRawMagneticField_ http://turbulence.pha.jhu.edu/GetRawMagneticField
//gsoap turb1 service method-output-action:	GetRawMagneticField_ http://turbulence.pha.jhu.edu/GetRawMagneticFieldResponse
int __turb1__GetRawMagneticField_(
    struct _turb1__GetRawMagneticField* turb1__GetRawMagneticField,	///< Input parameter
    struct _turb1__GetRawMagneticFieldResponse*turb1__GetRawMagneticFieldResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetRawVectorPotential_                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetRawVectorPotential_" of service binding "TurbulenceServiceSoap".
Get a cube of the raw vector potential data with the given width cornered at the
specified coordinates for the given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetRawVectorPotential"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetRawVectorPotential"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetRawVectorPotentialResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetRawVectorPotential_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetRawVectorPotential* turb1__GetRawVectorPotential,
    // output parameters:
    struct _turb1__GetRawVectorPotentialResponse*turb1__GetRawVectorPotentialResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetRawVectorPotential_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetRawVectorPotential* turb1__GetRawVectorPotential,
    // output parameters:
    struct _turb1__GetRawVectorPotentialResponse*turb1__GetRawVectorPotentialResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetRawVectorPotential_ SOAP
//gsoap turb1 service method-style:	GetRawVectorPotential_ document
//gsoap turb1 service method-encoding:	GetRawVectorPotential_ literal
//gsoap turb1 service method-input-action:	GetRawVectorPotential_ http://turbulence.pha.jhu.edu/GetRawVectorPotential
//gsoap turb1 service method-output-action:	GetRawVectorPotential_ http://turbulence.pha.jhu.edu/GetRawVectorPotentialResponse
int __turb1__GetRawVectorPotential_(
    struct _turb1__GetRawVectorPotential* turb1__GetRawVectorPotential,	///< Input parameter
    struct _turb1__GetRawVectorPotentialResponse*turb1__GetRawVectorPotentialResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetRawPressure_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetRawPressure_" of service binding "TurbulenceServiceSoap".
Get a cube of the raw pressure data with the given width cornered at the specified
coordinates for the given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetRawPressure"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetRawPressure"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetRawPressureResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetRawPressure_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetRawPressure*      turb1__GetRawPressure,
    // output parameters:
    struct _turb1__GetRawPressureResponse*turb1__GetRawPressureResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetRawPressure_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetRawPressure*      turb1__GetRawPressure,
    // output parameters:
    struct _turb1__GetRawPressureResponse*turb1__GetRawPressureResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetRawPressure_ SOAP
//gsoap turb1 service method-style:	GetRawPressure_ document
//gsoap turb1 service method-encoding:	GetRawPressure_ literal
//gsoap turb1 service method-input-action:	GetRawPressure_ http://turbulence.pha.jhu.edu/GetRawPressure
//gsoap turb1 service method-output-action:	GetRawPressure_ http://turbulence.pha.jhu.edu/GetRawPressureResponse
int __turb1__GetRawPressure_(
    struct _turb1__GetRawPressure*      turb1__GetRawPressure,	///< Input parameter
    struct _turb1__GetRawPressureResponse*turb1__GetRawPressureResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetRawDensity_                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetRawDensity_" of service binding "TurbulenceServiceSoap".
Get a cube of the raw density data with the given width cornered at the specified
coordinates for the given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetRawDensity"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetRawDensity"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetRawDensityResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetRawDensity_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetRawDensity*       turb1__GetRawDensity,
    // output parameters:
    struct _turb1__GetRawDensityResponse*turb1__GetRawDensityResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetRawDensity_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetRawDensity*       turb1__GetRawDensity,
    // output parameters:
    struct _turb1__GetRawDensityResponse*turb1__GetRawDensityResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetRawDensity_ SOAP
//gsoap turb1 service method-style:	GetRawDensity_ document
//gsoap turb1 service method-encoding:	GetRawDensity_ literal
//gsoap turb1 service method-input-action:	GetRawDensity_ http://turbulence.pha.jhu.edu/GetRawDensity
//gsoap turb1 service method-output-action:	GetRawDensity_ http://turbulence.pha.jhu.edu/GetRawDensityResponse
int __turb1__GetRawDensity_(
    struct _turb1__GetRawDensity*       turb1__GetRawDensity,	///< Input parameter
    struct _turb1__GetRawDensityResponse*turb1__GetRawDensityResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetRawTemperature_                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetRawTemperature_" of service binding "TurbulenceServiceSoap".
Get a cube of the raw density data with the given width cornered at the specified
coordinates for the given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetRawTemperature"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetRawTemperature"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetRawTemperatureResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetRawTemperature_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetRawTemperature*   turb1__GetRawTemperature,
    // output parameters:
    struct _turb1__GetRawTemperatureResponse*turb1__GetRawTemperatureResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetRawTemperature_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetRawTemperature*   turb1__GetRawTemperature,
    // output parameters:
    struct _turb1__GetRawTemperatureResponse*turb1__GetRawTemperatureResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetRawTemperature_ SOAP
//gsoap turb1 service method-style:	GetRawTemperature_ document
//gsoap turb1 service method-encoding:	GetRawTemperature_ literal
//gsoap turb1 service method-input-action:	GetRawTemperature_ http://turbulence.pha.jhu.edu/GetRawTemperature
//gsoap turb1 service method-output-action:	GetRawTemperature_ http://turbulence.pha.jhu.edu/GetRawTemperatureResponse
int __turb1__GetRawTemperature_(
    struct _turb1__GetRawTemperature*   turb1__GetRawTemperature,	///< Input parameter
    struct _turb1__GetRawTemperatureResponse*turb1__GetRawTemperatureResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetAnyCutoutWeb_                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetAnyCutoutWeb_" of service binding "TurbulenceServiceSoap".
Retrieve the laplacian of the gradient of the specified field at a number of points
for a given time. Development version, not intended for production use!

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetAnyCutoutWeb"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetAnyCutoutWeb"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetAnyCutoutWebResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetAnyCutoutWeb_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetAnyCutoutWeb*     turb1__GetAnyCutoutWeb,
    // output parameters:
    struct _turb1__GetAnyCutoutWebResponse*turb1__GetAnyCutoutWebResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetAnyCutoutWeb_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetAnyCutoutWeb*     turb1__GetAnyCutoutWeb,
    // output parameters:
    struct _turb1__GetAnyCutoutWebResponse*turb1__GetAnyCutoutWebResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetAnyCutoutWeb_ SOAP
//gsoap turb1 service method-style:	GetAnyCutoutWeb_ document
//gsoap turb1 service method-encoding:	GetAnyCutoutWeb_ literal
//gsoap turb1 service method-input-action:	GetAnyCutoutWeb_ http://turbulence.pha.jhu.edu/GetAnyCutoutWeb
//gsoap turb1 service method-output-action:	GetAnyCutoutWeb_ http://turbulence.pha.jhu.edu/GetAnyCutoutWebResponse
int __turb1__GetAnyCutoutWeb_(
    struct _turb1__GetAnyCutoutWeb*     turb1__GetAnyCutoutWeb,	///< Input parameter
    struct _turb1__GetAnyCutoutWebResponse*turb1__GetAnyCutoutWebResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetData_USCOREPython_                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetData_USCOREPython_" of service binding "TurbulenceServiceSoap".
Spatially interpolate the pressure at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetData_Python"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetData_Python"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetData_PythonResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetData_USCOREPython_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetData_USCOREPython* turb1__GetData_USCOREPython,
    // output parameters:
    struct _turb1__GetData_USCOREPythonResponse*turb1__GetData_USCOREPythonResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetData_USCOREPython_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetData_USCOREPython* turb1__GetData_USCOREPython,
    // output parameters:
    struct _turb1__GetData_USCOREPythonResponse*turb1__GetData_USCOREPythonResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetData_USCOREPython_ SOAP
//gsoap turb1 service method-style:	GetData_USCOREPython_ document
//gsoap turb1 service method-encoding:	GetData_USCOREPython_ literal
//gsoap turb1 service method-input-action:	GetData_USCOREPython_ http://turbulence.pha.jhu.edu/GetData_Python
//gsoap turb1 service method-output-action:	GetData_USCOREPython_ http://turbulence.pha.jhu.edu/GetData_PythonResponse
int __turb1__GetData_USCOREPython_(
    struct _turb1__GetData_USCOREPython* turb1__GetData_USCOREPython,	///< Input parameter
    struct _turb1__GetData_USCOREPythonResponse*turb1__GetData_USCOREPythonResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetFilter_USCOREPython_                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetFilter_USCOREPython_" of service binding "TurbulenceServiceSoap".
Spatially interpolate the pressure at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetFilter_Python"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetFilter_Python"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetFilter_PythonResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetFilter_USCOREPython_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetFilter_USCOREPython* turb1__GetFilter_USCOREPython,
    // output parameters:
    struct _turb1__GetFilter_USCOREPythonResponse*turb1__GetFilter_USCOREPythonResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetFilter_USCOREPython_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetFilter_USCOREPython* turb1__GetFilter_USCOREPython,
    // output parameters:
    struct _turb1__GetFilter_USCOREPythonResponse*turb1__GetFilter_USCOREPythonResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetFilter_USCOREPython_ SOAP
//gsoap turb1 service method-style:	GetFilter_USCOREPython_ document
//gsoap turb1 service method-encoding:	GetFilter_USCOREPython_ literal
//gsoap turb1 service method-input-action:	GetFilter_USCOREPython_ http://turbulence.pha.jhu.edu/GetFilter_Python
//gsoap turb1 service method-output-action:	GetFilter_USCOREPython_ http://turbulence.pha.jhu.edu/GetFilter_PythonResponse
int __turb1__GetFilter_USCOREPython_(
    struct _turb1__GetFilter_USCOREPython* turb1__GetFilter_USCOREPython,	///< Input parameter
    struct _turb1__GetFilter_USCOREPythonResponse*turb1__GetFilter_USCOREPythonResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetPosition_USCOREPython_                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetPosition_USCOREPython_" of service binding "TurbulenceServiceSoap".
Spatially interpolate the pressure at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetPosition_Python"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetPosition_Python"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetPosition_PythonResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetPosition_USCOREPython_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetPosition_USCOREPython* turb1__GetPosition_USCOREPython,
    // output parameters:
    struct _turb1__GetPosition_USCOREPythonResponse*turb1__GetPosition_USCOREPythonResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetPosition_USCOREPython_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetPosition_USCOREPython* turb1__GetPosition_USCOREPython,
    // output parameters:
    struct _turb1__GetPosition_USCOREPythonResponse*turb1__GetPosition_USCOREPythonResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetPosition_USCOREPython_ SOAP
//gsoap turb1 service method-style:	GetPosition_USCOREPython_ document
//gsoap turb1 service method-encoding:	GetPosition_USCOREPython_ literal
//gsoap turb1 service method-input-action:	GetPosition_USCOREPython_ http://turbulence.pha.jhu.edu/GetPosition_Python
//gsoap turb1 service method-output-action:	GetPosition_USCOREPython_ http://turbulence.pha.jhu.edu/GetPosition_PythonResponse
int __turb1__GetPosition_USCOREPython_(
    struct _turb1__GetPosition_USCOREPython* turb1__GetPosition_USCOREPython,	///< Input parameter
    struct _turb1__GetPosition_USCOREPythonResponse*turb1__GetPosition_USCOREPythonResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __turb1__GetThreshold_USCOREPython_                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__turb1__GetThreshold_USCOREPython_" of service binding "TurbulenceServiceSoap".
Spatially interpolate the pressure at a number of points for a given time.

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://turbulence.pha.jhu.edu/service/turbulence.asmx

  - Default SOAP action or REST location path:
    - "http://turbulence.pha.jhu.edu/GetThreshold_Python"

  - Addressing input action: "http://turbulence.pha.jhu.edu/GetThreshold_Python"

  - Addressing output action: "http://turbulence.pha.jhu.edu/GetThreshold_PythonResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___turb1__GetThreshold_USCOREPython_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _turb1__GetThreshold_USCOREPython* turb1__GetThreshold_USCOREPython,
    // output parameters:
    struct _turb1__GetThreshold_USCOREPythonResponse*turb1__GetThreshold_USCOREPythonResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __turb1__GetThreshold_USCOREPython_(
    struct soap *soap,
    // input parameters:
    struct _turb1__GetThreshold_USCOREPython* turb1__GetThreshold_USCOREPython,
    // output parameters:
    struct _turb1__GetThreshold_USCOREPythonResponse*turb1__GetThreshold_USCOREPythonResponse
  );
@endcode

*/

//gsoap turb1 service method-protocol:	GetThreshold_USCOREPython_ SOAP
//gsoap turb1 service method-style:	GetThreshold_USCOREPython_ document
//gsoap turb1 service method-encoding:	GetThreshold_USCOREPython_ literal
//gsoap turb1 service method-input-action:	GetThreshold_USCOREPython_ http://turbulence.pha.jhu.edu/GetThreshold_Python
//gsoap turb1 service method-output-action:	GetThreshold_USCOREPython_ http://turbulence.pha.jhu.edu/GetThreshold_PythonResponse
int __turb1__GetThreshold_USCOREPython_(
    struct _turb1__GetThreshold_USCOREPython* turb1__GetThreshold_USCOREPython,	///< Input parameter
    struct _turb1__GetThreshold_USCOREPythonResponse*turb1__GetThreshold_USCOREPythonResponse	///< Output parameter
);

/** @page TurbulenceServiceSoap Binding "TurbulenceServiceSoap"

@section TurbulenceServiceSoap_policy_enablers Policy Enablers of Binding "TurbulenceServiceSoap"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/** @page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDLs and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


*/

/**

@section turb1 Top-level root elements of schema "http://turbulence.pha.jhu.edu/"

  - <turb1:NullOp> @ref _turb1__NullOp
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__NullOp(struct soap*, struct _turb1__NullOp*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__NullOp(struct soap*, struct _turb1__NullOp*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__NullOp(struct soap*, const char *URL, struct _turb1__NullOp*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__NullOp(struct soap*, const char *URL, struct _turb1__NullOp*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__NullOp(struct soap*, const char *URL, struct _turb1__NullOp*);
    soap_POST_recv__turb1__NullOp(struct soap*, struct _turb1__NullOp*);
    @endcode

  - <turb1:NullOpResponse> @ref _turb1__NullOpResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__NullOpResponse(struct soap*, struct _turb1__NullOpResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__NullOpResponse(struct soap*, struct _turb1__NullOpResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__NullOpResponse(struct soap*, const char *URL, struct _turb1__NullOpResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__NullOpResponse(struct soap*, const char *URL, struct _turb1__NullOpResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__NullOpResponse(struct soap*, const char *URL, struct _turb1__NullOpResponse*);
    soap_POST_recv__turb1__NullOpResponse(struct soap*, struct _turb1__NullOpResponse*);
    @endcode

  - <turb1:GetVelocity> @ref _turb1__GetVelocity
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVelocity(struct soap*, struct _turb1__GetVelocity*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVelocity(struct soap*, struct _turb1__GetVelocity*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVelocity(struct soap*, const char *URL, struct _turb1__GetVelocity*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVelocity(struct soap*, const char *URL, struct _turb1__GetVelocity*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVelocity(struct soap*, const char *URL, struct _turb1__GetVelocity*);
    soap_POST_recv__turb1__GetVelocity(struct soap*, struct _turb1__GetVelocity*);
    @endcode

  - <turb1:GetVelocityResponse> @ref _turb1__GetVelocityResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVelocityResponse(struct soap*, struct _turb1__GetVelocityResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVelocityResponse(struct soap*, struct _turb1__GetVelocityResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVelocityResponse(struct soap*, const char *URL, struct _turb1__GetVelocityResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVelocityResponse(struct soap*, const char *URL, struct _turb1__GetVelocityResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVelocityResponse(struct soap*, const char *URL, struct _turb1__GetVelocityResponse*);
    soap_POST_recv__turb1__GetVelocityResponse(struct soap*, struct _turb1__GetVelocityResponse*);
    @endcode

  - <turb1:GetMagneticField> @ref _turb1__GetMagneticField
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetMagneticField(struct soap*, struct _turb1__GetMagneticField*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetMagneticField(struct soap*, struct _turb1__GetMagneticField*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetMagneticField(struct soap*, const char *URL, struct _turb1__GetMagneticField*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetMagneticField(struct soap*, const char *URL, struct _turb1__GetMagneticField*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetMagneticField(struct soap*, const char *URL, struct _turb1__GetMagneticField*);
    soap_POST_recv__turb1__GetMagneticField(struct soap*, struct _turb1__GetMagneticField*);
    @endcode

  - <turb1:GetMagneticFieldResponse> @ref _turb1__GetMagneticFieldResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetMagneticFieldResponse(struct soap*, struct _turb1__GetMagneticFieldResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetMagneticFieldResponse(struct soap*, struct _turb1__GetMagneticFieldResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetMagneticFieldResponse(struct soap*, const char *URL, struct _turb1__GetMagneticFieldResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetMagneticFieldResponse(struct soap*, const char *URL, struct _turb1__GetMagneticFieldResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetMagneticFieldResponse(struct soap*, const char *URL, struct _turb1__GetMagneticFieldResponse*);
    soap_POST_recv__turb1__GetMagneticFieldResponse(struct soap*, struct _turb1__GetMagneticFieldResponse*);
    @endcode

  - <turb1:GetVectorPotential> @ref _turb1__GetVectorPotential
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVectorPotential(struct soap*, struct _turb1__GetVectorPotential*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVectorPotential(struct soap*, struct _turb1__GetVectorPotential*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVectorPotential(struct soap*, const char *URL, struct _turb1__GetVectorPotential*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVectorPotential(struct soap*, const char *URL, struct _turb1__GetVectorPotential*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVectorPotential(struct soap*, const char *URL, struct _turb1__GetVectorPotential*);
    soap_POST_recv__turb1__GetVectorPotential(struct soap*, struct _turb1__GetVectorPotential*);
    @endcode

  - <turb1:GetVectorPotentialResponse> @ref _turb1__GetVectorPotentialResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVectorPotentialResponse(struct soap*, struct _turb1__GetVectorPotentialResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVectorPotentialResponse(struct soap*, struct _turb1__GetVectorPotentialResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVectorPotentialResponse(struct soap*, const char *URL, struct _turb1__GetVectorPotentialResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVectorPotentialResponse(struct soap*, const char *URL, struct _turb1__GetVectorPotentialResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVectorPotentialResponse(struct soap*, const char *URL, struct _turb1__GetVectorPotentialResponse*);
    soap_POST_recv__turb1__GetVectorPotentialResponse(struct soap*, struct _turb1__GetVectorPotentialResponse*);
    @endcode

  - <turb1:GetPressure> @ref _turb1__GetPressure
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetPressure(struct soap*, struct _turb1__GetPressure*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetPressure(struct soap*, struct _turb1__GetPressure*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetPressure(struct soap*, const char *URL, struct _turb1__GetPressure*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetPressure(struct soap*, const char *URL, struct _turb1__GetPressure*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetPressure(struct soap*, const char *URL, struct _turb1__GetPressure*);
    soap_POST_recv__turb1__GetPressure(struct soap*, struct _turb1__GetPressure*);
    @endcode

  - <turb1:GetPressureResponse> @ref _turb1__GetPressureResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetPressureResponse(struct soap*, struct _turb1__GetPressureResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetPressureResponse(struct soap*, struct _turb1__GetPressureResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetPressureResponse(struct soap*, const char *URL, struct _turb1__GetPressureResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetPressureResponse(struct soap*, const char *URL, struct _turb1__GetPressureResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetPressureResponse(struct soap*, const char *URL, struct _turb1__GetPressureResponse*);
    soap_POST_recv__turb1__GetPressureResponse(struct soap*, struct _turb1__GetPressureResponse*);
    @endcode

  - <turb1:GetDensity> @ref _turb1__GetDensity
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetDensity(struct soap*, struct _turb1__GetDensity*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetDensity(struct soap*, struct _turb1__GetDensity*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetDensity(struct soap*, const char *URL, struct _turb1__GetDensity*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetDensity(struct soap*, const char *URL, struct _turb1__GetDensity*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetDensity(struct soap*, const char *URL, struct _turb1__GetDensity*);
    soap_POST_recv__turb1__GetDensity(struct soap*, struct _turb1__GetDensity*);
    @endcode

  - <turb1:GetDensityResponse> @ref _turb1__GetDensityResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetDensityResponse(struct soap*, struct _turb1__GetDensityResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetDensityResponse(struct soap*, struct _turb1__GetDensityResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetDensityResponse(struct soap*, const char *URL, struct _turb1__GetDensityResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetDensityResponse(struct soap*, const char *URL, struct _turb1__GetDensityResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetDensityResponse(struct soap*, const char *URL, struct _turb1__GetDensityResponse*);
    soap_POST_recv__turb1__GetDensityResponse(struct soap*, struct _turb1__GetDensityResponse*);
    @endcode

  - <turb1:GetTemperature> @ref _turb1__GetTemperature
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetTemperature(struct soap*, struct _turb1__GetTemperature*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetTemperature(struct soap*, struct _turb1__GetTemperature*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetTemperature(struct soap*, const char *URL, struct _turb1__GetTemperature*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetTemperature(struct soap*, const char *URL, struct _turb1__GetTemperature*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetTemperature(struct soap*, const char *URL, struct _turb1__GetTemperature*);
    soap_POST_recv__turb1__GetTemperature(struct soap*, struct _turb1__GetTemperature*);
    @endcode

  - <turb1:GetTemperatureResponse> @ref _turb1__GetTemperatureResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetTemperatureResponse(struct soap*, struct _turb1__GetTemperatureResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetTemperatureResponse(struct soap*, struct _turb1__GetTemperatureResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetTemperatureResponse(struct soap*, const char *URL, struct _turb1__GetTemperatureResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetTemperatureResponse(struct soap*, const char *URL, struct _turb1__GetTemperatureResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetTemperatureResponse(struct soap*, const char *URL, struct _turb1__GetTemperatureResponse*);
    soap_POST_recv__turb1__GetTemperatureResponse(struct soap*, struct _turb1__GetTemperatureResponse*);
    @endcode

  - <turb1:GetVelocityAndPressure> @ref _turb1__GetVelocityAndPressure
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVelocityAndPressure(struct soap*, struct _turb1__GetVelocityAndPressure*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVelocityAndPressure(struct soap*, struct _turb1__GetVelocityAndPressure*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVelocityAndPressure(struct soap*, const char *URL, struct _turb1__GetVelocityAndPressure*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVelocityAndPressure(struct soap*, const char *URL, struct _turb1__GetVelocityAndPressure*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVelocityAndPressure(struct soap*, const char *URL, struct _turb1__GetVelocityAndPressure*);
    soap_POST_recv__turb1__GetVelocityAndPressure(struct soap*, struct _turb1__GetVelocityAndPressure*);
    @endcode

  - <turb1:GetVelocityAndPressureResponse> @ref _turb1__GetVelocityAndPressureResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVelocityAndPressureResponse(struct soap*, struct _turb1__GetVelocityAndPressureResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVelocityAndPressureResponse(struct soap*, struct _turb1__GetVelocityAndPressureResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVelocityAndPressureResponse(struct soap*, const char *URL, struct _turb1__GetVelocityAndPressureResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVelocityAndPressureResponse(struct soap*, const char *URL, struct _turb1__GetVelocityAndPressureResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVelocityAndPressureResponse(struct soap*, const char *URL, struct _turb1__GetVelocityAndPressureResponse*);
    soap_POST_recv__turb1__GetVelocityAndPressureResponse(struct soap*, struct _turb1__GetVelocityAndPressureResponse*);
    @endcode

  - <turb1:GetVelocityAndTemperature> @ref _turb1__GetVelocityAndTemperature
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVelocityAndTemperature(struct soap*, struct _turb1__GetVelocityAndTemperature*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVelocityAndTemperature(struct soap*, struct _turb1__GetVelocityAndTemperature*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVelocityAndTemperature(struct soap*, const char *URL, struct _turb1__GetVelocityAndTemperature*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVelocityAndTemperature(struct soap*, const char *URL, struct _turb1__GetVelocityAndTemperature*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVelocityAndTemperature(struct soap*, const char *URL, struct _turb1__GetVelocityAndTemperature*);
    soap_POST_recv__turb1__GetVelocityAndTemperature(struct soap*, struct _turb1__GetVelocityAndTemperature*);
    @endcode

  - <turb1:GetVelocityAndTemperatureResponse> @ref _turb1__GetVelocityAndTemperatureResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVelocityAndTemperatureResponse(struct soap*, struct _turb1__GetVelocityAndTemperatureResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVelocityAndTemperatureResponse(struct soap*, struct _turb1__GetVelocityAndTemperatureResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVelocityAndTemperatureResponse(struct soap*, const char *URL, struct _turb1__GetVelocityAndTemperatureResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVelocityAndTemperatureResponse(struct soap*, const char *URL, struct _turb1__GetVelocityAndTemperatureResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVelocityAndTemperatureResponse(struct soap*, const char *URL, struct _turb1__GetVelocityAndTemperatureResponse*);
    soap_POST_recv__turb1__GetVelocityAndTemperatureResponse(struct soap*, struct _turb1__GetVelocityAndTemperatureResponse*);
    @endcode

  - <turb1:GetVelocityGradient> @ref _turb1__GetVelocityGradient
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVelocityGradient(struct soap*, struct _turb1__GetVelocityGradient*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVelocityGradient(struct soap*, struct _turb1__GetVelocityGradient*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVelocityGradient(struct soap*, const char *URL, struct _turb1__GetVelocityGradient*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVelocityGradient(struct soap*, const char *URL, struct _turb1__GetVelocityGradient*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVelocityGradient(struct soap*, const char *URL, struct _turb1__GetVelocityGradient*);
    soap_POST_recv__turb1__GetVelocityGradient(struct soap*, struct _turb1__GetVelocityGradient*);
    @endcode

  - <turb1:GetVelocityGradientResponse> @ref _turb1__GetVelocityGradientResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVelocityGradientResponse(struct soap*, struct _turb1__GetVelocityGradientResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVelocityGradientResponse(struct soap*, struct _turb1__GetVelocityGradientResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVelocityGradientResponse(struct soap*, const char *URL, struct _turb1__GetVelocityGradientResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVelocityGradientResponse(struct soap*, const char *URL, struct _turb1__GetVelocityGradientResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVelocityGradientResponse(struct soap*, const char *URL, struct _turb1__GetVelocityGradientResponse*);
    soap_POST_recv__turb1__GetVelocityGradientResponse(struct soap*, struct _turb1__GetVelocityGradientResponse*);
    @endcode

  - <turb1:GetMagneticFieldGradient> @ref _turb1__GetMagneticFieldGradient
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetMagneticFieldGradient(struct soap*, struct _turb1__GetMagneticFieldGradient*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetMagneticFieldGradient(struct soap*, struct _turb1__GetMagneticFieldGradient*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetMagneticFieldGradient(struct soap*, const char *URL, struct _turb1__GetMagneticFieldGradient*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetMagneticFieldGradient(struct soap*, const char *URL, struct _turb1__GetMagneticFieldGradient*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetMagneticFieldGradient(struct soap*, const char *URL, struct _turb1__GetMagneticFieldGradient*);
    soap_POST_recv__turb1__GetMagneticFieldGradient(struct soap*, struct _turb1__GetMagneticFieldGradient*);
    @endcode

  - <turb1:GetMagneticFieldGradientResponse> @ref _turb1__GetMagneticFieldGradientResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetMagneticFieldGradientResponse(struct soap*, struct _turb1__GetMagneticFieldGradientResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetMagneticFieldGradientResponse(struct soap*, struct _turb1__GetMagneticFieldGradientResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetMagneticFieldGradientResponse(struct soap*, const char *URL, struct _turb1__GetMagneticFieldGradientResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetMagneticFieldGradientResponse(struct soap*, const char *URL, struct _turb1__GetMagneticFieldGradientResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetMagneticFieldGradientResponse(struct soap*, const char *URL, struct _turb1__GetMagneticFieldGradientResponse*);
    soap_POST_recv__turb1__GetMagneticFieldGradientResponse(struct soap*, struct _turb1__GetMagneticFieldGradientResponse*);
    @endcode

  - <turb1:GetVectorPotentialGradient> @ref _turb1__GetVectorPotentialGradient
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVectorPotentialGradient(struct soap*, struct _turb1__GetVectorPotentialGradient*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVectorPotentialGradient(struct soap*, struct _turb1__GetVectorPotentialGradient*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVectorPotentialGradient(struct soap*, const char *URL, struct _turb1__GetVectorPotentialGradient*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVectorPotentialGradient(struct soap*, const char *URL, struct _turb1__GetVectorPotentialGradient*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVectorPotentialGradient(struct soap*, const char *URL, struct _turb1__GetVectorPotentialGradient*);
    soap_POST_recv__turb1__GetVectorPotentialGradient(struct soap*, struct _turb1__GetVectorPotentialGradient*);
    @endcode

  - <turb1:GetVectorPotentialGradientResponse> @ref _turb1__GetVectorPotentialGradientResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVectorPotentialGradientResponse(struct soap*, struct _turb1__GetVectorPotentialGradientResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVectorPotentialGradientResponse(struct soap*, struct _turb1__GetVectorPotentialGradientResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVectorPotentialGradientResponse(struct soap*, const char *URL, struct _turb1__GetVectorPotentialGradientResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVectorPotentialGradientResponse(struct soap*, const char *URL, struct _turb1__GetVectorPotentialGradientResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVectorPotentialGradientResponse(struct soap*, const char *URL, struct _turb1__GetVectorPotentialGradientResponse*);
    soap_POST_recv__turb1__GetVectorPotentialGradientResponse(struct soap*, struct _turb1__GetVectorPotentialGradientResponse*);
    @endcode

  - <turb1:GetPressureGradient> @ref _turb1__GetPressureGradient
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetPressureGradient(struct soap*, struct _turb1__GetPressureGradient*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetPressureGradient(struct soap*, struct _turb1__GetPressureGradient*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetPressureGradient(struct soap*, const char *URL, struct _turb1__GetPressureGradient*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetPressureGradient(struct soap*, const char *URL, struct _turb1__GetPressureGradient*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetPressureGradient(struct soap*, const char *URL, struct _turb1__GetPressureGradient*);
    soap_POST_recv__turb1__GetPressureGradient(struct soap*, struct _turb1__GetPressureGradient*);
    @endcode

  - <turb1:GetPressureGradientResponse> @ref _turb1__GetPressureGradientResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetPressureGradientResponse(struct soap*, struct _turb1__GetPressureGradientResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetPressureGradientResponse(struct soap*, struct _turb1__GetPressureGradientResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetPressureGradientResponse(struct soap*, const char *URL, struct _turb1__GetPressureGradientResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetPressureGradientResponse(struct soap*, const char *URL, struct _turb1__GetPressureGradientResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetPressureGradientResponse(struct soap*, const char *URL, struct _turb1__GetPressureGradientResponse*);
    soap_POST_recv__turb1__GetPressureGradientResponse(struct soap*, struct _turb1__GetPressureGradientResponse*);
    @endcode

  - <turb1:GetDensityGradient> @ref _turb1__GetDensityGradient
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetDensityGradient(struct soap*, struct _turb1__GetDensityGradient*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetDensityGradient(struct soap*, struct _turb1__GetDensityGradient*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetDensityGradient(struct soap*, const char *URL, struct _turb1__GetDensityGradient*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetDensityGradient(struct soap*, const char *URL, struct _turb1__GetDensityGradient*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetDensityGradient(struct soap*, const char *URL, struct _turb1__GetDensityGradient*);
    soap_POST_recv__turb1__GetDensityGradient(struct soap*, struct _turb1__GetDensityGradient*);
    @endcode

  - <turb1:GetDensityGradientResponse> @ref _turb1__GetDensityGradientResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetDensityGradientResponse(struct soap*, struct _turb1__GetDensityGradientResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetDensityGradientResponse(struct soap*, struct _turb1__GetDensityGradientResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetDensityGradientResponse(struct soap*, const char *URL, struct _turb1__GetDensityGradientResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetDensityGradientResponse(struct soap*, const char *URL, struct _turb1__GetDensityGradientResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetDensityGradientResponse(struct soap*, const char *URL, struct _turb1__GetDensityGradientResponse*);
    soap_POST_recv__turb1__GetDensityGradientResponse(struct soap*, struct _turb1__GetDensityGradientResponse*);
    @endcode

  - <turb1:GetTemperatureGradient> @ref _turb1__GetTemperatureGradient
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetTemperatureGradient(struct soap*, struct _turb1__GetTemperatureGradient*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetTemperatureGradient(struct soap*, struct _turb1__GetTemperatureGradient*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetTemperatureGradient(struct soap*, const char *URL, struct _turb1__GetTemperatureGradient*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetTemperatureGradient(struct soap*, const char *URL, struct _turb1__GetTemperatureGradient*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetTemperatureGradient(struct soap*, const char *URL, struct _turb1__GetTemperatureGradient*);
    soap_POST_recv__turb1__GetTemperatureGradient(struct soap*, struct _turb1__GetTemperatureGradient*);
    @endcode

  - <turb1:GetTemperatureGradientResponse> @ref _turb1__GetTemperatureGradientResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetTemperatureGradientResponse(struct soap*, struct _turb1__GetTemperatureGradientResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetTemperatureGradientResponse(struct soap*, struct _turb1__GetTemperatureGradientResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetTemperatureGradientResponse(struct soap*, const char *URL, struct _turb1__GetTemperatureGradientResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetTemperatureGradientResponse(struct soap*, const char *URL, struct _turb1__GetTemperatureGradientResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetTemperatureGradientResponse(struct soap*, const char *URL, struct _turb1__GetTemperatureGradientResponse*);
    soap_POST_recv__turb1__GetTemperatureGradientResponse(struct soap*, struct _turb1__GetTemperatureGradientResponse*);
    @endcode

  - <turb1:GetVelocityHessian> @ref _turb1__GetVelocityHessian
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVelocityHessian(struct soap*, struct _turb1__GetVelocityHessian*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVelocityHessian(struct soap*, struct _turb1__GetVelocityHessian*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVelocityHessian(struct soap*, const char *URL, struct _turb1__GetVelocityHessian*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVelocityHessian(struct soap*, const char *URL, struct _turb1__GetVelocityHessian*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVelocityHessian(struct soap*, const char *URL, struct _turb1__GetVelocityHessian*);
    soap_POST_recv__turb1__GetVelocityHessian(struct soap*, struct _turb1__GetVelocityHessian*);
    @endcode

  - <turb1:GetVelocityHessianResponse> @ref _turb1__GetVelocityHessianResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVelocityHessianResponse(struct soap*, struct _turb1__GetVelocityHessianResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVelocityHessianResponse(struct soap*, struct _turb1__GetVelocityHessianResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVelocityHessianResponse(struct soap*, const char *URL, struct _turb1__GetVelocityHessianResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVelocityHessianResponse(struct soap*, const char *URL, struct _turb1__GetVelocityHessianResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVelocityHessianResponse(struct soap*, const char *URL, struct _turb1__GetVelocityHessianResponse*);
    soap_POST_recv__turb1__GetVelocityHessianResponse(struct soap*, struct _turb1__GetVelocityHessianResponse*);
    @endcode

  - <turb1:GetMagneticHessian> @ref _turb1__GetMagneticHessian
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetMagneticHessian(struct soap*, struct _turb1__GetMagneticHessian*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetMagneticHessian(struct soap*, struct _turb1__GetMagneticHessian*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetMagneticHessian(struct soap*, const char *URL, struct _turb1__GetMagneticHessian*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetMagneticHessian(struct soap*, const char *URL, struct _turb1__GetMagneticHessian*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetMagneticHessian(struct soap*, const char *URL, struct _turb1__GetMagneticHessian*);
    soap_POST_recv__turb1__GetMagneticHessian(struct soap*, struct _turb1__GetMagneticHessian*);
    @endcode

  - <turb1:GetMagneticHessianResponse> @ref _turb1__GetMagneticHessianResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetMagneticHessianResponse(struct soap*, struct _turb1__GetMagneticHessianResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetMagneticHessianResponse(struct soap*, struct _turb1__GetMagneticHessianResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetMagneticHessianResponse(struct soap*, const char *URL, struct _turb1__GetMagneticHessianResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetMagneticHessianResponse(struct soap*, const char *URL, struct _turb1__GetMagneticHessianResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetMagneticHessianResponse(struct soap*, const char *URL, struct _turb1__GetMagneticHessianResponse*);
    soap_POST_recv__turb1__GetMagneticHessianResponse(struct soap*, struct _turb1__GetMagneticHessianResponse*);
    @endcode

  - <turb1:GetVectorPotentialHessian> @ref _turb1__GetVectorPotentialHessian
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVectorPotentialHessian(struct soap*, struct _turb1__GetVectorPotentialHessian*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVectorPotentialHessian(struct soap*, struct _turb1__GetVectorPotentialHessian*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVectorPotentialHessian(struct soap*, const char *URL, struct _turb1__GetVectorPotentialHessian*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVectorPotentialHessian(struct soap*, const char *URL, struct _turb1__GetVectorPotentialHessian*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVectorPotentialHessian(struct soap*, const char *URL, struct _turb1__GetVectorPotentialHessian*);
    soap_POST_recv__turb1__GetVectorPotentialHessian(struct soap*, struct _turb1__GetVectorPotentialHessian*);
    @endcode

  - <turb1:GetVectorPotentialHessianResponse> @ref _turb1__GetVectorPotentialHessianResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVectorPotentialHessianResponse(struct soap*, struct _turb1__GetVectorPotentialHessianResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVectorPotentialHessianResponse(struct soap*, struct _turb1__GetVectorPotentialHessianResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVectorPotentialHessianResponse(struct soap*, const char *URL, struct _turb1__GetVectorPotentialHessianResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVectorPotentialHessianResponse(struct soap*, const char *URL, struct _turb1__GetVectorPotentialHessianResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVectorPotentialHessianResponse(struct soap*, const char *URL, struct _turb1__GetVectorPotentialHessianResponse*);
    soap_POST_recv__turb1__GetVectorPotentialHessianResponse(struct soap*, struct _turb1__GetVectorPotentialHessianResponse*);
    @endcode

  - <turb1:GetPressureHessian> @ref _turb1__GetPressureHessian
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetPressureHessian(struct soap*, struct _turb1__GetPressureHessian*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetPressureHessian(struct soap*, struct _turb1__GetPressureHessian*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetPressureHessian(struct soap*, const char *URL, struct _turb1__GetPressureHessian*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetPressureHessian(struct soap*, const char *URL, struct _turb1__GetPressureHessian*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetPressureHessian(struct soap*, const char *URL, struct _turb1__GetPressureHessian*);
    soap_POST_recv__turb1__GetPressureHessian(struct soap*, struct _turb1__GetPressureHessian*);
    @endcode

  - <turb1:GetPressureHessianResponse> @ref _turb1__GetPressureHessianResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetPressureHessianResponse(struct soap*, struct _turb1__GetPressureHessianResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetPressureHessianResponse(struct soap*, struct _turb1__GetPressureHessianResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetPressureHessianResponse(struct soap*, const char *URL, struct _turb1__GetPressureHessianResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetPressureHessianResponse(struct soap*, const char *URL, struct _turb1__GetPressureHessianResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetPressureHessianResponse(struct soap*, const char *URL, struct _turb1__GetPressureHessianResponse*);
    soap_POST_recv__turb1__GetPressureHessianResponse(struct soap*, struct _turb1__GetPressureHessianResponse*);
    @endcode

  - <turb1:GetDensityHessian> @ref _turb1__GetDensityHessian
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetDensityHessian(struct soap*, struct _turb1__GetDensityHessian*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetDensityHessian(struct soap*, struct _turb1__GetDensityHessian*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetDensityHessian(struct soap*, const char *URL, struct _turb1__GetDensityHessian*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetDensityHessian(struct soap*, const char *URL, struct _turb1__GetDensityHessian*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetDensityHessian(struct soap*, const char *URL, struct _turb1__GetDensityHessian*);
    soap_POST_recv__turb1__GetDensityHessian(struct soap*, struct _turb1__GetDensityHessian*);
    @endcode

  - <turb1:GetDensityHessianResponse> @ref _turb1__GetDensityHessianResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetDensityHessianResponse(struct soap*, struct _turb1__GetDensityHessianResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetDensityHessianResponse(struct soap*, struct _turb1__GetDensityHessianResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetDensityHessianResponse(struct soap*, const char *URL, struct _turb1__GetDensityHessianResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetDensityHessianResponse(struct soap*, const char *URL, struct _turb1__GetDensityHessianResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetDensityHessianResponse(struct soap*, const char *URL, struct _turb1__GetDensityHessianResponse*);
    soap_POST_recv__turb1__GetDensityHessianResponse(struct soap*, struct _turb1__GetDensityHessianResponse*);
    @endcode

  - <turb1:GetTemperatureHessian> @ref _turb1__GetTemperatureHessian
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetTemperatureHessian(struct soap*, struct _turb1__GetTemperatureHessian*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetTemperatureHessian(struct soap*, struct _turb1__GetTemperatureHessian*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetTemperatureHessian(struct soap*, const char *URL, struct _turb1__GetTemperatureHessian*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetTemperatureHessian(struct soap*, const char *URL, struct _turb1__GetTemperatureHessian*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetTemperatureHessian(struct soap*, const char *URL, struct _turb1__GetTemperatureHessian*);
    soap_POST_recv__turb1__GetTemperatureHessian(struct soap*, struct _turb1__GetTemperatureHessian*);
    @endcode

  - <turb1:GetTemperatureHessianResponse> @ref _turb1__GetTemperatureHessianResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetTemperatureHessianResponse(struct soap*, struct _turb1__GetTemperatureHessianResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetTemperatureHessianResponse(struct soap*, struct _turb1__GetTemperatureHessianResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetTemperatureHessianResponse(struct soap*, const char *URL, struct _turb1__GetTemperatureHessianResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetTemperatureHessianResponse(struct soap*, const char *URL, struct _turb1__GetTemperatureHessianResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetTemperatureHessianResponse(struct soap*, const char *URL, struct _turb1__GetTemperatureHessianResponse*);
    soap_POST_recv__turb1__GetTemperatureHessianResponse(struct soap*, struct _turb1__GetTemperatureHessianResponse*);
    @endcode

  - <turb1:GetVelocityLaplacian> @ref _turb1__GetVelocityLaplacian
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVelocityLaplacian(struct soap*, struct _turb1__GetVelocityLaplacian*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVelocityLaplacian(struct soap*, struct _turb1__GetVelocityLaplacian*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVelocityLaplacian(struct soap*, const char *URL, struct _turb1__GetVelocityLaplacian*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVelocityLaplacian(struct soap*, const char *URL, struct _turb1__GetVelocityLaplacian*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVelocityLaplacian(struct soap*, const char *URL, struct _turb1__GetVelocityLaplacian*);
    soap_POST_recv__turb1__GetVelocityLaplacian(struct soap*, struct _turb1__GetVelocityLaplacian*);
    @endcode

  - <turb1:GetVelocityLaplacianResponse> @ref _turb1__GetVelocityLaplacianResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVelocityLaplacianResponse(struct soap*, struct _turb1__GetVelocityLaplacianResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVelocityLaplacianResponse(struct soap*, struct _turb1__GetVelocityLaplacianResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVelocityLaplacianResponse(struct soap*, const char *URL, struct _turb1__GetVelocityLaplacianResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVelocityLaplacianResponse(struct soap*, const char *URL, struct _turb1__GetVelocityLaplacianResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVelocityLaplacianResponse(struct soap*, const char *URL, struct _turb1__GetVelocityLaplacianResponse*);
    soap_POST_recv__turb1__GetVelocityLaplacianResponse(struct soap*, struct _turb1__GetVelocityLaplacianResponse*);
    @endcode

  - <turb1:GetMagneticFieldLaplacian> @ref _turb1__GetMagneticFieldLaplacian
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetMagneticFieldLaplacian(struct soap*, struct _turb1__GetMagneticFieldLaplacian*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetMagneticFieldLaplacian(struct soap*, struct _turb1__GetMagneticFieldLaplacian*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetMagneticFieldLaplacian(struct soap*, const char *URL, struct _turb1__GetMagneticFieldLaplacian*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetMagneticFieldLaplacian(struct soap*, const char *URL, struct _turb1__GetMagneticFieldLaplacian*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetMagneticFieldLaplacian(struct soap*, const char *URL, struct _turb1__GetMagneticFieldLaplacian*);
    soap_POST_recv__turb1__GetMagneticFieldLaplacian(struct soap*, struct _turb1__GetMagneticFieldLaplacian*);
    @endcode

  - <turb1:GetMagneticFieldLaplacianResponse> @ref _turb1__GetMagneticFieldLaplacianResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetMagneticFieldLaplacianResponse(struct soap*, struct _turb1__GetMagneticFieldLaplacianResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetMagneticFieldLaplacianResponse(struct soap*, struct _turb1__GetMagneticFieldLaplacianResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetMagneticFieldLaplacianResponse(struct soap*, const char *URL, struct _turb1__GetMagneticFieldLaplacianResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetMagneticFieldLaplacianResponse(struct soap*, const char *URL, struct _turb1__GetMagneticFieldLaplacianResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetMagneticFieldLaplacianResponse(struct soap*, const char *URL, struct _turb1__GetMagneticFieldLaplacianResponse*);
    soap_POST_recv__turb1__GetMagneticFieldLaplacianResponse(struct soap*, struct _turb1__GetMagneticFieldLaplacianResponse*);
    @endcode

  - <turb1:GetVectorPotentialLaplacian> @ref _turb1__GetVectorPotentialLaplacian
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVectorPotentialLaplacian(struct soap*, struct _turb1__GetVectorPotentialLaplacian*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVectorPotentialLaplacian(struct soap*, struct _turb1__GetVectorPotentialLaplacian*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVectorPotentialLaplacian(struct soap*, const char *URL, struct _turb1__GetVectorPotentialLaplacian*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVectorPotentialLaplacian(struct soap*, const char *URL, struct _turb1__GetVectorPotentialLaplacian*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVectorPotentialLaplacian(struct soap*, const char *URL, struct _turb1__GetVectorPotentialLaplacian*);
    soap_POST_recv__turb1__GetVectorPotentialLaplacian(struct soap*, struct _turb1__GetVectorPotentialLaplacian*);
    @endcode

  - <turb1:GetVectorPotentialLaplacianResponse> @ref _turb1__GetVectorPotentialLaplacianResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVectorPotentialLaplacianResponse(struct soap*, struct _turb1__GetVectorPotentialLaplacianResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVectorPotentialLaplacianResponse(struct soap*, struct _turb1__GetVectorPotentialLaplacianResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVectorPotentialLaplacianResponse(struct soap*, const char *URL, struct _turb1__GetVectorPotentialLaplacianResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVectorPotentialLaplacianResponse(struct soap*, const char *URL, struct _turb1__GetVectorPotentialLaplacianResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVectorPotentialLaplacianResponse(struct soap*, const char *URL, struct _turb1__GetVectorPotentialLaplacianResponse*);
    soap_POST_recv__turb1__GetVectorPotentialLaplacianResponse(struct soap*, struct _turb1__GetVectorPotentialLaplacianResponse*);
    @endcode

  - <turb1:GetPosition> @ref _turb1__GetPosition
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetPosition(struct soap*, struct _turb1__GetPosition*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetPosition(struct soap*, struct _turb1__GetPosition*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetPosition(struct soap*, const char *URL, struct _turb1__GetPosition*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetPosition(struct soap*, const char *URL, struct _turb1__GetPosition*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetPosition(struct soap*, const char *URL, struct _turb1__GetPosition*);
    soap_POST_recv__turb1__GetPosition(struct soap*, struct _turb1__GetPosition*);
    @endcode

  - <turb1:GetPositionResponse> @ref _turb1__GetPositionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetPositionResponse(struct soap*, struct _turb1__GetPositionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetPositionResponse(struct soap*, struct _turb1__GetPositionResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetPositionResponse(struct soap*, const char *URL, struct _turb1__GetPositionResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetPositionResponse(struct soap*, const char *URL, struct _turb1__GetPositionResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetPositionResponse(struct soap*, const char *URL, struct _turb1__GetPositionResponse*);
    soap_POST_recv__turb1__GetPositionResponse(struct soap*, struct _turb1__GetPositionResponse*);
    @endcode

  - <turb1:GetThreshold> @ref _turb1__GetThreshold
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetThreshold(struct soap*, struct _turb1__GetThreshold*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetThreshold(struct soap*, struct _turb1__GetThreshold*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetThreshold(struct soap*, const char *URL, struct _turb1__GetThreshold*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetThreshold(struct soap*, const char *URL, struct _turb1__GetThreshold*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetThreshold(struct soap*, const char *URL, struct _turb1__GetThreshold*);
    soap_POST_recv__turb1__GetThreshold(struct soap*, struct _turb1__GetThreshold*);
    @endcode

  - <turb1:GetThresholdResponse> @ref _turb1__GetThresholdResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetThresholdResponse(struct soap*, struct _turb1__GetThresholdResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetThresholdResponse(struct soap*, struct _turb1__GetThresholdResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetThresholdResponse(struct soap*, const char *URL, struct _turb1__GetThresholdResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetThresholdResponse(struct soap*, const char *URL, struct _turb1__GetThresholdResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetThresholdResponse(struct soap*, const char *URL, struct _turb1__GetThresholdResponse*);
    soap_POST_recv__turb1__GetThresholdResponse(struct soap*, struct _turb1__GetThresholdResponse*);
    @endcode

  - <turb1:GetForce> @ref _turb1__GetForce
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetForce(struct soap*, struct _turb1__GetForce*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetForce(struct soap*, struct _turb1__GetForce*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetForce(struct soap*, const char *URL, struct _turb1__GetForce*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetForce(struct soap*, const char *URL, struct _turb1__GetForce*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetForce(struct soap*, const char *URL, struct _turb1__GetForce*);
    soap_POST_recv__turb1__GetForce(struct soap*, struct _turb1__GetForce*);
    @endcode

  - <turb1:GetForceResponse> @ref _turb1__GetForceResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetForceResponse(struct soap*, struct _turb1__GetForceResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetForceResponse(struct soap*, struct _turb1__GetForceResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetForceResponse(struct soap*, const char *URL, struct _turb1__GetForceResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetForceResponse(struct soap*, const char *URL, struct _turb1__GetForceResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetForceResponse(struct soap*, const char *URL, struct _turb1__GetForceResponse*);
    soap_POST_recv__turb1__GetForceResponse(struct soap*, struct _turb1__GetForceResponse*);
    @endcode

  - <turb1:GetInvariant> @ref _turb1__GetInvariant
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetInvariant(struct soap*, struct _turb1__GetInvariant*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetInvariant(struct soap*, struct _turb1__GetInvariant*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetInvariant(struct soap*, const char *URL, struct _turb1__GetInvariant*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetInvariant(struct soap*, const char *URL, struct _turb1__GetInvariant*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetInvariant(struct soap*, const char *URL, struct _turb1__GetInvariant*);
    soap_POST_recv__turb1__GetInvariant(struct soap*, struct _turb1__GetInvariant*);
    @endcode

  - <turb1:GetInvariantResponse> @ref _turb1__GetInvariantResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetInvariantResponse(struct soap*, struct _turb1__GetInvariantResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetInvariantResponse(struct soap*, struct _turb1__GetInvariantResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetInvariantResponse(struct soap*, const char *URL, struct _turb1__GetInvariantResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetInvariantResponse(struct soap*, const char *URL, struct _turb1__GetInvariantResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetInvariantResponse(struct soap*, const char *URL, struct _turb1__GetInvariantResponse*);
    soap_POST_recv__turb1__GetInvariantResponse(struct soap*, struct _turb1__GetInvariantResponse*);
    @endcode

  - <turb1:GetBoxFilter> @ref _turb1__GetBoxFilter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetBoxFilter(struct soap*, struct _turb1__GetBoxFilter*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetBoxFilter(struct soap*, struct _turb1__GetBoxFilter*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetBoxFilter(struct soap*, const char *URL, struct _turb1__GetBoxFilter*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetBoxFilter(struct soap*, const char *URL, struct _turb1__GetBoxFilter*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetBoxFilter(struct soap*, const char *URL, struct _turb1__GetBoxFilter*);
    soap_POST_recv__turb1__GetBoxFilter(struct soap*, struct _turb1__GetBoxFilter*);
    @endcode

  - <turb1:GetBoxFilterResponse> @ref _turb1__GetBoxFilterResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetBoxFilterResponse(struct soap*, struct _turb1__GetBoxFilterResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetBoxFilterResponse(struct soap*, struct _turb1__GetBoxFilterResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetBoxFilterResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetBoxFilterResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetBoxFilterResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterResponse*);
    soap_POST_recv__turb1__GetBoxFilterResponse(struct soap*, struct _turb1__GetBoxFilterResponse*);
    @endcode

  - <turb1:GetBoxFilterSGS> @ref _turb1__GetBoxFilterSGS
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetBoxFilterSGS(struct soap*, struct _turb1__GetBoxFilterSGS*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetBoxFilterSGS(struct soap*, struct _turb1__GetBoxFilterSGS*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetBoxFilterSGS(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGS*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetBoxFilterSGS(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGS*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetBoxFilterSGS(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGS*);
    soap_POST_recv__turb1__GetBoxFilterSGS(struct soap*, struct _turb1__GetBoxFilterSGS*);
    @endcode

  - <turb1:GetBoxFilterSGSResponse> @ref _turb1__GetBoxFilterSGSResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetBoxFilterSGSResponse(struct soap*, struct _turb1__GetBoxFilterSGSResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetBoxFilterSGSResponse(struct soap*, struct _turb1__GetBoxFilterSGSResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetBoxFilterSGSResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetBoxFilterSGSResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetBoxFilterSGSResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSResponse*);
    soap_POST_recv__turb1__GetBoxFilterSGSResponse(struct soap*, struct _turb1__GetBoxFilterSGSResponse*);
    @endcode

  - <turb1:GetBoxFilterSGSsymtensor> @ref _turb1__GetBoxFilterSGSsymtensor
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetBoxFilterSGSsymtensor(struct soap*, struct _turb1__GetBoxFilterSGSsymtensor*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetBoxFilterSGSsymtensor(struct soap*, struct _turb1__GetBoxFilterSGSsymtensor*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetBoxFilterSGSsymtensor(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSsymtensor*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetBoxFilterSGSsymtensor(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSsymtensor*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetBoxFilterSGSsymtensor(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSsymtensor*);
    soap_POST_recv__turb1__GetBoxFilterSGSsymtensor(struct soap*, struct _turb1__GetBoxFilterSGSsymtensor*);
    @endcode

  - <turb1:GetBoxFilterSGSsymtensorResponse> @ref _turb1__GetBoxFilterSGSsymtensorResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetBoxFilterSGSsymtensorResponse(struct soap*, struct _turb1__GetBoxFilterSGSsymtensorResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetBoxFilterSGSsymtensorResponse(struct soap*, struct _turb1__GetBoxFilterSGSsymtensorResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetBoxFilterSGSsymtensorResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSsymtensorResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetBoxFilterSGSsymtensorResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSsymtensorResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetBoxFilterSGSsymtensorResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSsymtensorResponse*);
    soap_POST_recv__turb1__GetBoxFilterSGSsymtensorResponse(struct soap*, struct _turb1__GetBoxFilterSGSsymtensorResponse*);
    @endcode

  - <turb1:GetBoxFilterSGStensor> @ref _turb1__GetBoxFilterSGStensor
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetBoxFilterSGStensor(struct soap*, struct _turb1__GetBoxFilterSGStensor*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetBoxFilterSGStensor(struct soap*, struct _turb1__GetBoxFilterSGStensor*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetBoxFilterSGStensor(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGStensor*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetBoxFilterSGStensor(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGStensor*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetBoxFilterSGStensor(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGStensor*);
    soap_POST_recv__turb1__GetBoxFilterSGStensor(struct soap*, struct _turb1__GetBoxFilterSGStensor*);
    @endcode

  - <turb1:GetBoxFilterSGStensorResponse> @ref _turb1__GetBoxFilterSGStensorResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetBoxFilterSGStensorResponse(struct soap*, struct _turb1__GetBoxFilterSGStensorResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetBoxFilterSGStensorResponse(struct soap*, struct _turb1__GetBoxFilterSGStensorResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetBoxFilterSGStensorResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGStensorResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetBoxFilterSGStensorResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGStensorResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetBoxFilterSGStensorResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGStensorResponse*);
    soap_POST_recv__turb1__GetBoxFilterSGStensorResponse(struct soap*, struct _turb1__GetBoxFilterSGStensorResponse*);
    @endcode

  - <turb1:GetBoxFilterSGSvector> @ref _turb1__GetBoxFilterSGSvector
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetBoxFilterSGSvector(struct soap*, struct _turb1__GetBoxFilterSGSvector*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetBoxFilterSGSvector(struct soap*, struct _turb1__GetBoxFilterSGSvector*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetBoxFilterSGSvector(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSvector*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetBoxFilterSGSvector(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSvector*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetBoxFilterSGSvector(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSvector*);
    soap_POST_recv__turb1__GetBoxFilterSGSvector(struct soap*, struct _turb1__GetBoxFilterSGSvector*);
    @endcode

  - <turb1:GetBoxFilterSGSvectorResponse> @ref _turb1__GetBoxFilterSGSvectorResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetBoxFilterSGSvectorResponse(struct soap*, struct _turb1__GetBoxFilterSGSvectorResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetBoxFilterSGSvectorResponse(struct soap*, struct _turb1__GetBoxFilterSGSvectorResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetBoxFilterSGSvectorResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSvectorResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetBoxFilterSGSvectorResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSvectorResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetBoxFilterSGSvectorResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSvectorResponse*);
    soap_POST_recv__turb1__GetBoxFilterSGSvectorResponse(struct soap*, struct _turb1__GetBoxFilterSGSvectorResponse*);
    @endcode

  - <turb1:GetBoxFilterSGSscalar> @ref _turb1__GetBoxFilterSGSscalar
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetBoxFilterSGSscalar(struct soap*, struct _turb1__GetBoxFilterSGSscalar*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetBoxFilterSGSscalar(struct soap*, struct _turb1__GetBoxFilterSGSscalar*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetBoxFilterSGSscalar(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSscalar*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetBoxFilterSGSscalar(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSscalar*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetBoxFilterSGSscalar(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSscalar*);
    soap_POST_recv__turb1__GetBoxFilterSGSscalar(struct soap*, struct _turb1__GetBoxFilterSGSscalar*);
    @endcode

  - <turb1:GetBoxFilterSGSscalarResponse> @ref _turb1__GetBoxFilterSGSscalarResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetBoxFilterSGSscalarResponse(struct soap*, struct _turb1__GetBoxFilterSGSscalarResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetBoxFilterSGSscalarResponse(struct soap*, struct _turb1__GetBoxFilterSGSscalarResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetBoxFilterSGSscalarResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSscalarResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetBoxFilterSGSscalarResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSscalarResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetBoxFilterSGSscalarResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterSGSscalarResponse*);
    soap_POST_recv__turb1__GetBoxFilterSGSscalarResponse(struct soap*, struct _turb1__GetBoxFilterSGSscalarResponse*);
    @endcode

  - <turb1:GetBoxFilterGradient> @ref _turb1__GetBoxFilterGradient
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetBoxFilterGradient(struct soap*, struct _turb1__GetBoxFilterGradient*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetBoxFilterGradient(struct soap*, struct _turb1__GetBoxFilterGradient*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetBoxFilterGradient(struct soap*, const char *URL, struct _turb1__GetBoxFilterGradient*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetBoxFilterGradient(struct soap*, const char *URL, struct _turb1__GetBoxFilterGradient*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetBoxFilterGradient(struct soap*, const char *URL, struct _turb1__GetBoxFilterGradient*);
    soap_POST_recv__turb1__GetBoxFilterGradient(struct soap*, struct _turb1__GetBoxFilterGradient*);
    @endcode

  - <turb1:GetBoxFilterGradientResponse> @ref _turb1__GetBoxFilterGradientResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetBoxFilterGradientResponse(struct soap*, struct _turb1__GetBoxFilterGradientResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetBoxFilterGradientResponse(struct soap*, struct _turb1__GetBoxFilterGradientResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetBoxFilterGradientResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterGradientResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetBoxFilterGradientResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterGradientResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetBoxFilterGradientResponse(struct soap*, const char *URL, struct _turb1__GetBoxFilterGradientResponse*);
    soap_POST_recv__turb1__GetBoxFilterGradientResponse(struct soap*, struct _turb1__GetBoxFilterGradientResponse*);
    @endcode

  - <turb1:GetLaplacianOfGradient> @ref _turb1__GetLaplacianOfGradient
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetLaplacianOfGradient(struct soap*, struct _turb1__GetLaplacianOfGradient*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetLaplacianOfGradient(struct soap*, struct _turb1__GetLaplacianOfGradient*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetLaplacianOfGradient(struct soap*, const char *URL, struct _turb1__GetLaplacianOfGradient*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetLaplacianOfGradient(struct soap*, const char *URL, struct _turb1__GetLaplacianOfGradient*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetLaplacianOfGradient(struct soap*, const char *URL, struct _turb1__GetLaplacianOfGradient*);
    soap_POST_recv__turb1__GetLaplacianOfGradient(struct soap*, struct _turb1__GetLaplacianOfGradient*);
    @endcode

  - <turb1:GetLaplacianOfGradientResponse> @ref _turb1__GetLaplacianOfGradientResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetLaplacianOfGradientResponse(struct soap*, struct _turb1__GetLaplacianOfGradientResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetLaplacianOfGradientResponse(struct soap*, struct _turb1__GetLaplacianOfGradientResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetLaplacianOfGradientResponse(struct soap*, const char *URL, struct _turb1__GetLaplacianOfGradientResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetLaplacianOfGradientResponse(struct soap*, const char *URL, struct _turb1__GetLaplacianOfGradientResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetLaplacianOfGradientResponse(struct soap*, const char *URL, struct _turb1__GetLaplacianOfGradientResponse*);
    soap_POST_recv__turb1__GetLaplacianOfGradientResponse(struct soap*, struct _turb1__GetLaplacianOfGradientResponse*);
    @endcode

  - <turb1:GetVelocityBatch> @ref _turb1__GetVelocityBatch
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVelocityBatch(struct soap*, struct _turb1__GetVelocityBatch*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVelocityBatch(struct soap*, struct _turb1__GetVelocityBatch*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVelocityBatch(struct soap*, const char *URL, struct _turb1__GetVelocityBatch*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVelocityBatch(struct soap*, const char *URL, struct _turb1__GetVelocityBatch*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVelocityBatch(struct soap*, const char *URL, struct _turb1__GetVelocityBatch*);
    soap_POST_recv__turb1__GetVelocityBatch(struct soap*, struct _turb1__GetVelocityBatch*);
    @endcode

  - <turb1:GetVelocityBatchResponse> @ref _turb1__GetVelocityBatchResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetVelocityBatchResponse(struct soap*, struct _turb1__GetVelocityBatchResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetVelocityBatchResponse(struct soap*, struct _turb1__GetVelocityBatchResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetVelocityBatchResponse(struct soap*, const char *URL, struct _turb1__GetVelocityBatchResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetVelocityBatchResponse(struct soap*, const char *URL, struct _turb1__GetVelocityBatchResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetVelocityBatchResponse(struct soap*, const char *URL, struct _turb1__GetVelocityBatchResponse*);
    soap_POST_recv__turb1__GetVelocityBatchResponse(struct soap*, struct _turb1__GetVelocityBatchResponse*);
    @endcode

  - <turb1:GetRawVelocity> @ref _turb1__GetRawVelocity
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetRawVelocity(struct soap*, struct _turb1__GetRawVelocity*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetRawVelocity(struct soap*, struct _turb1__GetRawVelocity*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetRawVelocity(struct soap*, const char *URL, struct _turb1__GetRawVelocity*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetRawVelocity(struct soap*, const char *URL, struct _turb1__GetRawVelocity*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetRawVelocity(struct soap*, const char *URL, struct _turb1__GetRawVelocity*);
    soap_POST_recv__turb1__GetRawVelocity(struct soap*, struct _turb1__GetRawVelocity*);
    @endcode

  - <turb1:GetRawVelocityResponse> @ref _turb1__GetRawVelocityResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetRawVelocityResponse(struct soap*, struct _turb1__GetRawVelocityResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetRawVelocityResponse(struct soap*, struct _turb1__GetRawVelocityResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetRawVelocityResponse(struct soap*, const char *URL, struct _turb1__GetRawVelocityResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetRawVelocityResponse(struct soap*, const char *URL, struct _turb1__GetRawVelocityResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetRawVelocityResponse(struct soap*, const char *URL, struct _turb1__GetRawVelocityResponse*);
    soap_POST_recv__turb1__GetRawVelocityResponse(struct soap*, struct _turb1__GetRawVelocityResponse*);
    @endcode

  - <turb1:GetRawMagneticField> @ref _turb1__GetRawMagneticField
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetRawMagneticField(struct soap*, struct _turb1__GetRawMagneticField*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetRawMagneticField(struct soap*, struct _turb1__GetRawMagneticField*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetRawMagneticField(struct soap*, const char *URL, struct _turb1__GetRawMagneticField*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetRawMagneticField(struct soap*, const char *URL, struct _turb1__GetRawMagneticField*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetRawMagneticField(struct soap*, const char *URL, struct _turb1__GetRawMagneticField*);
    soap_POST_recv__turb1__GetRawMagneticField(struct soap*, struct _turb1__GetRawMagneticField*);
    @endcode

  - <turb1:GetRawMagneticFieldResponse> @ref _turb1__GetRawMagneticFieldResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetRawMagneticFieldResponse(struct soap*, struct _turb1__GetRawMagneticFieldResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetRawMagneticFieldResponse(struct soap*, struct _turb1__GetRawMagneticFieldResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetRawMagneticFieldResponse(struct soap*, const char *URL, struct _turb1__GetRawMagneticFieldResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetRawMagneticFieldResponse(struct soap*, const char *URL, struct _turb1__GetRawMagneticFieldResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetRawMagneticFieldResponse(struct soap*, const char *URL, struct _turb1__GetRawMagneticFieldResponse*);
    soap_POST_recv__turb1__GetRawMagneticFieldResponse(struct soap*, struct _turb1__GetRawMagneticFieldResponse*);
    @endcode

  - <turb1:GetRawVectorPotential> @ref _turb1__GetRawVectorPotential
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetRawVectorPotential(struct soap*, struct _turb1__GetRawVectorPotential*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetRawVectorPotential(struct soap*, struct _turb1__GetRawVectorPotential*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetRawVectorPotential(struct soap*, const char *URL, struct _turb1__GetRawVectorPotential*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetRawVectorPotential(struct soap*, const char *URL, struct _turb1__GetRawVectorPotential*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetRawVectorPotential(struct soap*, const char *URL, struct _turb1__GetRawVectorPotential*);
    soap_POST_recv__turb1__GetRawVectorPotential(struct soap*, struct _turb1__GetRawVectorPotential*);
    @endcode

  - <turb1:GetRawVectorPotentialResponse> @ref _turb1__GetRawVectorPotentialResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetRawVectorPotentialResponse(struct soap*, struct _turb1__GetRawVectorPotentialResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetRawVectorPotentialResponse(struct soap*, struct _turb1__GetRawVectorPotentialResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetRawVectorPotentialResponse(struct soap*, const char *URL, struct _turb1__GetRawVectorPotentialResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetRawVectorPotentialResponse(struct soap*, const char *URL, struct _turb1__GetRawVectorPotentialResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetRawVectorPotentialResponse(struct soap*, const char *URL, struct _turb1__GetRawVectorPotentialResponse*);
    soap_POST_recv__turb1__GetRawVectorPotentialResponse(struct soap*, struct _turb1__GetRawVectorPotentialResponse*);
    @endcode

  - <turb1:GetRawPressure> @ref _turb1__GetRawPressure
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetRawPressure(struct soap*, struct _turb1__GetRawPressure*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetRawPressure(struct soap*, struct _turb1__GetRawPressure*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetRawPressure(struct soap*, const char *URL, struct _turb1__GetRawPressure*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetRawPressure(struct soap*, const char *URL, struct _turb1__GetRawPressure*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetRawPressure(struct soap*, const char *URL, struct _turb1__GetRawPressure*);
    soap_POST_recv__turb1__GetRawPressure(struct soap*, struct _turb1__GetRawPressure*);
    @endcode

  - <turb1:GetRawPressureResponse> @ref _turb1__GetRawPressureResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetRawPressureResponse(struct soap*, struct _turb1__GetRawPressureResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetRawPressureResponse(struct soap*, struct _turb1__GetRawPressureResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetRawPressureResponse(struct soap*, const char *URL, struct _turb1__GetRawPressureResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetRawPressureResponse(struct soap*, const char *URL, struct _turb1__GetRawPressureResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetRawPressureResponse(struct soap*, const char *URL, struct _turb1__GetRawPressureResponse*);
    soap_POST_recv__turb1__GetRawPressureResponse(struct soap*, struct _turb1__GetRawPressureResponse*);
    @endcode

  - <turb1:GetRawDensity> @ref _turb1__GetRawDensity
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetRawDensity(struct soap*, struct _turb1__GetRawDensity*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetRawDensity(struct soap*, struct _turb1__GetRawDensity*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetRawDensity(struct soap*, const char *URL, struct _turb1__GetRawDensity*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetRawDensity(struct soap*, const char *URL, struct _turb1__GetRawDensity*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetRawDensity(struct soap*, const char *URL, struct _turb1__GetRawDensity*);
    soap_POST_recv__turb1__GetRawDensity(struct soap*, struct _turb1__GetRawDensity*);
    @endcode

  - <turb1:GetRawDensityResponse> @ref _turb1__GetRawDensityResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetRawDensityResponse(struct soap*, struct _turb1__GetRawDensityResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetRawDensityResponse(struct soap*, struct _turb1__GetRawDensityResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetRawDensityResponse(struct soap*, const char *URL, struct _turb1__GetRawDensityResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetRawDensityResponse(struct soap*, const char *URL, struct _turb1__GetRawDensityResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetRawDensityResponse(struct soap*, const char *URL, struct _turb1__GetRawDensityResponse*);
    soap_POST_recv__turb1__GetRawDensityResponse(struct soap*, struct _turb1__GetRawDensityResponse*);
    @endcode

  - <turb1:GetRawTemperature> @ref _turb1__GetRawTemperature
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetRawTemperature(struct soap*, struct _turb1__GetRawTemperature*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetRawTemperature(struct soap*, struct _turb1__GetRawTemperature*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetRawTemperature(struct soap*, const char *URL, struct _turb1__GetRawTemperature*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetRawTemperature(struct soap*, const char *URL, struct _turb1__GetRawTemperature*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetRawTemperature(struct soap*, const char *URL, struct _turb1__GetRawTemperature*);
    soap_POST_recv__turb1__GetRawTemperature(struct soap*, struct _turb1__GetRawTemperature*);
    @endcode

  - <turb1:GetRawTemperatureResponse> @ref _turb1__GetRawTemperatureResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetRawTemperatureResponse(struct soap*, struct _turb1__GetRawTemperatureResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetRawTemperatureResponse(struct soap*, struct _turb1__GetRawTemperatureResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetRawTemperatureResponse(struct soap*, const char *URL, struct _turb1__GetRawTemperatureResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetRawTemperatureResponse(struct soap*, const char *URL, struct _turb1__GetRawTemperatureResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetRawTemperatureResponse(struct soap*, const char *URL, struct _turb1__GetRawTemperatureResponse*);
    soap_POST_recv__turb1__GetRawTemperatureResponse(struct soap*, struct _turb1__GetRawTemperatureResponse*);
    @endcode

  - <turb1:GetAnyCutoutWeb> @ref _turb1__GetAnyCutoutWeb
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetAnyCutoutWeb(struct soap*, struct _turb1__GetAnyCutoutWeb*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetAnyCutoutWeb(struct soap*, struct _turb1__GetAnyCutoutWeb*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetAnyCutoutWeb(struct soap*, const char *URL, struct _turb1__GetAnyCutoutWeb*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetAnyCutoutWeb(struct soap*, const char *URL, struct _turb1__GetAnyCutoutWeb*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetAnyCutoutWeb(struct soap*, const char *URL, struct _turb1__GetAnyCutoutWeb*);
    soap_POST_recv__turb1__GetAnyCutoutWeb(struct soap*, struct _turb1__GetAnyCutoutWeb*);
    @endcode

  - <turb1:GetAnyCutoutWebResponse> @ref _turb1__GetAnyCutoutWebResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetAnyCutoutWebResponse(struct soap*, struct _turb1__GetAnyCutoutWebResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetAnyCutoutWebResponse(struct soap*, struct _turb1__GetAnyCutoutWebResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetAnyCutoutWebResponse(struct soap*, const char *URL, struct _turb1__GetAnyCutoutWebResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetAnyCutoutWebResponse(struct soap*, const char *URL, struct _turb1__GetAnyCutoutWebResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetAnyCutoutWebResponse(struct soap*, const char *URL, struct _turb1__GetAnyCutoutWebResponse*);
    soap_POST_recv__turb1__GetAnyCutoutWebResponse(struct soap*, struct _turb1__GetAnyCutoutWebResponse*);
    @endcode

  - <turb1:GetData_Python> @ref _turb1__GetData_USCOREPython
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetData_USCOREPython(struct soap*, struct _turb1__GetData_USCOREPython*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetData_USCOREPython(struct soap*, struct _turb1__GetData_USCOREPython*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetData_USCOREPython(struct soap*, const char *URL, struct _turb1__GetData_USCOREPython*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetData_USCOREPython(struct soap*, const char *URL, struct _turb1__GetData_USCOREPython*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetData_USCOREPython(struct soap*, const char *URL, struct _turb1__GetData_USCOREPython*);
    soap_POST_recv__turb1__GetData_USCOREPython(struct soap*, struct _turb1__GetData_USCOREPython*);
    @endcode

  - <turb1:GetData_PythonResponse> @ref _turb1__GetData_USCOREPythonResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetData_USCOREPythonResponse(struct soap*, struct _turb1__GetData_USCOREPythonResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetData_USCOREPythonResponse(struct soap*, struct _turb1__GetData_USCOREPythonResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetData_USCOREPythonResponse(struct soap*, const char *URL, struct _turb1__GetData_USCOREPythonResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetData_USCOREPythonResponse(struct soap*, const char *URL, struct _turb1__GetData_USCOREPythonResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetData_USCOREPythonResponse(struct soap*, const char *URL, struct _turb1__GetData_USCOREPythonResponse*);
    soap_POST_recv__turb1__GetData_USCOREPythonResponse(struct soap*, struct _turb1__GetData_USCOREPythonResponse*);
    @endcode

  - <turb1:GetFilter_Python> @ref _turb1__GetFilter_USCOREPython
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetFilter_USCOREPython(struct soap*, struct _turb1__GetFilter_USCOREPython*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetFilter_USCOREPython(struct soap*, struct _turb1__GetFilter_USCOREPython*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetFilter_USCOREPython(struct soap*, const char *URL, struct _turb1__GetFilter_USCOREPython*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetFilter_USCOREPython(struct soap*, const char *URL, struct _turb1__GetFilter_USCOREPython*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetFilter_USCOREPython(struct soap*, const char *URL, struct _turb1__GetFilter_USCOREPython*);
    soap_POST_recv__turb1__GetFilter_USCOREPython(struct soap*, struct _turb1__GetFilter_USCOREPython*);
    @endcode

  - <turb1:GetFilter_PythonResponse> @ref _turb1__GetFilter_USCOREPythonResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetFilter_USCOREPythonResponse(struct soap*, struct _turb1__GetFilter_USCOREPythonResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetFilter_USCOREPythonResponse(struct soap*, struct _turb1__GetFilter_USCOREPythonResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetFilter_USCOREPythonResponse(struct soap*, const char *URL, struct _turb1__GetFilter_USCOREPythonResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetFilter_USCOREPythonResponse(struct soap*, const char *URL, struct _turb1__GetFilter_USCOREPythonResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetFilter_USCOREPythonResponse(struct soap*, const char *URL, struct _turb1__GetFilter_USCOREPythonResponse*);
    soap_POST_recv__turb1__GetFilter_USCOREPythonResponse(struct soap*, struct _turb1__GetFilter_USCOREPythonResponse*);
    @endcode

  - <turb1:GetPosition_Python> @ref _turb1__GetPosition_USCOREPython
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetPosition_USCOREPython(struct soap*, struct _turb1__GetPosition_USCOREPython*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetPosition_USCOREPython(struct soap*, struct _turb1__GetPosition_USCOREPython*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetPosition_USCOREPython(struct soap*, const char *URL, struct _turb1__GetPosition_USCOREPython*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetPosition_USCOREPython(struct soap*, const char *URL, struct _turb1__GetPosition_USCOREPython*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetPosition_USCOREPython(struct soap*, const char *URL, struct _turb1__GetPosition_USCOREPython*);
    soap_POST_recv__turb1__GetPosition_USCOREPython(struct soap*, struct _turb1__GetPosition_USCOREPython*);
    @endcode

  - <turb1:GetPosition_PythonResponse> @ref _turb1__GetPosition_USCOREPythonResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetPosition_USCOREPythonResponse(struct soap*, struct _turb1__GetPosition_USCOREPythonResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetPosition_USCOREPythonResponse(struct soap*, struct _turb1__GetPosition_USCOREPythonResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetPosition_USCOREPythonResponse(struct soap*, const char *URL, struct _turb1__GetPosition_USCOREPythonResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetPosition_USCOREPythonResponse(struct soap*, const char *URL, struct _turb1__GetPosition_USCOREPythonResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetPosition_USCOREPythonResponse(struct soap*, const char *URL, struct _turb1__GetPosition_USCOREPythonResponse*);
    soap_POST_recv__turb1__GetPosition_USCOREPythonResponse(struct soap*, struct _turb1__GetPosition_USCOREPythonResponse*);
    @endcode

  - <turb1:GetThreshold_Python> @ref _turb1__GetThreshold_USCOREPython
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetThreshold_USCOREPython(struct soap*, struct _turb1__GetThreshold_USCOREPython*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetThreshold_USCOREPython(struct soap*, struct _turb1__GetThreshold_USCOREPython*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetThreshold_USCOREPython(struct soap*, const char *URL, struct _turb1__GetThreshold_USCOREPython*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetThreshold_USCOREPython(struct soap*, const char *URL, struct _turb1__GetThreshold_USCOREPython*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetThreshold_USCOREPython(struct soap*, const char *URL, struct _turb1__GetThreshold_USCOREPython*);
    soap_POST_recv__turb1__GetThreshold_USCOREPython(struct soap*, struct _turb1__GetThreshold_USCOREPython*);
    @endcode

  - <turb1:GetThreshold_PythonResponse> @ref _turb1__GetThreshold_USCOREPythonResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__turb1__GetThreshold_USCOREPythonResponse(struct soap*, struct _turb1__GetThreshold_USCOREPythonResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__turb1__GetThreshold_USCOREPythonResponse(struct soap*, struct _turb1__GetThreshold_USCOREPythonResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__turb1__GetThreshold_USCOREPythonResponse(struct soap*, const char *URL, struct _turb1__GetThreshold_USCOREPythonResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__turb1__GetThreshold_USCOREPythonResponse(struct soap*, const char *URL, struct _turb1__GetThreshold_USCOREPythonResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__turb1__GetThreshold_USCOREPythonResponse(struct soap*, const char *URL, struct _turb1__GetThreshold_USCOREPythonResponse*);
    soap_POST_recv__turb1__GetThreshold_USCOREPythonResponse(struct soap*, struct _turb1__GetThreshold_USCOREPythonResponse*);
    @endcode

*/

/* End of TurbulenceService.h */
